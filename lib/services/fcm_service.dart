import 'dart:convert';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:overlay_support/overlay_support.dart';
import 'package:shared_preferences/shared_preferences.dart';

class FCMService {
  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  static String? _currentToken;
  static Function(String)? _onTokenReceived;
  static GlobalKey<NavigatorState>? _navigatorKey;

  // Getter ƒë·ªÉ l·∫•y token hi·ªán t·∫°i
  static String? get currentToken => _currentToken;

  // Set navigator key ƒë·ªÉ c√≥ th·ªÉ navigate
  static void setNavigatorKey(GlobalKey<NavigatorState> navigatorKey) {
    _navigatorKey = navigatorKey;
  }

  // Kh·ªüi t·∫°o FCM service
  static Future<void> initialize({Function(String)? onTokenReceived}) async {
    _onTokenReceived = onTokenReceived;

    // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
    NotificationSettings settings = await _firebaseMessaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      print('‚úÖ Ng∆∞·ªùi d√πng ƒë√£ c·∫•p quy·ªÅn th√¥ng b√°o');
    } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {
      print('‚ö†Ô∏è Ng∆∞·ªùi d√πng ƒë√£ c·∫•p quy·ªÅn th√¥ng b√°o t·∫°m th·ªùi');
    } else {
      print('‚ùå Ng∆∞·ªùi d√πng t·ª´ ch·ªëi quy·ªÅn th√¥ng b√°o');
    }

    // L·∫•y FCM token v√† l∆∞u tr·ªØ
    await _getAndStoreToken();

    // L·∫Øng nghe th√¥ng b√°o khi app ƒëang m·ªü
    FirebaseMessaging.onMessage.listen(handleForegroundMessage);

    // L·∫Øng nghe khi ng∆∞·ªùi d√πng tap v√†o th√¥ng b√°o
    FirebaseMessaging.onMessageOpenedApp.listen(handleNotificationTap);

    // Ki·ªÉm tra th√¥ng b√°o ƒë√£ m·ªü app (khi app ƒë√£ t·∫Øt ho√†n to√†n)
    RemoteMessage? initialMessage = await _firebaseMessaging.getInitialMessage();
    if (initialMessage != null) {
      handleNotificationTap(initialMessage);
    }

    // L·∫Øng nghe token refresh
    _firebaseMessaging.onTokenRefresh.listen((newToken) {
      _currentToken = newToken;
      _saveTokenToPrefs(newToken);
      print("üîÑ Token ƒë√£ ƒë∆∞·ª£c refresh: $newToken");
      if (_onTokenReceived != null) {
        _onTokenReceived!(newToken);
      }
    });
  }

  // L·∫•y v√† l∆∞u tr·ªØ token
  static Future<void> _getAndStoreToken() async {
    try {
      String? token = await _firebaseMessaging.getToken();
      if (token != null) {
        _currentToken = token;
        await _saveTokenToPrefs(token);
        print("üìå FCM Token: $token");
        if (_onTokenReceived != null) {
          _onTokenReceived!(token);
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y FCM token: $e');
    }
  }

  // L∆∞u token v√†o SharedPreferences
  static Future<void> _saveTokenToPrefs(String token) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('fcm_token', token);
    } catch (e) {
      print('‚ùå L·ªói khi l∆∞u token: $e');
    }
  }

  // L·∫•y token t·ª´ SharedPreferences
  static Future<String?> getTokenFromPrefs() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getString('fcm_token');
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y token t·ª´ prefs: $e');
      return null;
    }
  }

  // L·∫•y FCM token
  static Future<String?> getToken() async {
    if (_currentToken != null) {
      return _currentToken;
    }

    try {
      String? token = await _firebaseMessaging.getToken();
      if (token != null) {
        _currentToken = token;
        await _saveTokenToPrefs(token);
      }
      return token;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y FCM token: $e');
      return null;
    }
  }

  // Send token to server
  static Future<void> sendTokenToServer(String token, {String? userId}) async {
    try {
      // TODO: Implement API call to send token to your server
      print('üöÄ G·ª≠i token l√™n server: $token');
      // Example:
      // await http.post(
      //   Uri.parse('your-api-endpoint/fcm-token'),
      //   headers: {'Content-Type': 'application/json'},
      //   body: jsonEncode({'token': token, 'userId': userId}),
      // );
    } catch (e) {
      print('‚ùå L·ªói khi g·ª≠i token l√™n server: $e');
    }
  }

  // Refresh FCM token
  static Future<String?> refreshToken() async {
    try {
      await _firebaseMessaging.deleteToken();
      String? newToken = await _firebaseMessaging.getToken();
      if (newToken != null) {
        _currentToken = newToken;
        await _saveTokenToPrefs(newToken);
        print("üîÑ Token m·ªõi: $newToken");
        if (_onTokenReceived != null) {
          _onTokenReceived!(newToken);
        }
      }
      return newToken;
    } catch (e) {
      print('‚ùå L·ªói khi refresh token: $e');
      return null;
    }
  }

  // Subscribe to topic
  static Future<void> subscribeToTopic(String topic) async {
    try {
      await _firebaseMessaging.subscribeToTopic(topic);
      print('‚úÖ ƒê√£ subscribe topic: $topic');
    } catch (e) {
      print('‚ùå L·ªói khi subscribe topic $topic: $e');
    }
  }

  // Unsubscribe from topic
  static Future<void> unsubscribeFromTopic(String topic) async {
    try {
      await _firebaseMessaging.unsubscribeFromTopic(topic);
      print('‚úÖ ƒê√£ unsubscribe topic: $topic');
    } catch (e) {
      print('‚ùå L·ªói khi unsubscribe topic $topic: $e');
    }
  }

  // X·ª≠ l√Ω th√¥ng b√°o khi app ƒëang m·ªü
  static void handleForegroundMessage(RemoteMessage message) {
    print("üì© Th√¥ng b√°o foreground: ${message.notification?.title}");

    // Hi·ªÉn th·ªã th√¥ng b√°o overlay
    if (message.notification != null) {
      showSimpleNotification(
        Text(message.notification!.title ?? 'Th√¥ng b√°o'),
        subtitle: Text(message.notification!.body ?? ''),
        background: Colors.blue,
        duration: Duration(seconds: 4),
        leading: Icon(
          Icons.notifications,
          color: Colors.white,
        ),
        trailing: TextButton(
          onPressed: () {
            // Dismiss the notification overlay
            if (_navigatorKey?.currentContext != null) {
              OverlaySupportEntry.of(_navigatorKey!.currentContext!)?.dismiss();
            }
            _handleDataPayload(message.data);
          },
          child: Text(
            'Xem',
            style: TextStyle(color: Colors.white),
          ),
        ),
      );
    }

    // X·ª≠ l√Ω data payload n·∫øu c√≥
    if (message.data.isNotEmpty) {
      print("üìä Data payload: ${message.data}");
    }
  }

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng tap v√†o th√¥ng b√°o
  static void handleNotificationTap(RemoteMessage message) {
    print("üì¨ Ng∆∞·ªùi d√πng b·∫•m v√†o th√¥ng b√°o: ${message.notification?.title}");

    // X·ª≠ l√Ω navigation ho·∫∑c action d·ª±a tr√™n data
    if (message.data.isNotEmpty) {
      _handleDataPayload(message.data);
    }
  }

  // X·ª≠ l√Ω data payload
  static void _handleDataPayload(Map<String, dynamic> data) {
    if (_navigatorKey?.currentContext == null) return;

    // V√≠ d·ª• x·ª≠ l√Ω c√°c lo·∫°i th√¥ng b√°o kh√°c nhau
    String? type = data['type'];
    String? targetScreen = data['screen'];

    switch (type) {
      case 'booking':
        print('üè† Th√¥ng b√°o booking m·ªõi');
        // Navigate to booking screen
        // _navigatorKey!.currentState?.pushNamed('/booking');
        break;
      case 'message':
        print('üí¨ Tin nh·∫Øn m·ªõi');
        // Navigate to chat screen
        // _navigatorKey!.currentState?.pushNamed('/chat');
        break;
      case 'reminder':
        print('‚è∞ Nh·∫Øc nh·ªü');
        // Show reminder dialog
        _showReminderDialog(data);
        break;
      case 'update':
        print('üîÑ C·∫≠p nh·∫≠t ·ª©ng d·ª•ng');
        // Show update dialog
        break;
      default:
        print('üìã Th√¥ng b√°o chung: $data');
        break;
    }
  }

  // Hi·ªÉn th·ªã dialog nh·∫Øc nh·ªü
  static void _showReminderDialog(Map<String, dynamic> data) {
    if (_navigatorKey?.currentContext == null) return;

    showDialog(
      context: _navigatorKey!.currentContext!,
      builder: (context) => AlertDialog(
        title: Text('Nh·∫Øc nh·ªü'),
        content: Text(data['message'] ?? 'B·∫°n c√≥ m·ªôt nh·∫Øc nh·ªü m·ªõi'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('ƒê√≥ng'),
          ),
          if (data['action'] != null)
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                // X·ª≠ l√Ω action
              },
              child: Text('Xem chi ti·∫øt'),
            ),
        ],
      ),
    );
  }

  // Clear token (logout)
  static Future<void> clearToken() async {
    try {
      await _firebaseMessaging.deleteToken();
      _currentToken = null;
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('fcm_token');
      print('üóëÔ∏è ƒê√£ x√≥a FCM token');
    } catch (e) {
      print('‚ùå L·ªói khi x√≥a token: $e');
    }
  }
}
