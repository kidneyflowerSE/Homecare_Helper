<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/android/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/android/app/src/main/res/values/colors.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/pages/fcm_test_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/pages/fcm_test_page.dart" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter/services.dart';&#10;import 'package:homecare_helper/services/fcm_service.dart';&#10;&#10;class FCMTestPage extends StatefulWidget {&#10;  @override&#10;  _FCMTestPageState createState() =&gt; _FCMTestPageState();&#10;}&#10;&#10;class _FCMTestPageState extends State&lt;FCMTestPage&gt; {&#10;  String? _token;&#10;  bool _isLoading = false;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _loadToken();&#10;  }&#10;&#10;  Future&lt;void&gt; _loadToken() async {&#10;    setState(() =&gt; _isLoading = true);&#10;    try {&#10;      String? token = await FCMService.getToken();&#10;      setState(() {&#10;        _token = token;&#10;        _isLoading = false;&#10;      });&#10;    } catch (e) {&#10;      setState(() =&gt; _isLoading = false);&#10;      _showSnackBar('Lỗi khi lấy token: $e', Colors.red);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _refreshToken() async {&#10;    setState(() =&gt; _isLoading = true);&#10;    try {&#10;      String? newToken = await FCMService.refreshToken();&#10;      setState(() {&#10;        _token = newToken;&#10;        _isLoading = false;&#10;      });&#10;      _showSnackBar('Token đã được refresh thành công!', Colors.green);&#10;    } catch (e) {&#10;      setState(() =&gt; _isLoading = false);&#10;      _showSnackBar('Lỗi khi refresh token: $e', Colors.red);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _copyToken() async {&#10;    if (_token != null) {&#10;      await Clipboard.setData(ClipboardData(text: _token!));&#10;      _showSnackBar('Token đã được copy!', Colors.blue);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _subscribeToTopic() async {&#10;    await FCMService.subscribeToTopic('general');&#10;    _showSnackBar('Đã subscribe topic &quot;general&quot;', Colors.green);&#10;  }&#10;&#10;  Future&lt;void&gt; _unsubscribeFromTopic() async {&#10;    await FCMService.unsubscribeFromTopic('general');&#10;    _showSnackBar('Đã unsubscribe topic &quot;general&quot;', Colors.orange);&#10;  }&#10;&#10;  void _showSnackBar(String message, Color color) {&#10;    ScaffoldMessenger.of(context).showSnackBar(&#10;      SnackBar(&#10;        content: Text(message),&#10;        backgroundColor: color,&#10;        duration: Duration(seconds: 3),&#10;      ),&#10;    );&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: Text('FCM Test'),&#10;        backgroundColor: Colors.blue,&#10;        foregroundColor: Colors.white,&#10;      ),&#10;      body: Padding(&#10;        padding: EdgeInsets.all(16.0),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.stretch,&#10;          children: [&#10;            Card(&#10;              child: Padding(&#10;                padding: EdgeInsets.all(16.0),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      'FCM Token:',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    SizedBox(height: 8),&#10;                    if (_isLoading)&#10;                      Center(child: CircularProgressIndicator())&#10;                    else if (_token != null)&#10;                      Container(&#10;                        padding: EdgeInsets.all(12),&#10;                        decoration: BoxDecoration(&#10;                          color: Colors.grey[100],&#10;                          borderRadius: BorderRadius.circular(8),&#10;                          border: Border.all(color: Colors.grey[300]!),&#10;                        ),&#10;                        child: Text(&#10;                          _token!,&#10;                          style: TextStyle(&#10;                            fontSize: 12,&#10;                            fontFamily: 'monospace',&#10;                          ),&#10;                        ),&#10;                      )&#10;                    else&#10;                      Text(&#10;                        'Không thể lấy token',&#10;                        style: TextStyle(color: Colors.red),&#10;                      ),&#10;                    SizedBox(height: 16),&#10;                    Row(&#10;                      children: [&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _token != null ? _copyToken : null,&#10;                            icon: Icon(Icons.copy),&#10;                            label: Text('Copy Token'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.blue,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                        SizedBox(width: 8),&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _refreshToken,&#10;                            icon: Icon(Icons.refresh),&#10;                            label: Text('Refresh'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.green,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;            SizedBox(height: 16),&#10;            Card(&#10;              child: Padding(&#10;                padding: EdgeInsets.all(16.0),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      'Topic Management:',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    SizedBox(height: 16),&#10;                    Row(&#10;                      children: [&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _subscribeToTopic,&#10;                            icon: Icon(Icons.add_alert),&#10;                            label: Text('Subscribe'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.green,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                        SizedBox(width: 8),&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _unsubscribeFromTopic,&#10;                            icon: Icon(Icons.notifications_off),&#10;                            label: Text('Unsubscribe'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.orange,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;            SizedBox(height: 16),&#10;            Card(&#10;              child: Padding(&#10;                padding: EdgeInsets.all(16.0),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      'Hướng dẫn test FCM:',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    SizedBox(height: 8),&#10;                    Text(&#10;                      '1. Copy token ở trên\n'&#10;                      '2. Vào Firebase Console &gt; Cloud Messaging\n'&#10;                      '3. Tạo thông báo mới\n'&#10;                      '4. Paste token vào &quot;Device registration token&quot;\n'&#10;                      '5. Gửi thông báo test',&#10;                      style: TextStyle(fontSize: 14),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/pages/home_content.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/pages/home_content.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:intl/intl.dart';&#10;import 'package:homecare_helper/data/model/customer.dart';&#10;import 'package:homecare_helper/data/model/helper.dart';&#10;import 'package:homecare_helper/data/model/request.dart';&#10;import 'package:homecare_helper/data/model/request_detail.dart';&#10;import 'dart:async';&#10;&#10;import '../data/model/RequestHelper.dart';&#10;import '../data/repository/repository.dart';&#10;&#10;class HomeContent extends StatefulWidget {&#10;  final Helper helper;&#10;  final String token;&#10;  final String refreshToken;&#10;&#10;  const HomeContent({&#10;    Key? key,&#10;    required this.helper,&#10;    required this.token,&#10;    required this.refreshToken,&#10;  }) : super(key: key);&#10;&#10;  @override&#10;  State&lt;HomeContent&gt; createState() =&gt; _HomeContentState();&#10;}&#10;&#10;class _HomeContentState extends State&lt;HomeContent&gt;&#10;    with SingleTickerProviderStateMixin {&#10;  String _selectedStatus = &quot;pending&quot;;&#10;  Key pageKey = UniqueKey();&#10;  List&lt;Requests&gt; requests = [];&#10;  List&lt;Requests&gt; helperRequests = [];&#10;  List&lt;Customer&gt; customers = [];&#10;  List&lt;RequestHelper&gt; unassignedRequests = [];&#10;  List&lt;RequestHelper&gt; assignedRequests = [];&#10;  bool isLoading = true;&#10;  late TabController _tabController;&#10;  List&lt;ScrollController&gt; _scrollControllers = [];&#10;  Map&lt;String, Set&lt;int&gt;&gt; completedDaysMap = {};&#10;  final currencyFormat =&#10;      NumberFormat.currency(locale: 'vi_VN', symbol: '₫', decimalDigits: 0);&#10;&#10;  // Countdown timer variables&#10;  Timer? _countdownTimer;&#10;  int _remainingMinutes = 0;&#10;  int _remainingSeconds = 0;&#10;&#10;  final Map&lt;String, Map&lt;String, dynamic&gt;&gt; _statusInfo = {&#10;    &quot;pending&quot;: {&#10;      &quot;label&quot;: &quot;Chờ xác nhận&quot;,&#10;      &quot;color&quot;: Colors.amber,&#10;      &quot;icon&quot;: Icons.access_time,&#10;    },&#10;    &quot;assigned&quot;: {&#10;      &quot;label&quot;: &quot;Đã nhận việc&quot;,&#10;      &quot;color&quot;: Colors.cyan,&#10;      &quot;icon&quot;: Icons.assignment_turned_in,&#10;    },&#10;    &quot;inProgress&quot;: {&#10;      &quot;label&quot;: &quot;Đang tiến hành&quot;,&#10;      &quot;color&quot;: Colors.blue,&#10;      &quot;icon&quot;: Icons.hourglass_top,&#10;    },&#10;    &quot;waitPayment&quot;: {&#10;      &quot;label&quot;: &quot;Chờ thanh toán&quot;,&#10;      &quot;color&quot;: Colors.orange,&#10;      &quot;icon&quot;: Icons.payments,&#10;    },&#10;    &quot;completed&quot;: {&#10;      &quot;label&quot;: &quot;Hoàn thành&quot;,&#10;      &quot;color&quot;: Colors.green,&#10;      &quot;icon&quot;: Icons.check_circle,&#10;    },&#10;  };&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _tabController = TabController(length: 5, vsync: this);&#10;&#10;    // Khởi tạo ScrollController cho mỗi tab&#10;    _scrollControllers = List.generate(5, (index) =&gt; ScrollController());&#10;&#10;    // Thêm listener cho mỗi scroll controller&#10;    for (int i = 0; i &lt; _scrollControllers.length; i++) {&#10;      _scrollControllers[i].addListener(() =&gt; _onScroll(i));&#10;    }&#10;&#10;    _tabController.addListener(() {&#10;      setState(() {&#10;        _selectedStatus = _getStatusByTabIndex(_tabController.index);&#10;      });&#10;    });&#10;    loadData();&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _tabController.dispose();&#10;    _countdownTimer?.cancel();&#10;    for (var controller in _scrollControllers) {&#10;      controller.dispose();&#10;    }&#10;    super.dispose();&#10;  }&#10;&#10;  void _startCountdownTimer() {&#10;    _countdownTimer?.cancel();&#10;&#10;    if (unassignedRequests.isNotEmpty) {&#10;      // Tính thời gian hiện tại&#10;      DateTime now = DateTime.now();&#10;&#10;      // Tính số phút đã trôi qua trong giờ hiện tại (0-59)&#10;      int currentMinutes = now.minute;&#10;&#10;      // Tính thời gian còn lại đến phút thứ 60 (tức là giờ tiếp theo)&#10;      int remainingMinutesToNextHour = 60 - currentMinutes;&#10;&#10;      // Nếu chúng ta đang ở phút 0, thì countdown sẽ là 60 phút&#10;      if (remainingMinutesToNextHour == 60) {&#10;        _remainingMinutes = 59;&#10;        _remainingSeconds = 60 - now.second;&#10;      } else {&#10;        _remainingMinutes = remainingMinutesToNextHour - 1;&#10;        _remainingSeconds = 60 - now.second;&#10;      }&#10;&#10;      _countdownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {&#10;        if (!mounted) {&#10;          timer.cancel();&#10;          return;&#10;        }&#10;&#10;        if (_remainingSeconds &gt; 0) {&#10;          setState(() {&#10;            _remainingSeconds--;&#10;          });&#10;        } else if (_remainingMinutes &gt; 0) {&#10;          setState(() {&#10;            _remainingMinutes--;&#10;            _remainingSeconds = 59;&#10;          });&#10;        } else {&#10;          // Countdown kết thúc, refresh danh sách&#10;          refreshRequestsOnly().then((_) {&#10;            if (mounted) {&#10;              _startCountdownTimer(); // Restart countdown&#10;            }&#10;          });&#10;        }&#10;      });&#10;    }&#10;  }&#10;&#10;  void _onScroll(int tabIndex) {&#10;    ScrollController controller = _scrollControllers[tabIndex];&#10;&#10;    // Kiểm tra nếu đã kéo đến cuối danh sách&#10;    if (controller.position.pixels == controller.position.maxScrollExtent) {&#10;      // Nếu user tiếp tục kéo lên (overscroll), reload data&#10;      if (controller.position.pixels &gt; controller.position.maxScrollExtent) {&#10;        refreshRequestsOnly();&#10;      }&#10;    }&#10;  }&#10;&#10;  String _getStatusByTabIndex(int index) {&#10;    switch (index) {&#10;      case 0:&#10;        return &quot;pending&quot;;&#10;      case 1:&#10;        return &quot;assigned&quot;;&#10;      case 2:&#10;        return &quot;inProgress&quot;;&#10;      case 3:&#10;        return &quot;waitPayment&quot;;&#10;      case 4:&#10;        return &quot;completed&quot;;&#10;      default:&#10;        return &quot;pending&quot;;&#10;    }&#10;  }&#10;  &#10;  void updateWorkingStatus(String status) async {&#10;    var repository = DefaultRepository();&#10;    await repository.updateWorkingStatus(status, widget.token);&#10;    if (mounted) {&#10;      setState(() {&#10;        widget.helper.workingStatus = status;&#10;      });&#10;      if (widget.helper.workingStatus == &quot;online&quot;) {&#10;        // Nếu chuyển sang online, chỉ tải lại danh sách công việc&#10;        refreshRequestsOnly();&#10;      } else {&#10;        // Nếu chuyển sang offline, dừng timer và xóa danh sách công việc&#10;        _countdownTimer?.cancel();&#10;        setState(() {&#10;          unassignedRequests.clear();&#10;          assignedRequests.clear();&#10;        });&#10;      }&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; loadData() async {&#10;    if (!mounted) return;&#10;&#10;    setState(() {&#10;      isLoading = true;&#10;    });&#10;&#10;    try {&#10;      var repository = DefaultRepository();&#10;&#10;      var fetchedRequests = await repository.loadRequest();&#10;      var fetchedCustomers = await repository.loadCustomer();&#10;      var unassignedRequestsData =&#10;          await repository.loadUnassignedRequest(widget.token);&#10;      var assignedRequestsData =&#10;          await repository.loadAssignedRequest(widget.token);&#10;&#10;      if (mounted) {&#10;        setState(() {&#10;          requests = fetchedRequests ?? [];&#10;          customers = fetchedCustomers ?? [];&#10;          unassignedRequests = unassignedRequestsData ?? [];&#10;          assignedRequests = assignedRequestsData ?? [];&#10;          isLoading = false;&#10;        });&#10;&#10;        // Start countdown timer after loading data&#10;        _startCountdownTimer();&#10;      }&#10;    } catch (e) {&#10;      if (mounted) {&#10;        setState(() {&#10;          isLoading = false;&#10;        });&#10;&#10;        ScaffoldMessenger.of(context).showSnackBar(&#10;          SnackBar(&#10;            content: Text('Lỗi tải dữ liệu: $e'),&#10;            backgroundColor: Colors.red,&#10;          ),&#10;        );&#10;      }&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; refreshRequestsOnly() async {&#10;    try {&#10;      var repository = DefaultRepository();&#10;&#10;      var unassignedRequestsData =&#10;          await repository.loadUnassignedRequest(widget.token);&#10;      var assignedRequestsData =&#10;          await repository.loadAssignedRequest(widget.token);&#10;&#10;      if (mounted) {&#10;        setState(() {&#10;          unassignedRequests = unassignedRequestsData ?? [];&#10;          assignedRequests = assignedRequestsData ?? [];&#10;        });&#10;&#10;        // Restart countdown timer after refresh&#10;        _startCountdownTimer();&#10;      }&#10;    } catch (e) {&#10;      if (mounted) {&#10;        ScaffoldMessenger.of(context).showSnackBar(&#10;          SnackBar(&#10;            content: Text('Lỗi tải danh sách: $e'),&#10;            backgroundColor: Colors.red,&#10;          ),&#10;        );&#10;      }&#10;    }&#10;  }&#10;&#10;  int _countWeeklyJobs(List&lt;Requests&gt; requests) {&#10;    final now = DateTime.now();&#10;    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));&#10;    final endOfWeek = startOfWeek.add(const Duration(days: 6));&#10;&#10;    return requests.where((req) {&#10;      try {&#10;        final jobDate = DateTime.parse(req.startTime);&#10;        return jobDate.isAfter(startOfWeek) &amp;&amp;&#10;            jobDate.isBefore(endOfWeek.add(const Duration(days: 1)));&#10;      } catch (e) {&#10;        return false;&#10;      }&#10;    }).length;&#10;  }&#10;&#10;  int _getJobCountByStatus(String status) {&#10;    if (status == 'pending') {&#10;      return unassignedRequests.length;&#10;    } else {&#10;      return assignedRequests&#10;          .where((req) =&gt; req.schedules.first.status == status)&#10;          .length;&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; assignedRequest(RequestHelper request) async {&#10;    var repository = DefaultRepository();&#10;    await repository.remoteDataSource&#10;        .assignedRequest(request.schedules.first.id, widget.token);&#10;    if (mounted) {&#10;      setState(() {&#10;        request.schedules.first.status = 'assigned';&#10;        // Move request from unassigned to assigned list&#10;        unassignedRequests.removeWhere((r) =&gt; r.id == request.id);&#10;        assignedRequests.add(request);&#10;      });&#10;      // Switch to assigned tab&#10;      _switchToStatusTab('assigned');&#10;      await refreshRequestsOnly();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; processingRequest(RequestHelper request, int index) async {&#10;    var repository = DefaultRepository();&#10;    await repository.processingRequest(&#10;        request.schedules.first.id, widget.token);&#10;    if (mounted) {&#10;      setState(() {&#10;        request.schedules.first.status = 'inProgress';&#10;      });&#10;      // Switch to in progress tab&#10;      _switchToStatusTab('inProgress');&#10;      await refreshRequestsOnly();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; finishRequest(RequestHelper request, int index) async {&#10;    var repository = DefaultRepository();&#10;    await repository.finishRequest(request.schedules.first.id, widget.token);&#10;    if (mounted) {&#10;      setState(() {&#10;        request.schedules.first.status = 'waitPayment';&#10;      });&#10;      // Switch to wait payment tab&#10;      _switchToStatusTab('waitPayment');&#10;      await refreshRequestsOnly();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; finishPayment(RequestHelper request) async {&#10;    var repository = DefaultRepository();&#10;    await repository.remoteDataSource&#10;        .finishPayment(request.schedules.first.id, widget.token);&#10;    if (mounted) {&#10;      setState(() {&#10;        request.schedules.first.status = 'completed';&#10;      });&#10;      // Switch to done tab&#10;      _switchToStatusTab('completed');&#10;      await refreshRequestsOnly();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; cancelRequest(RequestHelper request) async {&#10;    var repository = DefaultRepository();&#10;    await repository.remoteDataSource.cancelRequest(request.id);&#10;    print(&quot;Thông tin huỷ request $request&quot;);&#10;    if (mounted) {&#10;      setState(() {&#10;        request.schedules.first.status = 'cancelled';&#10;        // Remove from current lists&#10;        unassignedRequests.removeWhere((r) =&gt; r.id == request.id);&#10;        assignedRequests.removeWhere((r) =&gt; r.id == request.id);&#10;      });&#10;      await refreshRequestsOnly();&#10;    }&#10;  }&#10;&#10;  // Add method to switch tabs based on status&#10;  void _switchToStatusTab(String status) {&#10;    final statusKeys = _statusInfo.keys.toList();&#10;    final tabIndex = statusKeys.indexOf(status);&#10;    if (tabIndex != -1 &amp;&amp; _tabController.index != tabIndex) {&#10;      _tabController.animateTo(tabIndex);&#10;    }&#10;  }&#10;&#10;  String formatDate(DateTime date) {&#10;    String day = date.day.toString().padLeft(2, '0');&#10;    String month = date.month.toString().padLeft(2, '0');&#10;    String year = date.year.toString();&#10;    return '$day/$month/$year';&#10;  }&#10;&#10;  String formatTime(DateTime date) {&#10;    String minutes = date.minute.toString().padLeft(2, '0');&#10;    String hours = date.hour.toString().padLeft(2, '0');&#10;    return '$hours:$minutes';&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    // Remove this line since we're not using helperRequests anymore&#10;    // updateHelperRequests();&#10;&#10;    // Filter requests based on selected status - this is now unused&#10;    List&lt;Requests&gt; filteredRequests =&#10;        helperRequests.where((req) =&gt; req.status == _selectedStatus).toList()&#10;          ..sort((a, b) {&#10;            DateTime dateA =&#10;                DateTime.parse(a.startTime ?? DateTime.now().toString());&#10;            DateTime dateB =&#10;                DateTime.parse(b.startTime ?? DateTime.now().toString());&#10;            return dateB.compareTo(dateA); // Sort by most recent first&#10;          });&#10;&#10;    return SafeArea(&#10;      child: isLoading&#10;          ? const Center(child: CircularProgressIndicator())&#10;          : RefreshIndicator(&#10;              onRefresh: refreshRequestsOnly,&#10;              child: NestedScrollView(&#10;                headerSliverBuilder: (context, innerBoxIsScrolled) {&#10;                  return [&#10;                    SliverToBoxAdapter(&#10;                      child: _buildHeader(),&#10;                    ),&#10;                    SliverToBoxAdapter(&#10;                      child: _buildDashboard(),&#10;                    ),&#10;                    // Chỉ hiển thị TabBar khi helper đang online&#10;                    if (widget.helper.workingStatus == &quot;online&quot;)&#10;                      SliverPersistentHeader(&#10;                        delegate: _SliverAppBarDelegate(&#10;                          TabBar(&#10;                            controller: _tabController,&#10;                            isScrollable: true,&#10;                            labelColor: Colors.green,&#10;                            unselectedLabelColor: Colors.grey.shade400,&#10;                            indicatorColor: Colors.green,&#10;                            tabs: _statusInfo.entries.map((entry) {&#10;                              return Tab(&#10;                                icon: Badge(&#10;                                  backgroundColor: Colors.red,&#10;                                  label: Text(_getJobCountByStatus(entry.key)&#10;                                      .toString()),&#10;                                  isLabelVisible:&#10;                                      _getJobCountByStatus(entry.key) &gt; 0,&#10;                                  child: Icon(entry.value[&quot;icon&quot;]),&#10;                                ),&#10;                                text: entry.value[&quot;label&quot;],&#10;                              );&#10;                            }).toList(),&#10;                          ),&#10;                        ),&#10;                        pinned: true,&#10;                      ),&#10;                  ];&#10;                },&#10;                body: widget.helper.workingStatus == &quot;online&quot;&#10;                    ? TabBarView(&#10;                        controller: _tabController,&#10;                        children: _statusInfo.keys.map((status) {&#10;                          final tabIndex =&#10;                              _statusInfo.keys.toList().indexOf(status);&#10;                          final statusRequests = status == 'pending'&#10;                              ? unassignedRequests&#10;                              : assignedRequests&#10;                                  .where((req) =&gt;&#10;                                      req.schedules.first.status == status)&#10;                                  .toList()&#10;                            ..sort((a, b) {&#10;                              DateTime dateA = a.startTime;&#10;                              DateTime dateB = b.startTime;&#10;                              return dateB.compareTo(dateA);&#10;                            });&#10;&#10;                          if (statusRequests.isEmpty) {&#10;                            return RefreshIndicator(&#10;                              onRefresh: () async {&#10;                                await refreshRequestsOnly();&#10;                                // Auto refresh every 30 seconds for pending tab&#10;                                if (status == 'pending') {&#10;                                  _startCountdownTimer();&#10;                                }&#10;                              },&#10;                              child: SingleChildScrollView(&#10;                                physics: const AlwaysScrollableScrollPhysics(),&#10;                                child: SizedBox(&#10;                                  height:&#10;                                      MediaQuery.of(context).size.height * 0.6,&#10;                                  child: _buildEmptyState(status),&#10;                                ),&#10;                              ),&#10;                            );&#10;                          }&#10;&#10;                          return RefreshIndicator(&#10;                            onRefresh: () async {&#10;                              await refreshRequestsOnly();&#10;                              // Auto refresh every 30 seconds for pending tab&#10;                              if (status == 'pending') {&#10;                                _startCountdownTimer();&#10;                              }&#10;                            },&#10;                            child: NotificationListener&lt;ScrollNotification&gt;(&#10;                              onNotification: (ScrollNotification scrollInfo) {&#10;                                // Kiểm tra nếu đã scroll đến cuối và user vẫn tiếp tục kéo&#10;                                if (scrollInfo is OverscrollNotification &amp;&amp;&#10;                                    scrollInfo.overscroll &gt; 0 &amp;&amp;&#10;                                    scrollInfo.metrics.pixels &gt;=&#10;                                        scrollInfo.metrics.maxScrollExtent) {&#10;                                  // Kéo lên ở cuối danh sách - reload&#10;                                  refreshRequestsOnly();&#10;                                  return true;&#10;                                }&#10;                                return false;&#10;                              },&#10;                              child: ListView.builder(&#10;                                controller: tabIndex &lt; _scrollControllers.length&#10;                                    ? _scrollControllers[tabIndex]&#10;                                    : null,&#10;                                physics: const AlwaysScrollableScrollPhysics(),&#10;                                padding: const EdgeInsets.symmetric(&#10;                                    horizontal: 16, vertical: 8),&#10;                                itemCount: statusRequests.length,&#10;                                itemBuilder: (context, index) {&#10;                                  return _buildJobCard(statusRequests[index]);&#10;                                },&#10;                              ),&#10;                            ),&#10;                          );&#10;                        }).toList(),&#10;                      )&#10;                    : RefreshIndicator(&#10;                        onRefresh: refreshRequestsOnly,&#10;                        child: SingleChildScrollView(&#10;                          physics: const AlwaysScrollableScrollPhysics(),&#10;                          child: SizedBox(&#10;                            height: MediaQuery.of(context).size.height * 0.6,&#10;                            child: _buildInactiveState(),&#10;                          ),&#10;                        ),&#10;                      ),&#10;              ),&#10;            ),&#10;    );&#10;  }&#10;&#10;  // Thêm widget cho trạng thái inactive&#10;  Widget _buildInactiveState() {&#10;    return Center(&#10;      child: Column(&#10;        mainAxisAlignment: MainAxisAlignment.center,&#10;        children: [&#10;          Icon(&#10;            Icons.work_off_outlined,&#10;            size: 64,&#10;            color: Colors.grey[300],&#10;          ),&#10;          const SizedBox(height: 16),&#10;          Text(&#10;            &quot;Bạn đang tạm dừng nhận việc&quot;,&#10;            style: TextStyle(&#10;              fontSize: 18,&#10;              fontWeight: FontWeight.bold,&#10;              fontFamily: 'Quicksand',&#10;              color: Colors.grey[600],&#10;            ),&#10;          ),&#10;          const SizedBox(height: 8),&#10;          Text(&#10;            &quot;Bật trạng thái 'Sẵn sàng nhận việc' để xem danh sách công việc&quot;,&#10;            style: TextStyle(&#10;              fontSize: 14,&#10;              color: Colors.grey[500],&#10;              fontFamily: 'Quicksand',&#10;            ),&#10;            textAlign: TextAlign.center,&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildHeader() {&#10;    return Container(&#10;      padding: const EdgeInsets.all(16),&#10;      decoration: BoxDecoration(&#10;        color: Colors.green.withOpacity(0.05),&#10;        borderRadius: const BorderRadius.only(&#10;          bottomLeft: Radius.circular(24),&#10;          bottomRight: Radius.circular(24),&#10;        ),&#10;      ),&#10;      child: Column(&#10;        children: [&#10;          Row(&#10;            children: [&#10;              Container(&#10;                decoration: BoxDecoration(&#10;                  border: Border.all(color: Colors.white, width: 2),&#10;                  borderRadius: BorderRadius.circular(50),&#10;                ),&#10;                child: CircleAvatar(&#10;                  radius: 24,&#10;                  backgroundImage: widget.helper.avatar!.isEmpty&#10;                      ? NetworkImage('${widget.helper.avatar}')&#10;                      : null,&#10;                  child: widget.helper.avatar!.isEmpty&#10;                      ? Icon(Icons.person, color: Colors.green)&#10;                      : null,&#10;                ),&#10;              ),&#10;              const SizedBox(width: 12),&#10;              Expanded(&#10;                flex: 3,&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      &quot;Xin chào,&quot;,&#10;                      style: TextStyle(&#10;                        fontSize: 14,&#10;                        color: Colors.grey[600],&#10;                        fontWeight: FontWeight.w500,&#10;                        fontFamily: 'Quicksand',&#10;                      ),&#10;                    ),&#10;                    Text(&#10;                      '${widget.helper.fullName}',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                        color: Colors.green,&#10;                        fontFamily: 'Quicksand',&#10;                      ),&#10;                      overflow: TextOverflow.ellipsis,&#10;                      maxLines: 1,&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;              const SizedBox(width: 8),&#10;              Flexible(&#10;                flex: 2,&#10;                child: Container(&#10;                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),&#10;                  decoration: BoxDecoration(&#10;                    color: widget.helper.workingStatus == &quot;online&quot;&#10;                        ? Colors.green.withOpacity(0.15)&#10;                        : Colors.grey.withOpacity(0.15),&#10;                    borderRadius: BorderRadius.circular(20),&#10;                  ),&#10;                  child: Row(&#10;                    mainAxisSize: MainAxisSize.min,&#10;                    children: [&#10;                      Container(&#10;                        width: 8,&#10;                        height: 8,&#10;                        decoration: BoxDecoration(&#10;                          color: widget.helper.workingStatus == &quot;online&quot; ? Colors.green : Colors.grey,&#10;                          shape: BoxShape.circle,&#10;                        ),&#10;                      ),&#10;                      const SizedBox(width: 4),&#10;                      Flexible(&#10;                        child: Text(&#10;                          widget.helper.workingStatus == &quot;online&quot; ? &quot;Trực tuyến&quot; : &quot;Ngoại tuyến&quot;,&#10;                          style: TextStyle(&#10;                            color: widget.helper.workingStatus == &quot;online&quot; ? Colors.green : Colors.grey,&#10;                            fontWeight: FontWeight.w600,&#10;                            fontSize: 12,&#10;                            fontFamily: 'Quicksand',&#10;                          ),&#10;                          overflow: TextOverflow.ellipsis,&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;          const SizedBox(height: 16),&#10;          // Thêm toggle switch&#10;          Container(&#10;            padding: const EdgeInsets.all(16),&#10;            decoration: BoxDecoration(&#10;              color: Colors.white,&#10;              borderRadius: BorderRadius.circular(12),&#10;              boxShadow: [&#10;                BoxShadow(&#10;                  color: Colors.grey.withOpacity(0.1),&#10;                  blurRadius: 8,&#10;                  offset: const Offset(0, 2),&#10;                ),&#10;              ],&#10;            ),&#10;            child: Row(&#10;              children: [&#10;                Icon(&#10;                  widget.helper.workingStatus == &quot;online&quot; ? Icons.work : Icons.work_off,&#10;                  color: widget.helper.workingStatus == &quot;online&quot; ? Colors.green : Colors.grey,&#10;                ),&#10;                const SizedBox(width: 12),&#10;                Expanded(&#10;                  child: Text(&#10;                    widget.helper.workingStatus == &quot;online&quot;&#10;                        ? &quot;Đang sẵn sàng nhận việc&quot;&#10;                        : &quot;Tạm dừng nhận việc&quot;,&#10;                    style: TextStyle(&#10;                      fontSize: 16,&#10;                      fontWeight: FontWeight.w600,&#10;                      color: widget.helper.workingStatus == &quot;online&quot; ? Colors.green : Colors.grey,&#10;                      fontFamily: 'Quicksand',&#10;                    ),&#10;                  ),&#10;                ),&#10;                Switch(&#10;                  value: widget.helper.workingStatus == &quot;online&quot;,&#10;                  onChanged: (value) {&#10;                    updateWorkingStatus(value ? 'online' : 'offline');&#10;                    setState(() {&#10;                    });&#10;                  },&#10;                  activeColor: Colors.green,&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildDashboard() {&#10;    return Container(&#10;      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),&#10;      child: Column(&#10;        crossAxisAlignment: CrossAxisAlignment.start,&#10;        children: [&#10;          // Comment tạm thời phần thống kê&#10;          // final weeklyIncome = _calculateWeeklyIncome();&#10;          // final totalEarnings = _calculateTotalEarnings();&#10;          // final weeklyJobs = _countWeeklyJobs(helperRequests);&#10;&#10;          Text(&#10;            widget.helper.workingStatus == &quot;online&quot;&#10;                ? &quot;Danh sách công việc&quot;&#10;                : &quot;Bạn đang tạm dừng nhận việc&quot;,&#10;            style: TextStyle(&#10;              fontSize: 16,&#10;              fontWeight: FontWeight.bold,&#10;              fontFamily: 'Quicksand',&#10;              color: widget.helper.workingStatus == &quot;online&quot; ? Colors.black : Colors.grey,&#10;            ),&#10;          ),&#10;          // Hiển thị countdown cho tab chờ xác nhận&#10;          if (widget.helper.workingStatus == &quot;online&quot; &amp;&amp;&#10;              unassignedRequests.isNotEmpty &amp;&amp;&#10;              _selectedStatus == &quot;pending&quot;)&#10;            Container(&#10;              margin: const EdgeInsets.only(top: 8),&#10;              padding: const EdgeInsets.all(12),&#10;              decoration: BoxDecoration(&#10;                color: Colors.orange.withOpacity(0.1),&#10;                borderRadius: BorderRadius.circular(8),&#10;                border: Border.all(color: Colors.orange.withOpacity(0.3)),&#10;              ),&#10;              child: Row(&#10;                children: [&#10;                  Icon(&#10;                    Icons.timer,&#10;                    color: Colors.orange[700],&#10;                    size: 20,&#10;                  ),&#10;                  const SizedBox(width: 8),&#10;                  Expanded(&#10;                    child: Text(&#10;                      &quot;Danh sách sẽ được cập nhật trong: ${_remainingMinutes.toString().padLeft(2, '0')}:${_remainingSeconds.toString().padLeft(2, '0')}&quot;,&#10;                      style: TextStyle(&#10;                        color: Colors.orange[700],&#10;                        fontSize: 14,&#10;                        fontWeight: FontWeight.w600,&#10;                        fontFamily: 'Quicksand',&#10;                      ),&#10;                    ),&#10;                  ),&#10;                ],&#10;              ),&#10;            ),&#10;          const SizedBox(height: 8),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildEmptyState(String status) {&#10;    return Center(&#10;      child: Column(&#10;        mainAxisAlignment: MainAxisAlignment.center,&#10;        children: [&#10;          Icon(&#10;            _statusInfo[status]?[&quot;icon&quot;] ?? Icons.work_off_outlined,&#10;            size: 64,&#10;            color: Colors.grey[300],&#10;          ),&#10;          const SizedBox(height: 16),&#10;          Text(&#10;            &quot;Không có công việc ${_statusInfo[status]?[&quot;label&quot;] ?? &quot;&quot;}&quot;,&#10;            style: TextStyle(&#10;              fontSize: 16,&#10;              fontWeight: FontWeight.bold,&#10;              fontFamily: 'Quicksand',&#10;              color: Colors.grey[600],&#10;            ),&#10;          ),&#10;          const SizedBox(height: 8),&#10;          Text(&#10;            &quot;Bạn chưa có công việc nào ở trạng thái này&quot;,&#10;            style: TextStyle(&#10;              fontSize: 14,&#10;              color: Colors.grey[500],&#10;              fontFamily: 'Quicksand',&#10;            ),&#10;            textAlign: TextAlign.center,&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildJobCard(RequestHelper request) {&#10;    DateTime now =&#10;        DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day);&#10;    DateTime start = DateTime(&#10;        request.startTime.year, request.startTime.month, request.startTime.day);&#10;&#10;    final statusInfo = _statusInfo[request.schedules.first.status] ??&#10;        {&#10;          &quot;color&quot;: Colors.grey,&#10;          &quot;label&quot;: &quot;Không xác định&quot;,&#10;          &quot;icon&quot;: Icons.help_outline,&#10;        };&#10;&#10;    int index = request.scheduleIds.length; // Default&#10;    if ((request.schedules.first.status == &quot;inProcess&quot; ||&#10;            request.schedules.first.status == 'assigned') &amp;&amp;&#10;        start.isAtSameMomentAs(now)) {&#10;      index = now.difference(start).inDays + 1;&#10;    }&#10;&#10;    String formattedDate = '';&#10;    try {&#10;      final date = request.startTime;&#10;      formattedDate = DateFormat('dd/MM/yyyy').format(date);&#10;    } catch (e) {&#10;      // formattedDate = request.startTime;&#10;    }&#10;&#10;    return Card(&#10;      margin: const EdgeInsets.only(bottom: 16),&#10;      elevation: 2,&#10;      shape: RoundedRectangleBorder(&#10;        borderRadius: BorderRadius.circular(16),&#10;        side: BorderSide(&#10;          color: statusInfo[&quot;color&quot;].withOpacity(0.3),&#10;          width: 1,&#10;        ),&#10;      ),&#10;      child: Column(&#10;        children: [&#10;          Container(&#10;            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),&#10;            decoration: BoxDecoration(&#10;              color: statusInfo[&quot;color&quot;].withOpacity(0.1),&#10;              borderRadius: const BorderRadius.only(&#10;                topLeft: Radius.circular(16),&#10;                topRight: Radius.circular(16),&#10;              ),&#10;            ),&#10;            child: Row(&#10;              children: [&#10;                Icon(&#10;                  statusInfo[&quot;icon&quot;],&#10;                  color: statusInfo[&quot;color&quot;],&#10;                  size: 20,&#10;                ),&#10;                const SizedBox(width: 8),&#10;                Expanded(&#10;                  child: Text(&#10;                    statusInfo[&quot;label&quot;],&#10;                    style: TextStyle(&#10;                      color: statusInfo[&quot;color&quot;],&#10;                      fontWeight: FontWeight.bold,&#10;                      fontFamily: 'Quicksand',&#10;                    ),&#10;                    overflow: TextOverflow.ellipsis,&#10;                  ),&#10;                ),&#10;                Text(&#10;                  formattedDate,&#10;                  style: TextStyle(&#10;                    color: Colors.grey[600],&#10;                    fontSize: 12,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;          Padding(&#10;            padding: const EdgeInsets.all(16),&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              children: [&#10;                Row(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Container(&#10;                      padding: const EdgeInsets.all(12),&#10;                      decoration: BoxDecoration(&#10;                        color: Colors.blue[50],&#10;                        borderRadius: BorderRadius.circular(12),&#10;                      ),&#10;                      child: Icon(&#10;                        _getServiceIcon(request.service.title),&#10;                        color: Colors.blue,&#10;                        size: 24,&#10;                      ),&#10;                    ),&#10;                    const SizedBox(width: 16),&#10;                    Expanded(&#10;                      child: Column(&#10;                        crossAxisAlignment: CrossAxisAlignment.start,&#10;                        children: [&#10;                          Row(&#10;                            mainAxisAlignment: MainAxisAlignment.spaceBetween,&#10;                            crossAxisAlignment: CrossAxisAlignment.start,&#10;                            children: [&#10;                              Expanded(&#10;                                flex: 3,&#10;                                child: Column(&#10;                                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                                  children: [&#10;                                    Text(&#10;                                      request.service.title,&#10;                                      style: const TextStyle(&#10;                                        fontSize: 16,&#10;                                        fontWeight: FontWeight.bold,&#10;                                        fontFamily: 'Quicksand',&#10;                                      ),&#10;                                      overflow: TextOverflow.ellipsis,&#10;                                      maxLines: 2,&#10;                                    ),&#10;                                    const SizedBox(height: 4),&#10;                                    Text(&#10;                                      &quot;Mã đơn: #${request.id.substring(0, 8)}&quot;,&#10;                                      style: TextStyle(&#10;                                        fontSize: 14,&#10;                                        color: Colors.grey[600],&#10;                                        fontFamily: 'Quicksand',&#10;                                      ),&#10;                                    ),&#10;                                  ],&#10;                                ),&#10;                              ),&#10;                              const SizedBox(width: 8),&#10;                              Flexible(&#10;                                flex: 2,&#10;                                child: Text(&#10;                                  currencyFormat.format(request.totalCost),&#10;                                  style: TextStyle(&#10;                                    fontSize: 18,&#10;                                    fontWeight: FontWeight.bold,&#10;                                    color: Colors.red,&#10;                                    fontFamily: 'Quicksand',&#10;                                  ),&#10;                                  textAlign: TextAlign.right,&#10;                                  overflow: TextOverflow.ellipsis,&#10;                                ),&#10;                              ),&#10;                            ],&#10;                          ),&#10;                        ],&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;                const Divider(height: 24),&#10;                _buildInfoRow(&#10;                  icon: Icons.person,&#10;                  label: &quot;Khách hàng&quot;,&#10;                  value: request.customerInfo.fullName,&#10;                ),&#10;                _buildInfoRow(&#10;                  icon: Icons.phone,&#10;                  label: &quot;Điện thoại&quot;,&#10;                  value: request.customerInfo.phone,&#10;                ),&#10;                _buildInfoRow(&#10;                  icon: Icons.location_on,&#10;                  label: &quot;Địa chỉ&quot;,&#10;                  value: request.customerInfo.address,&#10;                ),&#10;                if (request.scheduleIds.length &gt; 1)&#10;                  _buildInfoRow(&#10;                      icon: Icons.access_time,&#10;                      label: &quot;Ngày thực hiện&quot;,&#10;                      value: '${formatDate(request.startTime)} - ${formatDate(request.endTime)}'),&#10;                if (request.scheduleIds.length == 1)&#10;                  _buildInfoRow(&#10;                      icon: Icons.access_time,&#10;                      label: &quot;Ngày thực hiện&quot;,&#10;                      value: '${formatDate(request.startTime)}'),&#10;                _buildInfoRow(&#10;                    icon: Icons.access_time,&#10;                    label: &quot;Thời gian&quot;,&#10;                    value: '${formatTime(request.schedules.first.startTime)} - ${formatTime(request.schedules.first.endTime)}'),&#10;                if (request.schedules.length &gt; 1)&#10;                  _buildInfoRow(&#10;                    icon: Icons.calendar_today,&#10;                    label: &quot;Số ngày&quot;,&#10;                    value: &quot;${request.scheduleIds.length} ngày&quot;,&#10;                    valueColor: Colors.blue[700],&#10;                  ),&#10;                const SizedBox(height: 16),&#10;                _buildActionButtons(request, index),&#10;              ],&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildInfoRow({&#10;    required IconData icon,&#10;    required String label,&#10;    required String value,&#10;    Color? valueColor,&#10;  }) {&#10;    return Padding(&#10;      padding: const EdgeInsets.only(bottom: 12),&#10;      child: Row(&#10;        children: [&#10;          Icon(&#10;            icon,&#10;            size: 16,&#10;            color: Colors.grey[600],&#10;          ),&#10;          const SizedBox(width: 8),&#10;          Text(&#10;            &quot;$label: &quot;,&#10;            style: TextStyle(&#10;              color: Colors.grey[600],&#10;              fontSize: 14,&#10;              fontFamily: 'Quicksand',&#10;            ),&#10;          ),&#10;          Expanded(&#10;            child: Text(&#10;              value,&#10;              style: TextStyle(&#10;                fontWeight: FontWeight.w500,&#10;                color: valueColor ?? Colors.black87,&#10;                fontSize: 16,&#10;                fontFamily: 'Quicksand',&#10;              ),&#10;              overflow: TextOverflow.ellipsis,&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildActionButtons(RequestHelper request, int index) {&#10;    switch (request.schedules.first.status) {&#10;      case &quot;pending&quot;:&#10;        if (assignedRequests.contains((req) =&gt;&#10;            req.schedules.first.status == 'inProgress' ||&#10;            req.schedules.first.status == 'assigned' ||&#10;            req.schedules.first.status == 'waitPayment')) {&#10;          return Container(&#10;            padding: const EdgeInsets.all(12),&#10;            decoration: BoxDecoration(&#10;              color: Colors.orange.withOpacity(0.1),&#10;              borderRadius: BorderRadius.circular(8),&#10;            ),&#10;            child: Row(&#10;              children: [&#10;                Icon(&#10;                  Icons.info_outline,&#10;                  color: Colors.orange,&#10;                  size: 16,&#10;                ),&#10;                const SizedBox(width: 8),&#10;                Expanded(&#10;                  child: Text(&#10;                    &quot;Bạn đã có công việc được giao, hoàn thành trước khi nhận việc mới&quot;,&#10;                    style: TextStyle(&#10;                      color: Colors.orange[700],&#10;                      fontSize: 12,&#10;                      fontFamily: 'Quicksand',&#10;                    ),&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          );&#10;        }&#10;&#10;        return Row(&#10;          children: [&#10;            // Expanded(&#10;            //   child: OutlinedButton.icon(&#10;            //     onPressed: () =&gt; _showRejectConfirmationDialog(request),&#10;            //     icon: const Icon(Icons.close, size: 16, color: Colors.red),&#10;            //     label: const Text(&#10;            //       &quot;Từ chối&quot;,&#10;            //       style: TextStyle(&#10;            //         fontFamily: 'Quicksand',&#10;            //       ),&#10;            //     ),&#10;            //     style: OutlinedButton.styleFrom(&#10;            //       foregroundColor: Colors.red,&#10;            //       side: const BorderSide(color: Colors.red),&#10;            //       padding: const EdgeInsets.symmetric(vertical: 12),&#10;            //     ),&#10;            //   ),&#10;            // ),&#10;            // const SizedBox(width: 12),&#10;            Expanded(&#10;              child: ElevatedButton.icon(&#10;                onPressed: () =&gt; _showAcceptConfirmationDialog(request),&#10;                icon: const Icon(&#10;                  Icons.check,&#10;                  size: 16,&#10;                  color: Colors.white,&#10;                ),&#10;                label: const Text(&#10;                  &quot;Nhận việc&quot;,&#10;                  style: TextStyle(&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                style: ElevatedButton.styleFrom(&#10;                  backgroundColor: Colors.green,&#10;                  foregroundColor: Colors.white,&#10;                  padding: const EdgeInsets.symmetric(vertical: 12),&#10;                ),&#10;              ),&#10;            ),&#10;          ],&#10;        );&#10;      case &quot;assigned&quot;:&#10;        return ElevatedButton.icon(&#10;          onPressed: () =&gt; processingRequest(request, index),&#10;          // icon: const Icon(Icons.play_arrow, size: 16),&#10;          label: const Text(&#10;            &quot;Bắt đầu làm việc&quot;,&#10;            style: TextStyle(&#10;              fontFamily: 'Quicksand',&#10;              fontWeight: FontWeight.bold,&#10;            ),&#10;          ),&#10;          style: ElevatedButton.styleFrom(&#10;            backgroundColor: Colors.blue,&#10;            foregroundColor: Colors.white,&#10;            minimumSize: const Size(double.infinity, 48),&#10;          ),&#10;        );&#10;      case &quot;inProgress&quot;:&#10;        return ElevatedButton.icon(&#10;          onPressed: () =&gt; finishRequest(request, index),&#10;          icon: const Icon(&#10;            Icons.check_circle,&#10;            size: 16,&#10;            color: Colors.white,&#10;          ),&#10;          label: Text(&#10;            &quot;Xác nhận hoàn thành công việc&quot;,&#10;            style: TextStyle(&#10;              fontFamily: 'Quicksand',&#10;              fontWeight: FontWeight.bold,&#10;            ),&#10;          ),&#10;          style: ElevatedButton.styleFrom(&#10;            backgroundColor: Colors.green,&#10;            foregroundColor: Colors.white,&#10;            minimumSize: const Size(double.infinity, 48),&#10;          ),&#10;        );&#10;      case &quot;waitPayment&quot;:&#10;        return ElevatedButton.icon(&#10;          onPressed: () =&gt; finishPayment(request),&#10;          icon: const Icon(Icons.payments, size: 16),&#10;          label: const Text(&#10;            &quot;Xác nhận thanh toán&quot;,&#10;            style: TextStyle(&#10;              fontFamily: 'Quicksand',&#10;              fontWeight: FontWeight.bold,&#10;            ),&#10;          ),&#10;          style: ElevatedButton.styleFrom(&#10;            backgroundColor: Colors.orange,&#10;            foregroundColor: Colors.white,&#10;            minimumSize: const Size(double.infinity, 48),&#10;          ),&#10;        );&#10;      default:&#10;        return const SizedBox.shrink();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _showRejectConfirmationDialog(RequestHelper request) async {&#10;    return showDialog&lt;void&gt;(&#10;      context: context,&#10;      barrierDismissible: false,&#10;      builder: (BuildContext context) {&#10;        return AlertDialog(&#10;          shape: RoundedRectangleBorder(&#10;            borderRadius: BorderRadius.circular(16),&#10;          ),&#10;          title: const Text(&#10;            'Xác nhận từ chối',&#10;            style: TextStyle(&#10;              fontWeight: FontWeight.bold,&#10;              fontFamily: 'Quicksand',&#10;            ),&#10;          ),&#10;          content: SingleChildScrollView(&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              mainAxisSize: MainAxisSize.min,&#10;              children: &lt;Widget&gt;[&#10;                const Text(&#10;                  'Bạn có chắc chắn muốn từ chối công việc này?',&#10;                ),&#10;                const SizedBox(height: 12),&#10;                Text(&#10;                  'Dịch vụ: ${request.service.title}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                  ),&#10;                ),&#10;                Text(&#10;                  'Khách hàng: ${request.customerInfo.fullName}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;          actions: &lt;Widget&gt;[&#10;            TextButton(&#10;              child: Text(&#10;                'Hủy',&#10;                style: TextStyle(&#10;                  color: Colors.grey[700],&#10;                ),&#10;              ),&#10;              onPressed: () {&#10;                Navigator.of(context).pop();&#10;              },&#10;            ),&#10;            ElevatedButton(&#10;              style: ElevatedButton.styleFrom(&#10;                backgroundColor: Colors.red,&#10;                foregroundColor: Colors.white,&#10;                shape: RoundedRectangleBorder(&#10;                  borderRadius: BorderRadius.circular(8),&#10;                ),&#10;              ),&#10;              child: const Text(&#10;                'Từ chối',&#10;                style: TextStyle(&#10;                  fontWeight: FontWeight.bold,&#10;                ),&#10;              ),&#10;              onPressed: () async {&#10;                // Get the navigator and scaffold messenger before async operation&#10;                final navigator = Navigator.of(context);&#10;                final scaffoldMessenger = ScaffoldMessenger.of(context);&#10;&#10;                navigator.pop();&#10;&#10;                try {&#10;                  await cancelRequest(request);&#10;&#10;                  if (mounted) {&#10;                    scaffoldMessenger.showSnackBar(&#10;                      const SnackBar(&#10;                        content: Text('Đã từ chối công việc thành công'),&#10;                        backgroundColor: Colors.red,&#10;                        duration: Duration(seconds: 2),&#10;                      ),&#10;                    );&#10;                  }&#10;                } catch (e) {&#10;                  if (mounted) {&#10;                    scaffoldMessenger.showSnackBar(&#10;                      SnackBar(&#10;                        content: Text('Lỗi khi từ chối việc: $e'),&#10;                        backgroundColor: Colors.red,&#10;                        duration: const Duration(seconds: 2),&#10;                      ),&#10;                    );&#10;                  }&#10;                }&#10;              },&#10;            ),&#10;          ],&#10;        );&#10;      },&#10;    );&#10;  }&#10;&#10;  Future&lt;void&gt; _showAcceptConfirmationDialog(RequestHelper request) async {&#10;    return showDialog&lt;void&gt;(&#10;      context: context,&#10;      barrierDismissible: false,&#10;      builder: (BuildContext context) {&#10;        return AlertDialog(&#10;          shape: RoundedRectangleBorder(&#10;            borderRadius: BorderRadius.circular(16),&#10;          ),&#10;          title: const Text(&#10;            'Xác nhận nhận việc',&#10;            style: TextStyle(&#10;              fontWeight: FontWeight.bold,&#10;              fontFamily: 'Quicksand',&#10;            ),&#10;          ),&#10;          content: SingleChildScrollView(&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              mainAxisSize: MainAxisSize.min,&#10;              children: &lt;Widget&gt;[&#10;                const Text(&#10;                  'Bạn có chắc chắn muốn nhận công việc này?',&#10;                  style: TextStyle(&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                const SizedBox(height: 12),&#10;                Text(&#10;                  'Dịch vụ: ${request.service.title}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                Text(&#10;                  'Khách hàng: ${request.customerInfo.fullName}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                Text(&#10;                  'Thời gian: ${DateFormat('dd/MM/yyyy').format(request.startTime)}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                  ),&#10;                ),&#10;                Text(&#10;                  'Địa chỉ: ${request.customerInfo.address}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;          actions: &lt;Widget&gt;[&#10;            TextButton(&#10;              child: Text(&#10;                'Hủy',&#10;                style: TextStyle(&#10;                  color: Colors.grey[700],&#10;                  fontFamily: 'Quicksand',&#10;                ),&#10;              ),&#10;              onPressed: () {&#10;                Navigator.of(context).pop();&#10;              },&#10;            ),&#10;            ElevatedButton(&#10;              style: ElevatedButton.styleFrom(&#10;                backgroundColor: Colors.green,&#10;                foregroundColor: Colors.white,&#10;                shape: RoundedRectangleBorder(&#10;                  borderRadius: BorderRadius.circular(8),&#10;                ),&#10;              ),&#10;              child: const Text(&#10;                'Nhận việc',&#10;                style: TextStyle(&#10;                  fontWeight: FontWeight.bold,&#10;                  fontFamily: 'Quicksand',&#10;                ),&#10;              ),&#10;              onPressed: () async {&#10;                // Get the navigator and scaffold messenger before async operation&#10;                final navigator = Navigator.of(context);&#10;                final scaffoldMessenger = ScaffoldMessenger.of(context);&#10;&#10;                navigator.pop();&#10;&#10;                try {&#10;                  await assignedRequest(request);&#10;&#10;                  // Check if widget is still mounted before showing snackbar&#10;                  if (mounted) {&#10;                    scaffoldMessenger.showSnackBar(&#10;                      const SnackBar(&#10;                        content: Text('Đã nhận công việc thành công',&#10;                            style: TextStyle(&#10;                              fontFamily: 'Quicksand',&#10;                            )),&#10;                        backgroundColor: Colors.green,&#10;                        duration: Duration(seconds: 2),&#10;                      ),&#10;                    );&#10;                  }&#10;                } catch (e) {&#10;                  if (mounted) {&#10;                    scaffoldMessenger.showSnackBar(&#10;                      SnackBar(&#10;                        content: Text('Lỗi khi nhận việc: $e',&#10;                            style: const TextStyle(&#10;                              fontFamily: 'Quicksand',&#10;                            )),&#10;                        backgroundColor: Colors.red,&#10;                        duration: const Duration(seconds: 2),&#10;                      ),&#10;                    );&#10;                  }&#10;                }&#10;              },&#10;            ),&#10;          ],&#10;        );&#10;      },&#10;    );&#10;  }&#10;&#10;  IconData _getServiceIcon(String serviceTitle) {&#10;    // Map service titles to appropriate icons&#10;    switch (serviceTitle.toLowerCase()) {&#10;      case 'dọn dẹp nhà cửa':&#10;      case 'dọn dẹp nhà':&#10;      case 'vệ sinh nhà':&#10;        return Icons.cleaning_services;&#10;      case 'nấu ăn':&#10;      case 'nấu ăn gia đình':&#10;        return Icons.restaurant;&#10;      case 'giặt ủi':&#10;      case 'giặt đồ':&#10;        return Icons.local_laundry_service;&#10;      case 'chăm sóc người già':&#10;      case 'chăm sóc người cao tuổi':&#10;        return Icons.elderly;&#10;      case 'chăm sóc trẻ em':&#10;      case 'trông trẻ':&#10;        return Icons.child_care;&#10;      case 'chăm sóc thú cưng':&#10;        return Icons.pets;&#10;      default:&#10;        return Icons.home_repair_service;&#10;    }&#10;  }&#10;}&#10;&#10;class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {&#10;  final TabBar _tabBar;&#10;&#10;  _SliverAppBarDelegate(this._tabBar);&#10;&#10;  @override&#10;  double get minExtent =&gt; _tabBar.preferredSize.height;&#10;&#10;  @override&#10;  double get maxExtent =&gt; _tabBar.preferredSize.height;&#10;&#10;  @override&#10;  Widget build(&#10;      BuildContext context, double shrinkOffset, bool overlapsContent) {&#10;    return Container(&#10;      color: Colors.white,&#10;      child: _tabBar,&#10;    );&#10;  }&#10;&#10;  @override&#10;  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) {&#10;    return false;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:intl/intl.dart';&#10;import 'package:homecare_helper/data/model/customer.dart';&#10;import 'package:homecare_helper/data/model/helper.dart';&#10;import 'package:homecare_helper/data/model/request.dart';&#10;import 'package:homecare_helper/data/model/request_detail.dart';&#10;import 'dart:async';&#10;&#10;import '../data/model/RequestHelper.dart';&#10;import '../data/repository/repository.dart';&#10;&#10;class HomeContent extends StatefulWidget {&#10;  final Helper helper;&#10;  final String token;&#10;  final String refreshToken;&#10;&#10;  const HomeContent({&#10;    Key? key,&#10;    required this.helper,&#10;    required this.token,&#10;    required this.refreshToken,&#10;  }) : super(key: key);&#10;&#10;  @override&#10;  State&lt;HomeContent&gt; createState() =&gt; _HomeContentState();&#10;}&#10;&#10;class _HomeContentState extends State&lt;HomeContent&gt;&#10;    with SingleTickerProviderStateMixin {&#10;  String _selectedStatus = &quot;pending&quot;;&#10;  Key pageKey = UniqueKey();&#10;  List&lt;Requests&gt; requests = [];&#10;  List&lt;Requests&gt; helperRequests = [];&#10;  List&lt;Customer&gt; customers = [];&#10;  List&lt;RequestHelper&gt; unassignedRequests = [];&#10;  List&lt;RequestHelper&gt; assignedRequests = [];&#10;  bool isLoading = true;&#10;  late TabController _tabController;&#10;  List&lt;ScrollController&gt; _scrollControllers = [];&#10;  Map&lt;String, Set&lt;int&gt;&gt; completedDaysMap = {};&#10;  final currencyFormat =&#10;      NumberFormat.currency(locale: 'vi_VN', symbol: '₫', decimalDigits: 0);&#10;&#10;  // Countdown timer variables&#10;  Timer? _countdownTimer;&#10;  int _remainingMinutes = 0;&#10;  int _remainingSeconds = 0;&#10;&#10;  final Map&lt;String, Map&lt;String, dynamic&gt;&gt; _statusInfo = {&#10;    &quot;pending&quot;: {&#10;      &quot;label&quot;: &quot;Chờ xác nhận&quot;,&#10;      &quot;color&quot;: Colors.amber,&#10;      &quot;icon&quot;: Icons.access_time,&#10;    },&#10;    &quot;assigned&quot;: {&#10;      &quot;label&quot;: &quot;Đã nhận việc&quot;,&#10;      &quot;color&quot;: Colors.cyan,&#10;      &quot;icon&quot;: Icons.assignment_turned_in,&#10;    },&#10;    &quot;inProgress&quot;: {&#10;      &quot;label&quot;: &quot;Đang tiến hành&quot;,&#10;      &quot;color&quot;: Colors.blue,&#10;      &quot;icon&quot;: Icons.hourglass_top,&#10;    },&#10;    &quot;waitPayment&quot;: {&#10;      &quot;label&quot;: &quot;Chờ thanh toán&quot;,&#10;      &quot;color&quot;: Colors.orange,&#10;      &quot;icon&quot;: Icons.payments,&#10;    },&#10;    &quot;completed&quot;: {&#10;      &quot;label&quot;: &quot;Hoàn thành&quot;,&#10;      &quot;color&quot;: Colors.green,&#10;      &quot;icon&quot;: Icons.check_circle,&#10;    },&#10;  };&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _tabController = TabController(length: 5, vsync: this);&#10;&#10;    // Khởi tạo ScrollController cho mỗi tab&#10;    _scrollControllers = List.generate(5, (index) =&gt; ScrollController());&#10;&#10;    // Thêm listener cho mỗi scroll controller&#10;    for (int i = 0; i &lt; _scrollControllers.length; i++) {&#10;      _scrollControllers[i].addListener(() =&gt; _onScroll(i));&#10;    }&#10;&#10;    _tabController.addListener(() {&#10;      setState(() {&#10;        _selectedStatus = _getStatusByTabIndex(_tabController.index);&#10;      });&#10;    });&#10;    loadData();&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _tabController.dispose();&#10;    _countdownTimer?.cancel();&#10;    for (var controller in _scrollControllers) {&#10;      controller.dispose();&#10;    }&#10;    super.dispose();&#10;  }&#10;&#10;  void _startCountdownTimer() {&#10;    _countdownTimer?.cancel();&#10;&#10;    if (unassignedRequests.isNotEmpty) {&#10;      // Tính thời gian hiện tại&#10;      DateTime now = DateTime.now();&#10;&#10;      // Tính số phút đã trôi qua trong giờ hiện tại (0-59)&#10;      int currentMinutes = now.minute;&#10;&#10;      // Tính thời gian còn lại đến phút thứ 60 (tức là giờ tiếp theo)&#10;      int remainingMinutesToNextHour = 60 - currentMinutes;&#10;&#10;      // Nếu chúng ta đang ở phút 0, thì countdown sẽ là 60 phút&#10;      if (remainingMinutesToNextHour == 60) {&#10;        _remainingMinutes = 59;&#10;        _remainingSeconds = 60 - now.second;&#10;      } else {&#10;        _remainingMinutes = remainingMinutesToNextHour - 1;&#10;        _remainingSeconds = 60 - now.second;&#10;      }&#10;&#10;      _countdownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {&#10;        if (!mounted) {&#10;          timer.cancel();&#10;          return;&#10;        }&#10;&#10;        if (_remainingSeconds &gt; 0) {&#10;          setState(() {&#10;            _remainingSeconds--;&#10;          });&#10;        } else if (_remainingMinutes &gt; 0) {&#10;          setState(() {&#10;            _remainingMinutes--;&#10;            _remainingSeconds = 59;&#10;          });&#10;        } else {&#10;          // Countdown kết thúc, refresh danh sách&#10;          refreshRequestsOnly().then((_) {&#10;            if (mounted) {&#10;              _startCountdownTimer(); // Restart countdown&#10;            }&#10;          });&#10;        }&#10;      });&#10;    }&#10;  }&#10;&#10;  void _onScroll(int tabIndex) {&#10;    ScrollController controller = _scrollControllers[tabIndex];&#10;&#10;    // Kiểm tra nếu đã kéo đến cuối danh sách&#10;    if (controller.position.pixels == controller.position.maxScrollExtent) {&#10;      // Nếu user tiếp tục kéo lên (overscroll), reload data&#10;      if (controller.position.pixels &gt; controller.position.maxScrollExtent) {&#10;        refreshRequestsOnly();&#10;      }&#10;    }&#10;  }&#10;&#10;  String _getStatusByTabIndex(int index) {&#10;    switch (index) {&#10;      case 0:&#10;        return &quot;pending&quot;;&#10;      case 1:&#10;        return &quot;assigned&quot;;&#10;      case 2:&#10;        return &quot;inProgress&quot;;&#10;      case 3:&#10;        return &quot;waitPayment&quot;;&#10;      case 4:&#10;        return &quot;completed&quot;;&#10;      default:&#10;        return &quot;pending&quot;;&#10;    }&#10;  }&#10;  &#10;  void updateWorkingStatus(String status) async {&#10;    var repository = DefaultRepository();&#10;    await repository.updateWorkingStatus(status, widget.token);&#10;    if (mounted) {&#10;      setState(() {&#10;        widget.helper.workingStatus = status;&#10;      });&#10;      if (widget.helper.workingStatus == &quot;online&quot;) {&#10;        // Nếu chuyển sang online, chỉ tải lại danh sách công việc&#10;        refreshRequestsOnly();&#10;      } else {&#10;        // Nếu chuyển sang offline, dừng timer và xóa danh sách công việc&#10;        _countdownTimer?.cancel();&#10;        setState(() {&#10;          unassignedRequests.clear();&#10;          assignedRequests.clear();&#10;        });&#10;      }&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; loadData() async {&#10;    if (!mounted) return;&#10;&#10;    setState(() {&#10;      isLoading = true;&#10;    });&#10;&#10;    try {&#10;      var repository = DefaultRepository();&#10;&#10;      var fetchedRequests = await repository.loadRequest();&#10;      var fetchedCustomers = await repository.loadCustomer();&#10;      var unassignedRequestsData =&#10;          await repository.loadUnassignedRequest(widget.token);&#10;      var assignedRequestsData =&#10;          await repository.loadAssignedRequest(widget.token);&#10;&#10;      if (mounted) {&#10;        setState(() {&#10;          requests = fetchedRequests ?? [];&#10;          customers = fetchedCustomers ?? [];&#10;          unassignedRequests = unassignedRequestsData ?? [];&#10;          assignedRequests = assignedRequestsData ?? [];&#10;          isLoading = false;&#10;        });&#10;&#10;        // Start countdown timer after loading data&#10;        _startCountdownTimer();&#10;      }&#10;    } catch (e) {&#10;      if (mounted) {&#10;        setState(() {&#10;          isLoading = false;&#10;        });&#10;&#10;        ScaffoldMessenger.of(context).showSnackBar(&#10;          SnackBar(&#10;            content: Text('Lỗi tải dữ liệu: $e'),&#10;            backgroundColor: Colors.red,&#10;          ),&#10;        );&#10;      }&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; refreshRequestsOnly() async {&#10;    try {&#10;      var repository = DefaultRepository();&#10;&#10;      var unassignedRequestsData =&#10;          await repository.loadUnassignedRequest(widget.token);&#10;      var assignedRequestsData =&#10;          await repository.loadAssignedRequest(widget.token);&#10;&#10;      if (mounted) {&#10;        setState(() {&#10;          unassignedRequests = unassignedRequestsData ?? [];&#10;          assignedRequests = assignedRequestsData ?? [];&#10;        });&#10;&#10;        // Restart countdown timer after refresh&#10;        _startCountdownTimer();&#10;      }&#10;    } catch (e) {&#10;      if (mounted) {&#10;        ScaffoldMessenger.of(context).showSnackBar(&#10;          SnackBar(&#10;            content: Text('Lỗi tải danh sách: $e'),&#10;            backgroundColor: Colors.red,&#10;          ),&#10;        );&#10;      }&#10;    }&#10;  }&#10;&#10;  int _countWeeklyJobs(List&lt;Requests&gt; requests) {&#10;    final now = DateTime.now();&#10;    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));&#10;    final endOfWeek = startOfWeek.add(const Duration(days: 6));&#10;&#10;    return requests.where((req) {&#10;      try {&#10;        final jobDate = DateTime.parse(req.startTime);&#10;        return jobDate.isAfter(startOfWeek) &amp;&amp;&#10;            jobDate.isBefore(endOfWeek.add(const Duration(days: 1)));&#10;      } catch (e) {&#10;        return false;&#10;      }&#10;    }).length;&#10;  }&#10;&#10;  int _getJobCountByStatus(String status) {&#10;    if (status == 'pending') {&#10;      return unassignedRequests.length;&#10;    } else {&#10;      return assignedRequests&#10;          .where((req) =&gt; req.schedules.first.status == status)&#10;          .length;&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; assignedRequest(RequestHelper request) async {&#10;    var repository = DefaultRepository();&#10;    await repository.remoteDataSource&#10;        .assignedRequest(request.schedules.first.id, widget.token);&#10;    if (mounted) {&#10;      setState(() {&#10;        request.schedules.first.status = 'assigned';&#10;        // Move request from unassigned to assigned list&#10;        unassignedRequests.removeWhere((r) =&gt; r.id == request.id);&#10;        assignedRequests.add(request);&#10;      });&#10;      // Switch to assigned tab&#10;      _switchToStatusTab('assigned');&#10;      await refreshRequestsOnly();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; processingRequest(RequestHelper request, int index) async {&#10;    var repository = DefaultRepository();&#10;    await repository.processingRequest(&#10;        request.schedules.first.id, widget.token);&#10;    if (mounted) {&#10;      setState(() {&#10;        request.schedules.first.status = 'inProgress';&#10;      });&#10;      // Switch to in progress tab&#10;      _switchToStatusTab('inProgress');&#10;      await refreshRequestsOnly();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; finishRequest(RequestHelper request, int index) async {&#10;    var repository = DefaultRepository();&#10;    await repository.finishRequest(request.schedules.first.id, widget.token);&#10;    if (mounted) {&#10;      setState(() {&#10;        request.schedules.first.status = 'waitPayment';&#10;      });&#10;      // Switch to wait payment tab&#10;      _switchToStatusTab('waitPayment');&#10;      await refreshRequestsOnly();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; finishPayment(RequestHelper request) async {&#10;    var repository = DefaultRepository();&#10;    await repository.remoteDataSource&#10;        .finishPayment(request.schedules.first.id, widget.token);&#10;    if (mounted) {&#10;      setState(() {&#10;        request.schedules.first.status = 'completed';&#10;      });&#10;      // Switch to done tab&#10;      _switchToStatusTab('completed');&#10;      await refreshRequestsOnly();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; cancelRequest(RequestHelper request) async {&#10;    var repository = DefaultRepository();&#10;    await repository.remoteDataSource.cancelRequest(request.id);&#10;    print(&quot;Thông tin huỷ request $request&quot;);&#10;    if (mounted) {&#10;      setState(() {&#10;        request.schedules.first.status = 'cancelled';&#10;        // Remove from current lists&#10;        unassignedRequests.removeWhere((r) =&gt; r.id == request.id);&#10;        assignedRequests.removeWhere((r) =&gt; r.id == request.id);&#10;      });&#10;      await refreshRequestsOnly();&#10;    }&#10;  }&#10;&#10;  // Add method to switch tabs based on status&#10;  void _switchToStatusTab(String status) {&#10;    final statusKeys = _statusInfo.keys.toList();&#10;    final tabIndex = statusKeys.indexOf(status);&#10;    if (tabIndex != -1 &amp;&amp; _tabController.index != tabIndex) {&#10;      _tabController.animateTo(tabIndex);&#10;    }&#10;  }&#10;&#10;  String formatDate(DateTime date) {&#10;    String day = date.day.toString().padLeft(2, '0');&#10;    String month = date.month.toString().padLeft(2, '0');&#10;    String year = date.year.toString();&#10;    return '$day/$month/$year';&#10;  }&#10;&#10;  String formatTime(DateTime date) {&#10;    String minutes = date.minute.toString().padLeft(2, '0');&#10;    String hours = date.hour.toString().padLeft(2, '0');&#10;    return '$hours:$minutes';&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    // Remove this line since we're not using helperRequests anymore&#10;    // updateHelperRequests();&#10;&#10;    // Filter requests based on selected status - this is now unused&#10;    List&lt;Requests&gt; filteredRequests =&#10;        helperRequests.where((req) =&gt; req.status == _selectedStatus).toList()&#10;          ..sort((a, b) {&#10;            DateTime dateA =&#10;                DateTime.parse(a.startTime ?? DateTime.now().toString());&#10;            DateTime dateB =&#10;                DateTime.parse(b.startTime ?? DateTime.now().toString());&#10;            return dateB.compareTo(dateA); // Sort by most recent first&#10;          });&#10;&#10;    return SafeArea(&#10;      child: isLoading&#10;          ? const Center(child: CircularProgressIndicator())&#10;          : RefreshIndicator(&#10;              onRefresh: refreshRequestsOnly,&#10;              child: NestedScrollView(&#10;                headerSliverBuilder: (context, innerBoxIsScrolled) {&#10;                  return [&#10;                    SliverToBoxAdapter(&#10;                      child: _buildHeader(),&#10;                    ),&#10;                    SliverToBoxAdapter(&#10;                      child: _buildDashboard(),&#10;                    ),&#10;                    // Chỉ hiển thị TabBar khi helper đang online&#10;                    if (widget.helper.workingStatus == &quot;online&quot;)&#10;                      SliverPersistentHeader(&#10;                        delegate: _SliverAppBarDelegate(&#10;                          TabBar(&#10;                            controller: _tabController,&#10;                            isScrollable: true,&#10;                            labelColor: Colors.green,&#10;                            unselectedLabelColor: Colors.grey.shade400,&#10;                            indicatorColor: Colors.green,&#10;                            tabs: _statusInfo.entries.map((entry) {&#10;                              return Tab(&#10;                                icon: Badge(&#10;                                  backgroundColor: Colors.red,&#10;                                  label: Text(_getJobCountByStatus(entry.key)&#10;                                      .toString()),&#10;                                  isLabelVisible:&#10;                                      _getJobCountByStatus(entry.key) &gt; 0,&#10;                                  child: Icon(entry.value[&quot;icon&quot;]),&#10;                                ),&#10;                                text: entry.value[&quot;label&quot;],&#10;                              );&#10;                            }).toList(),&#10;                          ),&#10;                        ),&#10;                        pinned: true,&#10;                      ),&#10;                  ];&#10;                },&#10;                body: widget.helper.workingStatus == &quot;online&quot;&#10;                    ? TabBarView(&#10;                        controller: _tabController,&#10;                        children: _statusInfo.keys.map((status) {&#10;                          final tabIndex =&#10;                              _statusInfo.keys.toList().indexOf(status);&#10;                          final statusRequests = status == 'pending'&#10;                              ? unassignedRequests&#10;                              : assignedRequests&#10;                                  .where((req) =&gt;&#10;                                      req.schedules.first.status == status)&#10;                                  .toList()&#10;                            ..sort((a, b) {&#10;                              DateTime dateA = a.startTime;&#10;                              DateTime dateB = b.startTime;&#10;                              return dateB.compareTo(dateA);&#10;                            });&#10;&#10;                          if (statusRequests.isEmpty) {&#10;                            return RefreshIndicator(&#10;                              onRefresh: () async {&#10;                                await refreshRequestsOnly();&#10;                                // Auto refresh every 30 seconds for pending tab&#10;                                if (status == 'pending') {&#10;                                  _startCountdownTimer();&#10;                                }&#10;                              },&#10;                              child: SingleChildScrollView(&#10;                                physics: const AlwaysScrollableScrollPhysics(),&#10;                                child: SizedBox(&#10;                                  height:&#10;                                      MediaQuery.of(context).size.height * 0.6,&#10;                                  child: _buildEmptyState(status),&#10;                                ),&#10;                              ),&#10;                            );&#10;                          }&#10;&#10;                          return RefreshIndicator(&#10;                            onRefresh: () async {&#10;                              await refreshRequestsOnly();&#10;                              // Auto refresh every 30 seconds for pending tab&#10;                              if (status == 'pending') {&#10;                                _startCountdownTimer();&#10;                              }&#10;                            },&#10;                            child: NotificationListener&lt;ScrollNotification&gt;(&#10;                              onNotification: (ScrollNotification scrollInfo) {&#10;                                // Kiểm tra nếu đã scroll đến cuối và user vẫn tiếp tục kéo&#10;                                if (scrollInfo is OverscrollNotification &amp;&amp;&#10;                                    scrollInfo.overscroll &gt; 0 &amp;&amp;&#10;                                    scrollInfo.metrics.pixels &gt;=&#10;                                        scrollInfo.metrics.maxScrollExtent) {&#10;                                  // Kéo lên ở cuối danh sách - reload&#10;                                  refreshRequestsOnly();&#10;                                  return true;&#10;                                }&#10;                                return false;&#10;                              },&#10;                              child: ListView.builder(&#10;                                controller: tabIndex &lt; _scrollControllers.length&#10;                                    ? _scrollControllers[tabIndex]&#10;                                    : null,&#10;                                physics: const AlwaysScrollableScrollPhysics(),&#10;                                padding: const EdgeInsets.symmetric(&#10;                                    horizontal: 16, vertical: 8),&#10;                                itemCount: statusRequests.length,&#10;                                itemBuilder: (context, index) {&#10;                                  return _buildJobCard(statusRequests[index]);&#10;                                },&#10;                              ),&#10;                            ),&#10;                          );&#10;                        }).toList(),&#10;                      )&#10;                    : RefreshIndicator(&#10;                        onRefresh: refreshRequestsOnly,&#10;                        child: SingleChildScrollView(&#10;                          physics: const AlwaysScrollableScrollPhysics(),&#10;                          child: SizedBox(&#10;                            height: MediaQuery.of(context).size.height * 0.6,&#10;                            child: _buildInactiveState(),&#10;                          ),&#10;                        ),&#10;                      ),&#10;              ),&#10;            ),&#10;    );&#10;  }&#10;&#10;  // Thêm widget cho trạng thái inactive&#10;  Widget _buildInactiveState() {&#10;    return Center(&#10;      child: Column(&#10;        mainAxisAlignment: MainAxisAlignment.center,&#10;        children: [&#10;          Icon(&#10;            Icons.work_off_outlined,&#10;            size: 64,&#10;            color: Colors.grey[300],&#10;          ),&#10;          const SizedBox(height: 16),&#10;          Text(&#10;            &quot;Bạn đang tạm dừng nhận việc&quot;,&#10;            style: TextStyle(&#10;              fontSize: 18,&#10;              fontWeight: FontWeight.bold,&#10;              fontFamily: 'Quicksand',&#10;              color: Colors.grey[600],&#10;            ),&#10;          ),&#10;          const SizedBox(height: 8),&#10;          Text(&#10;            &quot;Bật trạng thái 'Sẵn sàng nhận việc' để xem danh sách công việc&quot;,&#10;            style: TextStyle(&#10;              fontSize: 14,&#10;              color: Colors.grey[500],&#10;              fontFamily: 'Quicksand',&#10;            ),&#10;            textAlign: TextAlign.center,&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildHeader() {&#10;    return Container(&#10;      padding: const EdgeInsets.all(16),&#10;      decoration: BoxDecoration(&#10;        color: Colors.green.withOpacity(0.05),&#10;        borderRadius: const BorderRadius.only(&#10;          bottomLeft: Radius.circular(24),&#10;          bottomRight: Radius.circular(24),&#10;        ),&#10;      ),&#10;      child: Column(&#10;        children: [&#10;          Row(&#10;            children: [&#10;              Container(&#10;                decoration: BoxDecoration(&#10;                  border: Border.all(color: Colors.white, width: 2),&#10;                  borderRadius: BorderRadius.circular(50),&#10;                ),&#10;                child: CircleAvatar(&#10;                  radius: 24,&#10;                  backgroundImage: widget.helper.avatar!.isEmpty&#10;                      ? NetworkImage('${widget.helper.avatar}')&#10;                      : null,&#10;                  child: widget.helper.avatar!.isEmpty&#10;                      ? Icon(Icons.person, color: Colors.green)&#10;                      : null,&#10;                ),&#10;              ),&#10;              const SizedBox(width: 12),&#10;              Expanded(&#10;                flex: 3,&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      &quot;Xin chào,&quot;,&#10;                      style: TextStyle(&#10;                        fontSize: 14,&#10;                        color: Colors.grey[600],&#10;                        fontWeight: FontWeight.w500,&#10;                        fontFamily: 'Quicksand',&#10;                      ),&#10;                    ),&#10;                    Text(&#10;                      '${widget.helper.fullName}',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                        color: Colors.green,&#10;                        fontFamily: 'Quicksand',&#10;                      ),&#10;                      overflow: TextOverflow.ellipsis,&#10;                      maxLines: 1,&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;              const SizedBox(width: 8),&#10;              Flexible(&#10;                flex: 2,&#10;                child: Container(&#10;                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),&#10;                  decoration: BoxDecoration(&#10;                    color: widget.helper.workingStatus == &quot;online&quot;&#10;                        ? Colors.green.withOpacity(0.15)&#10;                        : Colors.grey.withOpacity(0.15),&#10;                    borderRadius: BorderRadius.circular(20),&#10;                  ),&#10;                  child: Row(&#10;                    mainAxisSize: MainAxisSize.min,&#10;                    children: [&#10;                      Container(&#10;                        width: 8,&#10;                        height: 8,&#10;                        decoration: BoxDecoration(&#10;                          color: widget.helper.workingStatus == &quot;online&quot; ? Colors.green : Colors.grey,&#10;                          shape: BoxShape.circle,&#10;                        ),&#10;                      ),&#10;                      const SizedBox(width: 4),&#10;                      Flexible(&#10;                        child: Text(&#10;                          widget.helper.workingStatus == &quot;online&quot; ? &quot;Trực tuyến&quot; : &quot;Ngoại tuyến&quot;,&#10;                          style: TextStyle(&#10;                            color: widget.helper.workingStatus == &quot;online&quot; ? Colors.green : Colors.grey,&#10;                            fontWeight: FontWeight.w600,&#10;                            fontSize: 12,&#10;                            fontFamily: 'Quicksand',&#10;                          ),&#10;                          overflow: TextOverflow.ellipsis,&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;          const SizedBox(height: 16),&#10;          // Thêm toggle switch&#10;          Container(&#10;            padding: const EdgeInsets.all(16),&#10;            decoration: BoxDecoration(&#10;              color: Colors.white,&#10;              borderRadius: BorderRadius.circular(12),&#10;              boxShadow: [&#10;                BoxShadow(&#10;                  color: Colors.grey.withOpacity(0.1),&#10;                  blurRadius: 8,&#10;                  offset: const Offset(0, 2),&#10;                ),&#10;              ],&#10;            ),&#10;            child: Row(&#10;              children: [&#10;                Icon(&#10;                  widget.helper.workingStatus == &quot;online&quot; ? Icons.work : Icons.work_off,&#10;                  color: widget.helper.workingStatus == &quot;online&quot; ? Colors.green : Colors.grey,&#10;                ),&#10;                const SizedBox(width: 12),&#10;                Expanded(&#10;                  child: Text(&#10;                    widget.helper.workingStatus == &quot;online&quot;&#10;                        ? &quot;Đang sẵn sàng nhận việc&quot;&#10;                        : &quot;Tạm dừng nhận việc&quot;,&#10;                    style: TextStyle(&#10;                      fontSize: 16,&#10;                      fontWeight: FontWeight.w600,&#10;                      color: widget.helper.workingStatus == &quot;online&quot; ? Colors.green : Colors.grey,&#10;                      fontFamily: 'Quicksand',&#10;                    ),&#10;                  ),&#10;                ),&#10;                Switch(&#10;                  value: widget.helper.workingStatus == &quot;online&quot;,&#10;                  onChanged: (value) {&#10;                    updateWorkingStatus(value ? 'online' : 'offline');&#10;                    setState(() {&#10;                    });&#10;                  },&#10;                  activeColor: Colors.green,&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildDashboard() {&#10;    return Container(&#10;      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),&#10;      child: Column(&#10;        crossAxisAlignment: CrossAxisAlignment.start,&#10;        children: [&#10;          // Comment tạm thời phần thống kê&#10;          // final weeklyIncome = _calculateWeeklyIncome();&#10;          // final totalEarnings = _calculateTotalEarnings();&#10;          // final weeklyJobs = _countWeeklyJobs(helperRequests);&#10;&#10;          Text(&#10;            widget.helper.workingStatus == &quot;online&quot;&#10;                ? &quot;Danh sách công việc&quot;&#10;                : &quot;Bạn đang tạm dừng nhận việc&quot;,&#10;            style: TextStyle(&#10;              fontSize: 16,&#10;              fontWeight: FontWeight.bold,&#10;              fontFamily: 'Quicksand',&#10;              color: widget.helper.workingStatus == &quot;online&quot; ? Colors.black : Colors.grey,&#10;            ),&#10;          ),&#10;          // Hiển thị countdown cho tab chờ xác nhận&#10;          if (widget.helper.workingStatus == &quot;online&quot; &amp;&amp;&#10;              unassignedRequests.isNotEmpty &amp;&amp;&#10;              _selectedStatus == &quot;pending&quot;)&#10;            Container(&#10;              margin: const EdgeInsets.only(top: 8),&#10;              padding: const EdgeInsets.all(12),&#10;              decoration: BoxDecoration(&#10;                color: Colors.orange.withOpacity(0.1),&#10;                borderRadius: BorderRadius.circular(8),&#10;                border: Border.all(color: Colors.orange.withOpacity(0.3)),&#10;              ),&#10;              child: Row(&#10;                children: [&#10;                  Icon(&#10;                    Icons.timer,&#10;                    color: Colors.orange[700],&#10;                    size: 20,&#10;                  ),&#10;                  const SizedBox(width: 8),&#10;                  Expanded(&#10;                    child: Text(&#10;                      &quot;Danh sách sẽ được cập nhật trong: ${_remainingMinutes.toString().padLeft(2, '0')}:${_remainingSeconds.toString().padLeft(2, '0')}&quot;,&#10;                      style: TextStyle(&#10;                        color: Colors.orange[700],&#10;                        fontSize: 14,&#10;                        fontWeight: FontWeight.w600,&#10;                        fontFamily: 'Quicksand',&#10;                      ),&#10;                    ),&#10;                  ),&#10;                ],&#10;              ),&#10;            ),&#10;          const SizedBox(height: 8),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildEmptyState(String status) {&#10;    return Center(&#10;      child: Column(&#10;        mainAxisAlignment: MainAxisAlignment.center,&#10;        children: [&#10;          Icon(&#10;            _statusInfo[status]?[&quot;icon&quot;] ?? Icons.work_off_outlined,&#10;            size: 64,&#10;            color: Colors.grey[300],&#10;          ),&#10;          const SizedBox(height: 16),&#10;          Text(&#10;            &quot;Không có công việc ${_statusInfo[status]?[&quot;label&quot;] ?? &quot;&quot;}&quot;,&#10;            style: TextStyle(&#10;              fontSize: 16,&#10;              fontWeight: FontWeight.bold,&#10;              fontFamily: 'Quicksand',&#10;              color: Colors.grey[600],&#10;            ),&#10;          ),&#10;          const SizedBox(height: 8),&#10;          Text(&#10;            &quot;Bạn chưa có công việc nào ở trạng thái này&quot;,&#10;            style: TextStyle(&#10;              fontSize: 14,&#10;              color: Colors.grey[500],&#10;              fontFamily: 'Quicksand',&#10;            ),&#10;            textAlign: TextAlign.center,&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildJobCard(RequestHelper request) {&#10;    DateTime now =&#10;        DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day);&#10;    DateTime start = DateTime(&#10;        request.startTime.year, request.startTime.month, request.startTime.day);&#10;&#10;    final statusInfo = _statusInfo[request.schedules.first.status] ??&#10;        {&#10;          &quot;color&quot;: Colors.grey,&#10;          &quot;label&quot;: &quot;Không xác định&quot;,&#10;          &quot;icon&quot;: Icons.help_outline,&#10;        };&#10;&#10;    int index = request.scheduleIds.length; // Default&#10;    if ((request.schedules.first.status == &quot;inProcess&quot; ||&#10;            request.schedules.first.status == 'assigned') &amp;&amp;&#10;        start.isAtSameMomentAs(now)) {&#10;      index = now.difference(start).inDays + 1;&#10;    }&#10;&#10;    String formattedDate = '';&#10;    try {&#10;      final date = request.startTime;&#10;      formattedDate = DateFormat('dd/MM/yyyy').format(date);&#10;    } catch (e) {&#10;      // formattedDate = request.startTime;&#10;    }&#10;&#10;    return Card(&#10;      margin: const EdgeInsets.only(bottom: 16),&#10;      elevation: 2,&#10;      shape: RoundedRectangleBorder(&#10;        borderRadius: BorderRadius.circular(16),&#10;        side: BorderSide(&#10;          color: statusInfo[&quot;color&quot;].withOpacity(0.3),&#10;          width: 1,&#10;        ),&#10;      ),&#10;      child: Column(&#10;        children: [&#10;          Container(&#10;            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),&#10;            decoration: BoxDecoration(&#10;              color: statusInfo[&quot;color&quot;].withOpacity(0.1),&#10;              borderRadius: const BorderRadius.only(&#10;                topLeft: Radius.circular(16),&#10;                topRight: Radius.circular(16),&#10;              ),&#10;            ),&#10;            child: Row(&#10;              children: [&#10;                Icon(&#10;                  statusInfo[&quot;icon&quot;],&#10;                  color: statusInfo[&quot;color&quot;],&#10;                  size: 20,&#10;                ),&#10;                const SizedBox(width: 8),&#10;                Expanded(&#10;                  child: Text(&#10;                    statusInfo[&quot;label&quot;],&#10;                    style: TextStyle(&#10;                      color: statusInfo[&quot;color&quot;],&#10;                      fontWeight: FontWeight.bold,&#10;                      fontFamily: 'Quicksand',&#10;                    ),&#10;                    overflow: TextOverflow.ellipsis,&#10;                  ),&#10;                ),&#10;                Text(&#10;                  formattedDate,&#10;                  style: TextStyle(&#10;                    color: Colors.grey[600],&#10;                    fontSize: 12,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;          Padding(&#10;            padding: const EdgeInsets.all(16),&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              children: [&#10;                Row(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Container(&#10;                      padding: const EdgeInsets.all(12),&#10;                      decoration: BoxDecoration(&#10;                        color: Colors.blue[50],&#10;                        borderRadius: BorderRadius.circular(12),&#10;                      ),&#10;                      child: Icon(&#10;                        _getServiceIcon(request.service.title),&#10;                        color: Colors.blue,&#10;                        size: 24,&#10;                      ),&#10;                    ),&#10;                    const SizedBox(width: 16),&#10;                    Expanded(&#10;                      child: Column(&#10;                        crossAxisAlignment: CrossAxisAlignment.start,&#10;                        children: [&#10;                          Row(&#10;                            mainAxisAlignment: MainAxisAlignment.spaceBetween,&#10;                            crossAxisAlignment: CrossAxisAlignment.start,&#10;                            children: [&#10;                              Expanded(&#10;                                flex: 3,&#10;                                child: Column(&#10;                                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                                  children: [&#10;                                    Text(&#10;                                      request.service.title,&#10;                                      style: const TextStyle(&#10;                                        fontSize: 16,&#10;                                        fontWeight: FontWeight.bold,&#10;                                        fontFamily: 'Quicksand',&#10;                                      ),&#10;                                      overflow: TextOverflow.ellipsis,&#10;                                      maxLines: 2,&#10;                                    ),&#10;                                    const SizedBox(height: 4),&#10;                                    Text(&#10;                                      &quot;Mã đơn: #${request.id.substring(0, 8)}&quot;,&#10;                                      style: TextStyle(&#10;                                        fontSize: 14,&#10;                                        color: Colors.grey[600],&#10;                                        fontFamily: 'Quicksand',&#10;                                      ),&#10;                                    ),&#10;                                  ],&#10;                                ),&#10;                              ),&#10;                              const SizedBox(width: 8),&#10;                              Flexible(&#10;                                flex: 2,&#10;                                child: Text(&#10;                                  currencyFormat.format(request.totalCost),&#10;                                  style: TextStyle(&#10;                                    fontSize: 18,&#10;                                    fontWeight: FontWeight.bold,&#10;                                    color: Colors.red,&#10;                                    fontFamily: 'Quicksand',&#10;                                  ),&#10;                                  textAlign: TextAlign.right,&#10;                                  overflow: TextOverflow.ellipsis,&#10;                                ),&#10;                              ),&#10;                            ],&#10;                          ),&#10;                        ],&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;                const Divider(height: 24),&#10;                _buildInfoRow(&#10;                  icon: Icons.person,&#10;                  label: &quot;Khách hàng&quot;,&#10;                  value: request.customerInfo.fullName,&#10;                ),&#10;                _buildInfoRow(&#10;                  icon: Icons.phone,&#10;                  label: &quot;Điện thoại&quot;,&#10;                  value: request.customerInfo.phone,&#10;                ),&#10;                _buildInfoRow(&#10;                  icon: Icons.location_on,&#10;                  label: &quot;Địa chỉ&quot;,&#10;                  value: request.customerInfo.address,&#10;                ),&#10;                if (request.scheduleIds.length &gt; 1)&#10;                  _buildInfoRow(&#10;                      icon: Icons.access_time,&#10;                      label: &quot;Ngày thực hiện&quot;,&#10;                      value: '${formatDate(request.startTime)} - ${formatDate(request.endTime)}'),&#10;                if (request.scheduleIds.length == 1)&#10;                  _buildInfoRow(&#10;                      icon: Icons.access_time,&#10;                      label: &quot;Ngày thực hiện&quot;,&#10;                      value: '${formatDate(request.startTime)}'),&#10;                _buildInfoRow(&#10;                    icon: Icons.access_time,&#10;                    label: &quot;Thời gian&quot;,&#10;                    value: '${formatTime(request.schedules.first.startTime)} - ${formatTime(request.schedules.first.endTime)}'),&#10;                if (request.schedules.length &gt; 1)&#10;                  _buildInfoRow(&#10;                    icon: Icons.calendar_today,&#10;                    label: &quot;Số ngày&quot;,&#10;                    value: &quot;${request.scheduleIds.length} ngày&quot;,&#10;                    valueColor: Colors.blue[700],&#10;                  ),&#10;                const SizedBox(height: 16),&#10;                _buildActionButtons(request, index),&#10;              ],&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildInfoRow({&#10;    required IconData icon,&#10;    required String label,&#10;    required String value,&#10;    Color? valueColor,&#10;  }) {&#10;    return Padding(&#10;      padding: const EdgeInsets.only(bottom: 12),&#10;      child: Row(&#10;        children: [&#10;          Icon(&#10;            icon,&#10;            size: 16,&#10;            color: Colors.grey[600],&#10;          ),&#10;          const SizedBox(width: 8),&#10;          Text(&#10;            &quot;$label: &quot;,&#10;            style: TextStyle(&#10;              color: Colors.grey[600],&#10;              fontSize: 14,&#10;              fontFamily: 'Quicksand',&#10;            ),&#10;          ),&#10;          Expanded(&#10;            child: Text(&#10;              value,&#10;              style: TextStyle(&#10;                fontWeight: FontWeight.w500,&#10;                color: valueColor ?? Colors.black87,&#10;                fontSize: 16,&#10;                fontFamily: 'Quicksand',&#10;              ),&#10;              overflow: TextOverflow.ellipsis,&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildActionButtons(RequestHelper request, int index) {&#10;    switch (request.schedules.first.status) {&#10;      case &quot;pending&quot;:&#10;        if (assignedRequests.contains((req) =&gt;&#10;            req.schedules.first.status == 'inProgress' ||&#10;            req.schedules.first.status == 'assigned' ||&#10;            req.schedules.first.status == 'waitPayment')) {&#10;          return Container(&#10;            padding: const EdgeInsets.all(12),&#10;            decoration: BoxDecoration(&#10;              color: Colors.orange.withOpacity(0.1),&#10;              borderRadius: BorderRadius.circular(8),&#10;            ),&#10;            child: Row(&#10;              children: [&#10;                Icon(&#10;                  Icons.info_outline,&#10;                  color: Colors.orange,&#10;                  size: 16,&#10;                ),&#10;                const SizedBox(width: 8),&#10;                Expanded(&#10;                  child: Text(&#10;                    &quot;Bạn đã có công việc được giao, hoàn thành trước khi nhận việc mới&quot;,&#10;                    style: TextStyle(&#10;                      color: Colors.orange[700],&#10;                      fontSize: 12,&#10;                      fontFamily: 'Quicksand',&#10;                    ),&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          );&#10;        }&#10;&#10;        return Row(&#10;          children: [&#10;            // Expanded(&#10;            //   child: OutlinedButton.icon(&#10;            //     onPressed: () =&gt; _showRejectConfirmationDialog(request),&#10;            //     icon: const Icon(Icons.close, size: 16, color: Colors.red),&#10;            //     label: const Text(&#10;            //       &quot;Từ chối&quot;,&#10;            //       style: TextStyle(&#10;            //         fontFamily: 'Quicksand',&#10;            //       ),&#10;            //     ),&#10;            //     style: OutlinedButton.styleFrom(&#10;            //       foregroundColor: Colors.red,&#10;            //       side: const BorderSide(color: Colors.red),&#10;            //       padding: const EdgeInsets.symmetric(vertical: 12),&#10;            //     ),&#10;            //   ),&#10;            // ),&#10;            // const SizedBox(width: 12),&#10;            Expanded(&#10;              child: ElevatedButton.icon(&#10;                onPressed: () =&gt; _showAcceptConfirmationDialog(request),&#10;                icon: const Icon(&#10;                  Icons.check,&#10;                  size: 16,&#10;                  color: Colors.white,&#10;                ),&#10;                label: const Text(&#10;                  &quot;Nhận việc&quot;,&#10;                  style: TextStyle(&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                style: ElevatedButton.styleFrom(&#10;                  backgroundColor: Colors.green,&#10;                  foregroundColor: Colors.white,&#10;                  padding: const EdgeInsets.symmetric(vertical: 12),&#10;                ),&#10;              ),&#10;            ),&#10;          ],&#10;        );&#10;      case &quot;assigned&quot;:&#10;        return ElevatedButton.icon(&#10;          onPressed: () =&gt; processingRequest(request, index),&#10;          // icon: const Icon(Icons.play_arrow, size: 16),&#10;          label: const Text(&#10;            &quot;Bắt đầu làm việc&quot;,&#10;            style: TextStyle(&#10;              fontFamily: 'Quicksand',&#10;              fontWeight: FontWeight.bold,&#10;            ),&#10;          ),&#10;          style: ElevatedButton.styleFrom(&#10;            backgroundColor: Colors.blue,&#10;            foregroundColor: Colors.white,&#10;            minimumSize: const Size(double.infinity, 48),&#10;          ),&#10;        );&#10;      case &quot;inProgress&quot;:&#10;        return ElevatedButton.icon(&#10;          onPressed: () =&gt; finishRequest(request, index),&#10;          icon: const Icon(&#10;            Icons.check_circle,&#10;            size: 16,&#10;            color: Colors.white,&#10;          ),&#10;          label: Text(&#10;            &quot;Xác nhận hoàn thành công việc&quot;,&#10;            style: TextStyle(&#10;              fontFamily: 'Quicksand',&#10;              fontWeight: FontWeight.bold,&#10;            ),&#10;          ),&#10;          style: ElevatedButton.styleFrom(&#10;            backgroundColor: Colors.green,&#10;            foregroundColor: Colors.white,&#10;            minimumSize: const Size(double.infinity, 48),&#10;          ),&#10;        );&#10;      case &quot;waitPayment&quot;:&#10;        return const SizedBox.shrink(); // Remove the &quot;Xác nhận thanh toán&quot; button&#10;      default:&#10;        return const SizedBox.shrink();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _showRejectConfirmationDialog(RequestHelper request) async {&#10;    return showDialog&lt;void&gt;(&#10;      context: context,&#10;      barrierDismissible: false,&#10;      builder: (BuildContext context) {&#10;        return AlertDialog(&#10;          shape: RoundedRectangleBorder(&#10;            borderRadius: BorderRadius.circular(16),&#10;          ),&#10;          title: const Text(&#10;            'Xác nhận từ chối',&#10;            style: TextStyle(&#10;              fontWeight: FontWeight.bold,&#10;              fontFamily: 'Quicksand',&#10;            ),&#10;          ),&#10;          content: SingleChildScrollView(&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              mainAxisSize: MainAxisSize.min,&#10;              children: &lt;Widget&gt;[&#10;                const Text(&#10;                  'Bạn có chắc chắn muốn từ chối công việc này?',&#10;                ),&#10;                const SizedBox(height: 12),&#10;                Text(&#10;                  'Dịch vụ: ${request.service.title}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                  ),&#10;                ),&#10;                Text(&#10;                  'Khách hàng: ${request.customerInfo.fullName}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;          actions: &lt;Widget&gt;[&#10;            TextButton(&#10;              child: Text(&#10;                'Hủy',&#10;                style: TextStyle(&#10;                  color: Colors.grey[700],&#10;                ),&#10;              ),&#10;              onPressed: () {&#10;                Navigator.of(context).pop();&#10;              },&#10;            ),&#10;            ElevatedButton(&#10;              style: ElevatedButton.styleFrom(&#10;                backgroundColor: Colors.red,&#10;                foregroundColor: Colors.white,&#10;                shape: RoundedRectangleBorder(&#10;                  borderRadius: BorderRadius.circular(8),&#10;                ),&#10;              ),&#10;              child: const Text(&#10;                'Từ chối',&#10;                style: TextStyle(&#10;                  fontWeight: FontWeight.bold,&#10;                ),&#10;              ),&#10;              onPressed: () async {&#10;                // Get the navigator and scaffold messenger before async operation&#10;                final navigator = Navigator.of(context);&#10;                final scaffoldMessenger = ScaffoldMessenger.of(context);&#10;&#10;                navigator.pop();&#10;&#10;                try {&#10;                  await cancelRequest(request);&#10;&#10;                  if (mounted) {&#10;                    scaffoldMessenger.showSnackBar(&#10;                      const SnackBar(&#10;                        content: Text('Đã từ chối công việc thành công'),&#10;                        backgroundColor: Colors.red,&#10;                        duration: Duration(seconds: 2),&#10;                      ),&#10;                    );&#10;                  }&#10;                } catch (e) {&#10;                  if (mounted) {&#10;                    scaffoldMessenger.showSnackBar(&#10;                      SnackBar(&#10;                        content: Text('Lỗi khi từ chối việc: $e'),&#10;                        backgroundColor: Colors.red,&#10;                        duration: const Duration(seconds: 2),&#10;                      ),&#10;                    );&#10;                  }&#10;                }&#10;              },&#10;            ),&#10;          ],&#10;        );&#10;      },&#10;    );&#10;  }&#10;&#10;  Future&lt;void&gt; _showAcceptConfirmationDialog(RequestHelper request) async {&#10;    return showDialog&lt;void&gt;(&#10;      context: context,&#10;      barrierDismissible: false,&#10;      builder: (BuildContext context) {&#10;        return AlertDialog(&#10;          shape: RoundedRectangleBorder(&#10;            borderRadius: BorderRadius.circular(16),&#10;          ),&#10;          title: const Text(&#10;            'Xác nhận nhận việc',&#10;            style: TextStyle(&#10;              fontWeight: FontWeight.bold,&#10;              fontFamily: 'Quicksand',&#10;            ),&#10;          ),&#10;          content: SingleChildScrollView(&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              mainAxisSize: MainAxisSize.min,&#10;              children: &lt;Widget&gt;[&#10;                const Text(&#10;                  'Bạn có chắc chắn muốn nhận công việc này?',&#10;                  style: TextStyle(&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                const SizedBox(height: 12),&#10;                Text(&#10;                  'Dịch vụ: ${request.service.title}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                Text(&#10;                  'Khách hàng: ${request.customerInfo.fullName}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                Text(&#10;                  'Thời gian: ${DateFormat('dd/MM/yyyy').format(request.startTime)}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                  ),&#10;                ),&#10;                Text(&#10;                  'Địa chỉ: ${request.customerInfo.address}',&#10;                  style: const TextStyle(&#10;                    fontWeight: FontWeight.w500,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;          actions: &lt;Widget&gt;[&#10;            TextButton(&#10;              child: Text(&#10;                'Hủy',&#10;                style: TextStyle(&#10;                  color: Colors.grey[700],&#10;                  fontFamily: 'Quicksand',&#10;                ),&#10;              ),&#10;              onPressed: () {&#10;                Navigator.of(context).pop();&#10;              },&#10;            ),&#10;            ElevatedButton(&#10;              style: ElevatedButton.styleFrom(&#10;                backgroundColor: Colors.green,&#10;                foregroundColor: Colors.white,&#10;                shape: RoundedRectangleBorder(&#10;                  borderRadius: BorderRadius.circular(8),&#10;                ),&#10;              ),&#10;              child: const Text(&#10;                'Nhận việc',&#10;                style: TextStyle(&#10;                  fontWeight: FontWeight.bold,&#10;                  fontFamily: 'Quicksand',&#10;                ),&#10;              ),&#10;              onPressed: () async {&#10;                // Get the navigator and scaffold messenger before async operation&#10;                final navigator = Navigator.of(context);&#10;                final scaffoldMessenger = ScaffoldMessenger.of(context);&#10;&#10;                navigator.pop();&#10;&#10;                try {&#10;                  await assignedRequest(request);&#10;&#10;                  // Check if widget is still mounted before showing snackbar&#10;                  if (mounted) {&#10;                    scaffoldMessenger.showSnackBar(&#10;                      const SnackBar(&#10;                        content: Text('Đã nhận công việc thành công',&#10;                            style: TextStyle(&#10;                              fontFamily: 'Quicksand',&#10;                            )),&#10;                        backgroundColor: Colors.green,&#10;                        duration: Duration(seconds: 2),&#10;                      ),&#10;                    );&#10;                  }&#10;                } catch (e) {&#10;                  if (mounted) {&#10;                    scaffoldMessenger.showSnackBar(&#10;                      SnackBar(&#10;                        content: Text('Lỗi khi nhận việc: $e',&#10;                            style: const TextStyle(&#10;                              fontFamily: 'Quicksand',&#10;                            )),&#10;                        backgroundColor: Colors.red,&#10;                        duration: const Duration(seconds: 2),&#10;                      ),&#10;                    );&#10;                  }&#10;                }&#10;              },&#10;            ),&#10;          ],&#10;        );&#10;      },&#10;    );&#10;  }&#10;&#10;  IconData _getServiceIcon(String serviceTitle) {&#10;    // Map service titles to appropriate icons&#10;    switch (serviceTitle.toLowerCase()) {&#10;      case 'dọn dẹp nhà cửa':&#10;      case 'dọn dẹp nhà':&#10;      case 'vệ sinh nhà':&#10;        return Icons.cleaning_services;&#10;      case 'nấu ăn':&#10;      case 'nấu ăn gia đình':&#10;        return Icons.restaurant;&#10;      case 'giặt ủi':&#10;      case 'giặt đồ':&#10;        return Icons.local_laundry_service;&#10;      case 'chăm sóc người già':&#10;      case 'chăm sóc người cao tuổi':&#10;        return Icons.elderly;&#10;      case 'chăm sóc trẻ em':&#10;      case 'trông trẻ':&#10;        return Icons.child_care;&#10;      case 'chăm sóc thú cưng':&#10;        return Icons.pets;&#10;      default:&#10;        return Icons.home_repair_service;&#10;    }&#10;  }&#10;}&#10;&#10;class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {&#10;  final TabBar _tabBar;&#10;&#10;  _SliverAppBarDelegate(this._tabBar);&#10;&#10;  @override&#10;  double get minExtent =&gt; _tabBar.preferredSize.height;&#10;&#10;  @override&#10;  double get maxExtent =&gt; _tabBar.preferredSize.height;&#10;&#10;  @override&#10;  Widget build(&#10;      BuildContext context, double shrinkOffset, bool overlapsContent) {&#10;    return Container(&#10;      color: Colors.white,&#10;      child: _tabBar,&#10;    );&#10;  }&#10;&#10;  @override&#10;  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) {&#10;    return false;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/services/firebase_messaging_service.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/services/firebase_messaging_service.dart" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>