<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/android/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/android/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;kotlin-android&quot;)&#10;    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.&#10;    id(&quot;dev.flutter.flutter-gradle-plugin&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.homecare_helper&quot;&#10;    compileSdk = flutter.compileSdkVersion&#10;    ndkVersion = flutter.ndkVersion&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = JavaVersion.VERSION_11.toString()&#10;    }&#10;&#10;    defaultConfig {&#10;        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).&#10;        applicationId = &quot;com.example.homecare_helper&quot;&#10;        // You can update the following values to match your application needs.&#10;        // For more information, see: https://flutter.dev/to/review-gradle-config.&#10;        minSdk = flutter.minSdkVersion&#10;        targetSdk = flutter.targetSdkVersion&#10;        versionCode = flutter.versionCode&#10;        versionName = flutter.versionName&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            // TODO: Add your own signing config for the release build.&#10;            // Signing with the debug keys for now, so `flutter run --release` works.&#10;            signingConfig = signingConfigs.getByName(&quot;debug&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;flutter {&#10;    source = &quot;../..&quot;&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#13;&#10;    id(&quot;com.android.application&quot;)&#13;&#10;    id(&quot;kotlin-android&quot;)&#13;&#10;    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.&#13;&#10;    id(&quot;dev.flutter.flutter-gradle-plugin&quot;)&#13;&#10;    id(&quot;com.google.gms.google-services&quot;)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;com.example.homecare_helper&quot;&#13;&#10;    compileSdk = flutter.compileSdkVersion&#13;&#10;    ndkVersion = flutter.ndkVersion&#13;&#10;&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_11&#13;&#10;        targetCompatibility = JavaVersion.VERSION_11&#13;&#10;    }&#13;&#10;&#13;&#10;    kotlinOptions {&#13;&#10;        jvmTarget = JavaVersion.VERSION_11.toString()&#13;&#10;    }&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).&#13;&#10;        applicationId = &quot;com.example.homecare_helper&quot;&#13;&#10;        // You can update the following values to match your application needs.&#13;&#10;        // For more information, see: https://flutter.dev/to/review-gradle-config.&#13;&#10;        minSdk = flutter.minSdkVersion&#13;&#10;        targetSdk = flutter.targetSdkVersion&#13;&#10;        versionCode = flutter.versionCode&#13;&#10;        versionName = flutter.versionName&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            // TODO: Add your own signing config for the release build.&#13;&#10;            // Signing with the debug keys for now, so `flutter run --release` works.&#13;&#10;            signingConfig = signingConfigs.getByName(&quot;debug&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;flutter {&#13;&#10;    source = &quot;../..&quot;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/android/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/android/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&#10;    &lt;!-- FCM permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;com.google.android.c2dm.permission.RECEIVE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:label=&quot;homecare_helper&quot;&#10;        android:name=&quot;${applicationName}&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:launchMode=&quot;singleTop&quot;&#10;            android:taskAffinity=&quot;&quot;&#10;            android:theme=&quot;@style/LaunchTheme&quot;&#10;            android:configChanges=&quot;orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode&quot;&#10;            android:hardwareAccelerated=&quot;true&quot;&#10;            android:windowSoftInputMode=&quot;adjustResize&quot;&gt;&#10;            &lt;!-- Specifies an Android theme to apply to this Activity as soon as&#10;                 the Android process has started. This theme is visible to the user&#10;                 while the Flutter UI initializes. After that, this theme continues&#10;                 to determine the Window background behind the Flutter UI. --&gt;&#10;            &lt;meta-data&#10;              android:name=&quot;io.flutter.embedding.android.NormalTheme&quot;&#10;              android:resource=&quot;@style/NormalTheme&quot;&#10;              /&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;&#10;            &lt;/intent-filter&gt;&#10;            &lt;!-- FCM intent filter --&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;FLUTTER_NOTIFICATION_CLICK&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- FCM default notification channel --&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.firebase.messaging.default_notification_icon&quot;&#10;            android:resource=&quot;@mipmap/ic_launcher&quot; /&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.firebase.messaging.default_notification_color&quot;&#10;            android:resource=&quot;@android:color/holo_blue_light&quot; /&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.firebase.messaging.default_notification_channel_id&quot;&#10;            android:value=&quot;high_importance_channel&quot; /&gt;&#10;&#10;        &lt;!-- Don't delete the meta-data below.&#10;             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java --&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;flutterEmbedding&quot;&#10;            android:value=&quot;2&quot; /&gt;&#10;    &lt;/application&gt;&#10;    &lt;!-- Required to query activities that can process text, see:&#10;         https://developer.android.com/training/package-visibility and&#10;         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.&#10;&#10;         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. --&gt;&#10;    &lt;queries&gt;&#10;        &lt;intent&gt;&#10;            &lt;action android:name=&quot;android.intent.action.PROCESS_TEXT&quot;/&gt;&#10;            &lt;data android:mimeType=&quot;text/plain&quot;/&gt;&#10;        &lt;/intent&gt;&#10;    &lt;/queries&gt;&#10;&lt;/manifest&gt;&#10;" />
              <option name="updatedContent" value="&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&#10;    &lt;!-- FCM permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;com.google.android.c2dm.permission.RECEIVE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:label=&quot;homecare_helper&quot;&#10;        android:name=&quot;${applicationName}&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:launchMode=&quot;singleTop&quot;&#10;            android:taskAffinity=&quot;&quot;&#10;            android:theme=&quot;@style/LaunchTheme&quot;&#10;            android:configChanges=&quot;orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode&quot;&#10;            android:hardwareAccelerated=&quot;true&quot;&#10;            android:windowSoftInputMode=&quot;adjustResize&quot;&gt;&#10;            &lt;!-- Specifies an Android theme to apply to this Activity as soon as&#10;                 the Android process has started. This theme is visible to the user&#10;                 while the Flutter UI initializes. After that, this theme continues&#10;                 to determine the Window background behind the Flutter UI. --&gt;&#10;            &lt;meta-data&#10;              android:name=&quot;io.flutter.embedding.android.NormalTheme&quot;&#10;              android:resource=&quot;@style/NormalTheme&quot;&#10;              /&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;&#10;            &lt;/intent-filter&gt;&#10;            &lt;!-- FCM intent filter --&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;FLUTTER_NOTIFICATION_CLICK&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- FCM default notification channel --&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.firebase.messaging.default_notification_icon&quot;&#10;            android:resource=&quot;@drawable/ic_notification&quot; /&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.firebase.messaging.default_notification_color&quot;&#10;            android:resource=&quot;@android:color/holo_green_light&quot; /&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.firebase.messaging.default_notification_channel_id&quot;&#10;            android:value=&quot;high_importance_channel&quot; /&gt;&#10;&#10;        &lt;!-- Don't delete the meta-data below.&#10;             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java --&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;flutterEmbedding&quot;&#10;            android:value=&quot;2&quot; /&gt;&#10;    &lt;/application&gt;&#10;    &lt;!-- Required to query activities that can process text, see:&#10;         https://developer.android.com/training/package-visibility and&#10;         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.&#10;&#10;         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. --&gt;&#10;    &lt;queries&gt;&#10;        &lt;intent&gt;&#10;            &lt;action android:name=&quot;android.intent.action.PROCESS_TEXT&quot;/&gt;&#10;            &lt;data android:mimeType=&quot;text/plain&quot;/&gt;&#10;        &lt;/intent&gt;&#10;    &lt;/queries&gt;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/android/app/src/main/res/drawable/ic_notification.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/android/app/src/main/res/drawable/ic_notification.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;bitmap xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:src=&quot;@mipmap/ic_launcher&quot;&#10;    android:tint=&quot;@android:color/white&quot; /&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/android/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/android/app/src/main/res/values/colors.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/android/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/android/build.gradle.kts" />
              <option name="originalContent" value="allprojects {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;val newBuildDir: Directory = rootProject.layout.buildDirectory.dir(&quot;../../build&quot;).get()&#10;rootProject.layout.buildDirectory.value(newBuildDir)&#10;&#10;subprojects {&#10;    val newSubprojectBuildDir: Directory = newBuildDir.dir(project.name)&#10;    project.layout.buildDirectory.value(newSubprojectBuildDir)&#10;}&#10;subprojects {&#10;    project.evaluationDependsOn(&quot;:app&quot;)&#10;}&#10;&#10;tasks.register&lt;Delete&gt;(&quot;clean&quot;) {&#10;    delete(rootProject.layout.buildDirectory)&#10;}&#10;" />
              <option name="updatedContent" value="buildscript {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;    dependencies {&#10;        classpath(&quot;com.google.gms:google-services:4.4.0&quot;)&#10;    }&#10;}&#10;&#10;allprojects {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;val newBuildDir: Directory = rootProject.layout.buildDirectory.dir(&quot;../../build&quot;).get()&#10;rootProject.layout.buildDirectory.value(newBuildDir)&#10;&#10;subprojects {&#10;    val newSubprojectBuildDir: Directory = newBuildDir.dir(project.name)&#10;    project.layout.buildDirectory.value(newSubprojectBuildDir)&#10;}&#10;subprojects {&#10;    project.evaluationDependsOn(&quot;:app&quot;)&#10;}&#10;&#10;tasks.register&lt;Delete&gt;(&quot;clean&quot;) {&#10;    delete(rootProject.layout.buildDirectory)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ios/Podfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ios/Podfile" />
              <option name="originalContent" value="# Uncomment this line to define a global platform for your project&#10;# platform :ios, '12.0'&#10;&#10;# CocoaPods analytics sends network stats synchronously affecting flutter build latency.&#10;ENV['COCOAPODS_DISABLE_STATS'] = 'true'&#10;&#10;project 'Runner', {&#10;  'Debug' =&gt; :debug,&#10;  'Profile' =&gt; :release,&#10;  'Release' =&gt; :release,&#10;}&#10;&#10;def flutter_root&#10;  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)&#10;  unless File.exist?(generated_xcode_build_settings_path)&#10;    raise &quot;#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first&quot;&#10;  end&#10;&#10;  File.foreach(generated_xcode_build_settings_path) do |line|&#10;    matches = line.match(/FLUTTER_ROOT\=(.*)/)&#10;    return matches[1].strip if matches&#10;  end&#10;  raise &quot;FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get&quot;&#10;end&#10;&#10;require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)&#10;&#10;flutter_ios_podfile_setup&#10;&#10;target 'Runner' do&#10;  use_frameworks!&#10;  installer.pods_project.targets.each do |target|&#10;" />
              <option name="updatedContent" value="# Uncomment this line to define a global platform for your project&#13;&#10;platform :ios, '11.0'&#13;&#10;&#13;&#10;# CocoaPods analytics sends network stats synchronously affecting flutter build latency.&#13;&#10;ENV['COCOAPODS_DISABLE_STATS'] = 'true'&#13;&#10;&#13;&#10;project 'Runner', {&#13;&#10;  'Debug' =&gt; :debug,&#13;&#10;  'Profile' =&gt; :release,&#13;&#10;  'Release' =&gt; :release,&#13;&#10;}&#13;&#10;&#13;&#10;def flutter_root&#13;&#10;  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)&#13;&#10;  unless File.exist?(generated_xcode_build_settings_path)&#13;&#10;    raise &quot;#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first&quot;&#13;&#10;  end&#13;&#10;&#13;&#10;  File.foreach(generated_xcode_build_settings_path) do |line|&#13;&#10;    matches = line.match(/FLUTTER_ROOT\=(.*)/)&#13;&#10;    return matches[1].strip if matches&#13;&#10;  end&#13;&#10;  raise &quot;FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get&quot;&#13;&#10;end&#13;&#10;&#13;&#10;require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)&#13;&#10;&#13;&#10;flutter_ios_podfile_setup&#13;&#10;&#13;&#10;target 'Runner' do&#13;&#10;  use_frameworks!&#13;&#10;  use_modular_headers!&#13;&#10;&#13;&#10;  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))&#13;&#10;  &#13;&#10;  # Firebase specific pods for FCM&#13;&#10;  pod 'FirebaseCore'&#13;&#10;  pod 'FirebaseMessaging'&#13;&#10;  &#13;&#10;  target 'RunnerTests' do&#13;&#10;    inherit! :search_paths&#13;&#10;  end&#13;&#10;end&#13;&#10;&#13;&#10;post_install do |installer|&#13;&#10;  installer.pods_project.targets.each do |target|&#13;&#10;    flutter_additional_ios_build_settings(target)&#13;&#10;    &#13;&#10;    # Fix for iOS 11+ deployment target&#13;&#10;    target.build_configurations.each do |config|&#13;&#10;      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '11.0'&#13;&#10;    end&#13;&#10;  end&#13;&#10;end" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ios/Runner/AppDelegate.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ios/Runner/AppDelegate.swift" />
              <option name="originalContent" value="import Flutter&#10;import Flutter&#10;  ) -&gt; Bool {&#10;@main&#10;    return super.application(application, didFinishLaunchingWithOptions: launchOptions)&#10;" />
              <option name="updatedContent" value="import UIKit&#13;&#10;import Flutter&#13;&#10;import FirebaseCore&#13;&#10;import FirebaseMessaging&#13;&#10;&#13;&#10;@UIApplicationMain&#13;&#10;@objc class AppDelegate: FlutterAppDelegate {&#13;&#10;  override func application(&#13;&#10;    _ application: UIApplication,&#13;&#10;    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?&#13;&#10;  ) -&gt; Bool {&#13;&#10;    // Khởi tạo Firebase&#13;&#10;    FirebaseApp.configure()&#13;&#10;    &#13;&#10;    GeneratedPluginRegistrant.register(with: self)&#13;&#10;    &#13;&#10;    // Cấu hình FCM&#13;&#10;    if #available(iOS 10.0, *) {&#13;&#10;      UNUserNotificationCenter.current().delegate = self&#13;&#10;      let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]&#13;&#10;      UNUserNotificationCenter.current().requestAuthorization(&#13;&#10;        options: authOptions,&#13;&#10;        completionHandler: {_, _ in })&#13;&#10;    } else {&#13;&#10;      let settings: UIUserNotificationSettings =&#13;&#10;      UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)&#13;&#10;      application.registerUserNotificationSettings(settings)&#13;&#10;    }&#13;&#10;&#13;&#10;    application.registerForRemoteNotifications()&#13;&#10;    &#13;&#10;    return super.application(application, didFinishLaunchingWithOptions: launchOptions)&#13;&#10;  }&#13;&#10;  &#13;&#10;  // FCM Token callback&#13;&#10;  override func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {&#13;&#10;    Messaging.messaging().apnsToken = deviceToken&#13;&#10;  }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/components/fcm_status_widget.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/components/fcm_status_widget.dart" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter/services.dart';&#10;import 'package:homecare_helper/services/fcm_service.dart';&#10;&#10;class FCMStatusWidget extends StatefulWidget {&#10;  @override&#10;  _FCMStatusWidgetState createState() =&gt; _FCMStatusWidgetState();&#10;}&#10;&#10;class _FCMStatusWidgetState extends State&lt;FCMStatusWidget&gt; {&#10;  String? _token;&#10;  bool _isLoading = false;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _loadToken();&#10;  }&#10;&#10;  Future&lt;void&gt; _loadToken() async {&#10;    setState(() =&gt; _isLoading = true);&#10;    String? token = FCMService.currentToken ?? await FCMService.getToken();&#10;    setState(() {&#10;      _token = token;&#10;      _isLoading = false;&#10;    });&#10;  }&#10;&#10;  Future&lt;void&gt; _copyToken() async {&#10;    if (_token != null) {&#10;      await Clipboard.setData(ClipboardData(text: _token!));&#10;      ScaffoldMessenger.of(context).showSnackBar(&#10;        SnackBar(&#10;          content: Text('Token đã được copy!'),&#10;          backgroundColor: Colors.green,&#10;          duration: Duration(seconds: 2),&#10;        ),&#10;      );&#10;    }&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Card(&#10;      margin: EdgeInsets.all(8),&#10;      child: ExpansionTile(&#10;        leading: Icon(&#10;          Icons.notifications_active,&#10;          color: _token != null ? Colors.green : Colors.orange,&#10;        ),&#10;        title: Text(&#10;          'Trạng thái thông báo',&#10;          style: TextStyle(fontWeight: FontWeight.bold),&#10;        ),&#10;        subtitle: Text(&#10;          _token != null ? 'Hoạt động' : 'Đang khởi tạo...',&#10;          style: TextStyle(&#10;            color: _token != null ? Colors.green : Colors.orange,&#10;          ),&#10;        ),&#10;        children: [&#10;          Padding(&#10;            padding: EdgeInsets.all(16),&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              children: [&#10;                Text(&#10;                  'FCM Token:',&#10;                  style: TextStyle(fontWeight: FontWeight.bold),&#10;                ),&#10;                SizedBox(height: 8),&#10;                if (_isLoading)&#10;                  Center(child: CircularProgressIndicator())&#10;                else if (_token != null)&#10;                  Container(&#10;                    width: double.infinity,&#10;                    padding: EdgeInsets.all(12),&#10;                    decoration: BoxDecoration(&#10;                      color: Colors.grey[100],&#10;                      borderRadius: BorderRadius.circular(8),&#10;                      border: Border.all(color: Colors.grey[300]!),&#10;                    ),&#10;                    child: Text(&#10;                      _token!,&#10;                      style: TextStyle(&#10;                        fontSize: 10,&#10;                        fontFamily: 'monospace',&#10;                      ),&#10;                    ),&#10;                  )&#10;                else&#10;                  Text(&#10;                    'Token chưa sẵn sàng',&#10;                    style: TextStyle(color: Colors.red),&#10;                  ),&#10;                SizedBox(height: 12),&#10;                Row(&#10;                  children: [&#10;                    Expanded(&#10;                      child: ElevatedButton.icon(&#10;                        onPressed: _token != null ? _copyToken : null,&#10;                        icon: Icon(Icons.copy, size: 16),&#10;                        label: Text('Copy Token'),&#10;                        style: ElevatedButton.styleFrom(&#10;                          backgroundColor: Colors.blue,&#10;                          foregroundColor: Colors.white,&#10;                          padding: EdgeInsets.symmetric(vertical: 8),&#10;                        ),&#10;                      ),&#10;                    ),&#10;                    SizedBox(width: 8),&#10;                    Expanded(&#10;                      child: ElevatedButton.icon(&#10;                        onPressed: _loadToken,&#10;                        icon: Icon(Icons.refresh, size: 16),&#10;                        label: Text('Refresh'),&#10;                        style: ElevatedButton.styleFrom(&#10;                          backgroundColor: Colors.green,&#10;                          foregroundColor: Colors.white,&#10;                          padding: EdgeInsets.symmetric(vertical: 8),&#10;                        ),&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/source/source.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/source/source.dart" />
              <option name="originalContent" value="import 'dart:convert';&#10;import 'dart:io';&#10;&#10;import 'package:flutter/foundation.dart';&#10;import 'package:flutter/services.dart';&#10;import 'package:homecare_helper/data/model/RequestHelper.dart';&#10;import 'package:homecare_helper/data/model/coefficient.dart';&#10;import 'package:homecare_helper/data/model/cost_factor.dart';&#10;import 'package:homecare_helper/data/model/customer.dart';&#10;import 'package:homecare_helper/data/model/helper.dart';&#10;import 'package:homecare_helper/data/model/location.dart';&#10;import 'package:homecare_helper/data/model/message.dart';&#10;import 'package:homecare_helper/data/model/request.dart';&#10;import 'package:homecare_helper/data/model/request_detail.dart';&#10;import 'package:homecare_helper/data/model/services.dart';&#10;import 'package:homecare_helper/data/model/time_off.dart';&#10;&#10;import 'package:http/http.dart' as http;&#10;&#10;import '../model/Authen.dart';&#10;&#10;abstract interface class DataSource {&#10;  Future&lt;List&lt;Helper&gt;?&gt; loadCleanerData();&#10;&#10;  Future&lt;List&lt;Location&gt;?&gt; loadLocationData();&#10;&#10;  Future&lt;List&lt;Services&gt;?&gt; loadServicesData();&#10;&#10;  Future&lt;List&lt;Customer&gt;?&gt; loadCustomerData();&#10;&#10;  Future&lt;List&lt;Requests&gt;?&gt; loadRequestData();&#10;&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailData();&#10;&#10;  Future&lt;void&gt; sendRequests(Requests requests);&#10;&#10;  Future&lt;void&gt; cancelRequest(String id);&#10;&#10;  Future&lt;void&gt; finishRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; assignedRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; processingRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; finishPayment(String id, String token);&#10;&#10;  Future&lt;void&gt; waitPayment(String id);&#10;&#10;  Future&lt;List&lt;TimeOff&gt;?&gt; loadTimeOffData();&#10;&#10;  Future&lt;List&lt;Message&gt;?&gt; loadMessageData(Message message);&#10;&#10;  Future&lt;void&gt; sendMessage(String phone);&#10;&#10;  Future&lt;List&lt;CostFactor&gt;?&gt; loadCostFactorData();&#10;&#10;  Future&lt;CoefficientOther?&gt; loadCoefficientOther();&#10;&#10;  Future&lt;List&lt;CoefficientOther&gt;?&gt; loadCoefficientService();&#10;&#10;  Future&lt;void&gt; sendCustomerRegisterRequest(Customer customer);&#10;&#10;  Future&lt;Map&lt;String, dynamic&gt;?&gt; calculateCost(&#10;      num servicePrice,&#10;      String startTime,&#10;      String endTime,&#10;      String startDate,&#10;      CoefficientOther coefficientOther,&#10;      num serviceFactor);&#10;&#10;  Future&lt;Authen?&gt; loginHelper(String phone, String password);&#10;&#10;  Future&lt;Authen?&gt; registerHelper(String phone, String password, String name,&#10;      String email, Addresses addresses);&#10;&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadUnassignedRequest(String token);&#10;&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadAssignedRequest(String token);&#10;&#10;  Future&lt;void&gt; updateWorkingStatus(String workingStatus, String token);&#10;&#10;  Future&lt;bool?&gt; registerHelperDeviceToken(String deviceToken, String phone)&#10;}&#10;&#10;class RemoteDataSource implements DataSource {&#10;  @override&#10;  Future&lt;List&lt;Helper&gt;?&gt; loadCleanerData() async {&#10;    const url = 'https://homecareapi.vercel.app/helper/';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; cleanerList = jsonDecode(bodyContent);&#10;&#10;        List&lt;Helper&gt; helpers = [];&#10;        for (int i = 0; i &lt; cleanerList.length; i++) {&#10;          try {&#10;            final helper = Helper.fromJson(cleanerList[i]);&#10;            helpers.add(helper);&#10;          } catch (e) {&#10;            print('Error parsing helper at index $i: $e');&#10;            print('Helper data: ${cleanerList[i]}');&#10;            // Continue with other helpers instead of failing completely&#10;            continue;&#10;          }&#10;        }&#10;&#10;        return helpers;&#10;      } else {&#10;        print(&#10;            'Failed to load cleaner data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading cleaner data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Location&gt;?&gt; loadLocationData() async {&#10;    const url = 'https://homecareapi.vercel.app/location';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; locationList = jsonDecode(bodyContent);&#10;        return locationList&#10;            .map((location) =&gt; Location.fromJson(location))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load location data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading location data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Customer&gt;?&gt; loadCustomerData() async {&#10;    const url = 'https://homecareapi.vercel.app/customer';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; customerList = jsonDecode(bodyContent);&#10;        return customerList&#10;            .map((customer) =&gt; Customer.fromJson(customer))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load customer data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading customer data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; updateCustomerInfo(Customer customer) async {&#10;    final url = 'https://homecareapi.vercel.app/customer/${customer.phone}';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode(customer.toJson());&#10;&#10;    try {&#10;      final response = await http.patch(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        print('Customer updated successfully!');&#10;      } else {&#10;        print('Failed to update customer. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error updating customer: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Services&gt;?&gt; loadServicesData() async {&#10;    const url = 'https://homecareapi.vercel.app/service';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; servicesList = jsonDecode(bodyContent);&#10;        return servicesList&#10;            .map((services) =&gt; Services.fromJson(services))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load services data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading services data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Requests&gt;?&gt; loadRequestData() async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        // print(response.body);&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;        return requestList&#10;            .map((request) =&gt; Requests.fromJson(request))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailData() async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;&#10;        List&lt;String&gt; requestIds = [];&#10;&#10;        for (var request in requestList) {&#10;          Requests req = Requests.fromJson(request);&#10;          if (req.scheduleIds.isNotEmpty) {&#10;            requestIds.addAll(req.scheduleIds);&#10;          }&#10;        }&#10;        return await loadRequestDetailId(requestIds);&#10;      } else {&#10;        print(&#10;            'Failed to load request detail data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailId(List&lt;String&gt; id) async {&#10;    String idString = id.join(',');&#10;    if (idString.endsWith(',')) {&#10;      idString = idString.substring(0, idString.length - 1);&#10;    }&#10;    String url = 'https://homecareapi.vercel.app/requestDetail?ids=$idString';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; detailsList = jsonDecode(bodyContent);&#10;        return detailsList&#10;            .map((detail) =&gt; RequestDetail.fromJson(detail))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request detail IDs. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail IDs: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;TimeOff&gt;?&gt; loadTimeOffData() async {&#10;    const url = 'https://homecareapi.vercel.app/timeOff/test';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; timeOffList = jsonDecode(bodyContent);&#10;        return timeOffList.map((timeOff) =&gt; TimeOff.fromJson(timeOff)).toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request detail IDs. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail IDs: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendRequests(Requests requests) async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode(requests.toJson());&#10;&#10;    print(body);&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; cancelRequest(String id) async {&#10;    final url = 'https://homecareapi.vercel.app/request/cancel';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'id': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Cancel request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; waitPayment(String id) async {&#10;    final url = 'https://homecareapi.vercel.app/request/waitpayment';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'id': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Wait payment request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; finishRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/finish';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; assignedRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/assign';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Assigned request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Message&gt;?&gt; loadMessageData(Message message) async {&#10;    final url = Uri.parse(&#10;        'https://homecareapi.vercel.app/message?phone=${message.phone}');&#10;    try {&#10;      final response = await http.get(url);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = json.decode(response.body);&#10;        final List&lt;dynamic&gt; messageList = jsonDecode(bodyContent);&#10;        return messageList.map((message) =&gt; Message.fromJson(message)).toList();&#10;      } else {&#10;        print('Failed to load message. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error occurred: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendMessage(String phone) async {&#10;    const url = 'https://homecareapi.vercel.app/message';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'phone': phone});&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;CostFactor&gt;?&gt; loadCostFactorData() async {&#10;    final url = &quot;https://homecareapi.vercel.app/costFactor&quot;;&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; costFactorList = jsonDecode(bodyContent);&#10;        return costFactorList&#10;            .map((costFactor) =&gt; CostFactor.fromJson(costFactor))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Map&lt;String, dynamic&gt;?&gt; calculateCost(&#10;      num servicePrice,&#10;      String startTime,&#10;      String endTime,&#10;      String startDate,&#10;      CoefficientOther coefficientOther,&#10;      num serviceFactor) async {&#10;    const url = 'https://homecareapi.vercel.app/request/calculateCost';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;servicePrice&quot;: servicePrice,&#10;      &quot;startTime&quot;: startTime,&#10;      &quot;endTime&quot;: endTime,&#10;      &quot;workDate&quot;: startDate,&#10;      &quot;officeStartTime&quot;: &quot;08:00&quot;,&#10;      &quot;officeEndTime&quot;: &quot;18:00&quot;,&#10;      &quot;coefficient_other&quot;: coefficientOther.toJson(),&#10;      &quot;serviceFactor&quot;: serviceFactor&#10;    });&#10;&#10;    debugPrint(body);&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        final decodedResponse =&#10;            jsonDecode(utf8.decode(response.bodyBytes)) as Map&lt;String, dynamic&gt;;&#10;        // debugPrint(&quot;Response Body: $decodedResponse&quot;);&#10;        return decodedResponse;&#10;      } else {&#10;        print(&#10;            'Failed to post requests calculation. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests calculation: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;CoefficientOther?&gt; loadCoefficientOther() async {&#10;    final url = &quot;https://homecareapi.vercel.app/costFactor/other&quot;;&#10;    final uri = Uri.parse(url);&#10;&#10;    try {&#10;      final response = await http.get(uri);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final Map&lt;String, dynamic&gt; coefficientOtherMap =&#10;            jsonDecode(bodyContent);&#10;&#10;        return CoefficientOther.fromJson(coefficientOtherMap);&#10;      } else {&#10;        print('Failed to load data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;CoefficientOther&gt;?&gt; loadCoefficientService() async {&#10;    const String url =&#10;        &quot;https://homecareapi.vercel.app/costFactor/service&quot;; // Thay bằng URL API thực tế&#10;    final Uri uri = Uri.parse(url);&#10;&#10;    try {&#10;      final response = await http.get(uri);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; coefficientServiceList = jsonDecode(bodyContent);&#10;        return coefficientServiceList&#10;            .map((coefficient) =&gt; CoefficientOther.fromJson(coefficient))&#10;            .toList();&#10;      } else {&#10;        print('Failed to load data. Status code: ${response.statusCode}');&#10;        return [];&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return [];&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendCustomerRegisterRequest(Customer customer) async {&#10;    const url = 'https://homecareapi.vercel.app/customer';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;email&quot;: customer.email,&#10;      &quot;fullName&quot;: customer.name,&#10;      &quot;phone&quot;: customer.phone,&#10;      &quot;password&quot;: customer.password,&#10;      &quot;points&quot;: [&#10;        {&#10;          &quot;point&quot;: 100000000,&#10;        }&#10;      ],&#10;      &quot;addresses&quot;:&#10;          customer.addresses.map((address) =&gt; address.toJson()).toList(),&#10;    });&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; finishPayment(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/finishpayment';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; processingRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/processing';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Authen?&gt; loginHelper(String phone, String password) {&#10;    const url = 'https://homecareapi.vercel.app/auth/login/helper';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;phone&quot;: phone,&#10;      &quot;password&quot;: password,&#10;    });&#10;&#10;    try {&#10;      return http.post(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final Map&lt;String, dynamic&gt; authMap = jsonDecode(bodyContent);&#10;          final Authen auth = Authen.fromJson(authMap);&#10;          return auth;&#10;        } else {&#10;          print('Failed to authenticate. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;        }&#10;        return null;&#10;      });&#10;    } catch (e) {&#10;      print('Error during authentication: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Authen?&gt; registerHelper(String phone, String password, String name,&#10;      String email, Addresses addresses) {&#10;    const url = 'https://homecareapi.vercel.app/auth/register/helper';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;fullName&quot;: name,&#10;      &quot;phone&quot;: phone,&#10;      &quot;password&quot;: password,&#10;      &quot;email&quot;: email,&#10;      &quot;address&quot;: addresses.toJson(),&#10;    });&#10;&#10;    try {&#10;      return http.post(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 201) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final Map&lt;String, dynamic&gt; authenMap = jsonDecode(bodyContent);&#10;          final Authen authen = Authen.fromJson(authenMap);&#10;          return authen;&#10;        } else {&#10;          print('Failed to register. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return Future.error('Failed to register');&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error during registration: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadUnassignedRequest(String token) {&#10;    final url = &quot;https://homecareapi.vercel.app/request&quot;;&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token',&#10;    };&#10;    try {&#10;      return http.get(uri, headers: headers).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;          print('body: $bodyContent');&#10;          return requestList&#10;              .map((request) =&gt; RequestHelper.fromJson(request))&#10;              .toList();&#10;        } else {&#10;          print(&#10;              'Failed to load unassigned requests. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return null;&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error loading unassigned requests: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadAssignedRequest(String token) {&#10;    final url = &quot;https://homecareapi.vercel.app/request/my-assigned&quot;;&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token',&#10;    };&#10;    try {&#10;      return http.get(uri, headers: headers).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;          print('body: $bodyContent');&#10;          return requestList&#10;              .map((request) =&gt; RequestHelper.fromJson(request))&#10;              .toList();&#10;        } else {&#10;          print(&#10;              'Failed to load assigned requests. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return null;&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error loading assigned requests: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; updateWorkingStatus(String workingStatus, String token) {&#10;    final url = 'https://homecareapi.vercel.app/helper/status';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'workingStatus': workingStatus});&#10;    try {&#10;      return http.patch(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 200) {&#10;          if (kDebugMode) {&#10;            print('Status updated successfully!');&#10;          }&#10;        } else {&#10;          print('Failed to update status. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error updating status: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;bool?&gt; registerHelperDeviceToken(String deviceToken, String phone) {&#10;    final url = 'https://homecareapi.vercel.app/helper-notifications/register';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;    };&#10;    final body = jsonEncode({&#10;      'token': deviceToken,&#10;      'phone': phone,&#10;      'platform': 'android'&#10;    });&#10;    try {&#10;      return http.post(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 200) {&#10;          if (kDebugMode) {&#10;            print('Device token registered successfully!');&#10;          }&#10;          return true;&#10;        } else {&#10;          print(&#10;              'Failed to register device token. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return false;&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error registering device token: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'dart:convert';&#10;import 'dart:io';&#10;&#10;import 'package:flutter/foundation.dart';&#10;import 'package:flutter/services.dart';&#10;import 'package:homecare_helper/data/model/RequestHelper.dart';&#10;import 'package:homecare_helper/data/model/coefficient.dart';&#10;import 'package:homecare_helper/data/model/cost_factor.dart';&#10;import 'package:homecare_helper/data/model/customer.dart';&#10;import 'package:homecare_helper/data/model/helper.dart';&#10;import 'package:homecare_helper/data/model/location.dart';&#10;import 'package:homecare_helper/data/model/message.dart';&#10;import 'package:homecare_helper/data/model/request.dart';&#10;import 'package:homecare_helper/data/model/request_detail.dart';&#10;import 'package:homecare_helper/data/model/services.dart';&#10;import 'package:homecare_helper/data/model/time_off.dart';&#10;&#10;import 'package:http/http.dart' as http;&#10;&#10;import '../model/Authen.dart';&#10;&#10;abstract interface class DataSource {&#10;  Future&lt;List&lt;Helper&gt;?&gt; loadCleanerData();&#10;&#10;  Future&lt;List&lt;Location&gt;?&gt; loadLocationData();&#10;&#10;  Future&lt;List&lt;Services&gt;?&gt; loadServicesData();&#10;&#10;  Future&lt;List&lt;Customer&gt;?&gt; loadCustomerData();&#10;&#10;  Future&lt;List&lt;Requests&gt;?&gt; loadRequestData();&#10;&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailData();&#10;&#10;  Future&lt;void&gt; sendRequests(Requests requests);&#10;&#10;  Future&lt;void&gt; cancelRequest(String id);&#10;&#10;  Future&lt;void&gt; finishRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; assignedRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; processingRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; finishPayment(String id, String token);&#10;&#10;  Future&lt;void&gt; waitPayment(String id);&#10;&#10;  Future&lt;List&lt;TimeOff&gt;?&gt; loadTimeOffData();&#10;&#10;  Future&lt;List&lt;Message&gt;?&gt; loadMessageData(Message message);&#10;&#10;  Future&lt;void&gt; sendMessage(String phone);&#10;&#10;  Future&lt;List&lt;CostFactor&gt;?&gt; loadCostFactorData();&#10;&#10;  Future&lt;CoefficientOther?&gt; loadCoefficientOther();&#10;&#10;  Future&lt;List&lt;CoefficientOther&gt;?&gt; loadCoefficientService();&#10;&#10;  Future&lt;void&gt; sendCustomerRegisterRequest(Customer customer);&#10;&#10;  Future&lt;Map&lt;String, dynamic&gt;?&gt; calculateCost(&#10;      num servicePrice,&#10;      String startTime,&#10;      String endTime,&#10;      String startDate,&#10;      CoefficientOther coefficientOther,&#10;      num serviceFactor);&#10;&#10;  Future&lt;Authen?&gt; loginHelper(String phone, String password);&#10;&#10;  Future&lt;Authen?&gt; registerHelper(String phone, String password, String name,&#10;      String email, Addresses addresses);&#10;&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadUnassignedRequest(String token);&#10;&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadAssignedRequest(String token);&#10;&#10;  Future&lt;void&gt; updateWorkingStatus(String workingStatus, String token);&#10;&#10;  Future&lt;bool?&gt; registerHelperDeviceToken(String deviceToken, String phone);&#10;}&#10;&#10;class RemoteDataSource implements DataSource {&#10;  @override&#10;  Future&lt;List&lt;Helper&gt;?&gt; loadCleanerData() async {&#10;    const url = 'https://homecareapi.vercel.app/helper/';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; cleanerList = jsonDecode(bodyContent);&#10;&#10;        List&lt;Helper&gt; helpers = [];&#10;        for (int i = 0; i &lt; cleanerList.length; i++) {&#10;          try {&#10;            final helper = Helper.fromJson(cleanerList[i]);&#10;            helpers.add(helper);&#10;          } catch (e) {&#10;            print('Error parsing helper at index $i: $e');&#10;            print('Helper data: ${cleanerList[i]}');&#10;            // Continue with other helpers instead of failing completely&#10;            continue;&#10;          }&#10;        }&#10;&#10;        return helpers;&#10;      } else {&#10;        print(&#10;            'Failed to load cleaner data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading cleaner data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Location&gt;?&gt; loadLocationData() async {&#10;    const url = 'https://homecareapi.vercel.app/location';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; locationList = jsonDecode(bodyContent);&#10;        return locationList&#10;            .map((location) =&gt; Location.fromJson(location))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load location data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading location data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Customer&gt;?&gt; loadCustomerData() async {&#10;    const url = 'https://homecareapi.vercel.app/customer';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; customerList = jsonDecode(bodyContent);&#10;        return customerList&#10;            .map((customer) =&gt; Customer.fromJson(customer))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load customer data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading customer data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; updateCustomerInfo(Customer customer) async {&#10;    final url = 'https://homecareapi.vercel.app/customer/${customer.phone}';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode(customer.toJson());&#10;&#10;    try {&#10;      final response = await http.patch(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        print('Customer updated successfully!');&#10;      } else {&#10;        print('Failed to update customer. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error updating customer: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Services&gt;?&gt; loadServicesData() async {&#10;    const url = 'https://homecareapi.vercel.app/service';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; servicesList = jsonDecode(bodyContent);&#10;        return servicesList&#10;            .map((services) =&gt; Services.fromJson(services))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load services data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading services data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Requests&gt;?&gt; loadRequestData() async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        // print(response.body);&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;        return requestList&#10;            .map((request) =&gt; Requests.fromJson(request))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailData() async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;&#10;        List&lt;String&gt; requestIds = [];&#10;&#10;        for (var request in requestList) {&#10;          Requests req = Requests.fromJson(request);&#10;          if (req.scheduleIds.isNotEmpty) {&#10;            requestIds.addAll(req.scheduleIds);&#10;          }&#10;        }&#10;        return await loadRequestDetailId(requestIds);&#10;      } else {&#10;        print(&#10;            'Failed to load request detail data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailId(List&lt;String&gt; id) async {&#10;    String idString = id.join(',');&#10;    if (idString.endsWith(',')) {&#10;      idString = idString.substring(0, idString.length - 1);&#10;    }&#10;    String url = 'https://homecareapi.vercel.app/requestDetail?ids=$idString';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; detailsList = jsonDecode(bodyContent);&#10;        return detailsList&#10;            .map((detail) =&gt; RequestDetail.fromJson(detail))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request detail IDs. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail IDs: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;TimeOff&gt;?&gt; loadTimeOffData() async {&#10;    const url = 'https://homecareapi.vercel.app/timeOff/test';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; timeOffList = jsonDecode(bodyContent);&#10;        return timeOffList.map((timeOff) =&gt; TimeOff.fromJson(timeOff)).toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request detail IDs. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail IDs: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendRequests(Requests requests) async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode(requests.toJson());&#10;&#10;    print(body);&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; cancelRequest(String id) async {&#10;    final url = 'https://homecareapi.vercel.app/request/cancel';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'id': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Cancel request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; waitPayment(String id) async {&#10;    final url = 'https://homecareapi.vercel.app/request/waitpayment';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'id': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Wait payment request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; finishRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/finish';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; assignedRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/assign';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Assigned request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Message&gt;?&gt; loadMessageData(Message message) async {&#10;    final url = Uri.parse(&#10;        'https://homecareapi.vercel.app/message?phone=${message.phone}');&#10;    try {&#10;      final response = await http.get(url);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = json.decode(response.body);&#10;        final List&lt;dynamic&gt; messageList = jsonDecode(bodyContent);&#10;        return messageList.map((message) =&gt; Message.fromJson(message)).toList();&#10;      } else {&#10;        print('Failed to load message. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error occurred: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendMessage(String phone) async {&#10;    const url = 'https://homecareapi.vercel.app/message';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'phone': phone});&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;CostFactor&gt;?&gt; loadCostFactorData() async {&#10;    final url = &quot;https://homecareapi.vercel.app/costFactor&quot;;&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; costFactorList = jsonDecode(bodyContent);&#10;        return costFactorList&#10;            .map((costFactor) =&gt; CostFactor.fromJson(costFactor))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Map&lt;String, dynamic&gt;?&gt; calculateCost(&#10;      num servicePrice,&#10;      String startTime,&#10;      String endTime,&#10;      String startDate,&#10;      CoefficientOther coefficientOther,&#10;      num serviceFactor) async {&#10;    const url = 'https://homecareapi.vercel.app/request/calculateCost';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;servicePrice&quot;: servicePrice,&#10;      &quot;startTime&quot;: startTime,&#10;      &quot;endTime&quot;: endTime,&#10;      &quot;workDate&quot;: startDate,&#10;      &quot;officeStartTime&quot;: &quot;08:00&quot;,&#10;      &quot;officeEndTime&quot;: &quot;18:00&quot;,&#10;      &quot;coefficient_other&quot;: coefficientOther.toJson(),&#10;      &quot;serviceFactor&quot;: serviceFactor&#10;    });&#10;&#10;    debugPrint(body);&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        final decodedResponse =&#10;            jsonDecode(utf8.decode(response.bodyBytes)) as Map&lt;String, dynamic&gt;;&#10;        // debugPrint(&quot;Response Body: $decodedResponse&quot;);&#10;        return decodedResponse;&#10;      } else {&#10;        print(&#10;            'Failed to post requests calculation. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests calculation: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;CoefficientOther?&gt; loadCoefficientOther() async {&#10;    final url = &quot;https://homecareapi.vercel.app/costFactor/other&quot;;&#10;    final uri = Uri.parse(url);&#10;&#10;    try {&#10;      final response = await http.get(uri);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final Map&lt;String, dynamic&gt; coefficientOtherMap =&#10;            jsonDecode(bodyContent);&#10;&#10;        return CoefficientOther.fromJson(coefficientOtherMap);&#10;      } else {&#10;        print('Failed to load data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;CoefficientOther&gt;?&gt; loadCoefficientService() async {&#10;    const String url =&#10;        &quot;https://homecareapi.vercel.app/costFactor/service&quot;; // Thay bằng URL API thực tế&#10;    final Uri uri = Uri.parse(url);&#10;&#10;    try {&#10;      final response = await http.get(uri);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; coefficientServiceList = jsonDecode(bodyContent);&#10;        return coefficientServiceList&#10;            .map((coefficient) =&gt; CoefficientOther.fromJson(coefficient))&#10;            .toList();&#10;      } else {&#10;        print('Failed to load data. Status code: ${response.statusCode}');&#10;        return [];&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return [];&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendCustomerRegisterRequest(Customer customer) async {&#10;    const url = 'https://homecareapi.vercel.app/customer';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;email&quot;: customer.email,&#10;      &quot;fullName&quot;: customer.name,&#10;      &quot;phone&quot;: customer.phone,&#10;      &quot;password&quot;: customer.password,&#10;      &quot;points&quot;: [&#10;        {&#10;          &quot;point&quot;: 100000000,&#10;        }&#10;      ],&#10;      &quot;addresses&quot;:&#10;          customer.addresses.map((address) =&gt; address.toJson()).toList(),&#10;    });&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; finishPayment(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/finishpayment';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; processingRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/processing';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Authen?&gt; loginHelper(String phone, String password) {&#10;    const url = 'https://homecareapi.vercel.app/auth/login/helper';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;phone&quot;: phone,&#10;      &quot;password&quot;: password,&#10;    });&#10;&#10;    try {&#10;      return http.post(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final Map&lt;String, dynamic&gt; authMap = jsonDecode(bodyContent);&#10;          final Authen auth = Authen.fromJson(authMap);&#10;          return auth;&#10;        } else {&#10;          print('Failed to authenticate. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;        }&#10;        return null;&#10;      });&#10;    } catch (e) {&#10;      print('Error during authentication: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Authen?&gt; registerHelper(String phone, String password, String name,&#10;      String email, Addresses addresses) {&#10;    const url = 'https://homecareapi.vercel.app/auth/register/helper';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;fullName&quot;: name,&#10;      &quot;phone&quot;: phone,&#10;      &quot;password&quot;: password,&#10;      &quot;email&quot;: email,&#10;      &quot;address&quot;: addresses.toJson(),&#10;    });&#10;&#10;    try {&#10;      return http.post(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 201) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final Map&lt;String, dynamic&gt; authenMap = jsonDecode(bodyContent);&#10;          final Authen authen = Authen.fromJson(authenMap);&#10;          return authen;&#10;        } else {&#10;          print('Failed to register. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return Future.error('Failed to register');&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error during registration: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadUnassignedRequest(String token) {&#10;    final url = &quot;https://homecareapi.vercel.app/request&quot;;&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token',&#10;    };&#10;    try {&#10;      return http.get(uri, headers: headers).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;          print('body: $bodyContent');&#10;          return requestList&#10;              .map((request) =&gt; RequestHelper.fromJson(request))&#10;              .toList();&#10;        } else {&#10;          print(&#10;              'Failed to load unassigned requests. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return null;&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error loading unassigned requests: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadAssignedRequest(String token) {&#10;    final url = &quot;https://homecareapi.vercel.app/request/my-assigned&quot;;&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token',&#10;    };&#10;    try {&#10;      return http.get(uri, headers: headers).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;          print('body: $bodyContent');&#10;          return requestList&#10;              .map((request) =&gt; RequestHelper.fromJson(request))&#10;              .toList();&#10;        } else {&#10;          print(&#10;              'Failed to load assigned requests. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return null;&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error loading assigned requests: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; updateWorkingStatus(String workingStatus, String token) {&#10;    final url = 'https://homecareapi.vercel.app/helper/status';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'workingStatus': workingStatus});&#10;    try {&#10;      return http.patch(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 200) {&#10;          if (kDebugMode) {&#10;            print('Status updated successfully!');&#10;          }&#10;        } else {&#10;          print('Failed to update status. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error updating status: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;bool?&gt; registerHelperDeviceToken(String deviceToken, String phone) {&#10;    final url = 'https://homecareapi.vercel.app/helper-notifications/register';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;    };&#10;    final body = jsonEncode({&#10;      'token': deviceToken,&#10;      'phone': phone,&#10;      'platform': 'android'&#10;    });&#10;    try {&#10;      return http.post(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 200) {&#10;          if (kDebugMode) {&#10;            print('Device token registered successfully!');&#10;          }&#10;          return true;&#10;        } else {&#10;          print(&#10;              'Failed to register device token. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return false;&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error registering device token: $e');&#10;      return Future.value(false);&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/main.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/main.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:homecare_helper/app_theme.dart';&#10;import 'package:homecare_helper/components/spash_screen.dart';&#10;import 'package:homecare_helper/pages/home_page.dart';&#10;&#10;import 'data/repository/repository.dart';&#10;&#10;Future&lt;void&gt; _firebaseMessagingBackgroundHandler(RemoteMessage message) async {&#10;  print(&quot; Nhận thông báo trong nền: ${message.notification?.title}&quot;);&#10;}&#10;&#10;void main() async {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);&#10;&#10;  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);&#10;&#10;  FirebaseMessaging messaging = FirebaseMessaging.instance;&#10;  String? token = await messaging.getToken();&#10;  print(&quot; FCM Token: $token&quot;);&#10;&#10;  FirebaseMessaging.onMessage.listen((RemoteMessage message) {&#10;    print(&quot; Thông báo foreground: ${message.notification?.title}&quot;);&#10;  });&#10;&#10;  FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {&#10;    print(&quot; Người dùng bấm vào thông báo: ${message.notification?.title}&quot;);&#10;  });&#10;&#10;  runApp(MyApp());&#10;}&#10;&#10;class MyApp extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return MaterialApp(&#10;      debugShowCheckedModeBanner: false,&#10;      home: Scaffold(&#10;        appBar: AppBar(title: Text('FCM Test')),&#10;        body: Center(child: Text(&quot;FCM đang hoạt động!&quot;)),&#10;      ),&#10;    );&#10;  }&#10;}&#10;&#10;void main() {&#10;  runApp(&#10;    // ChangeNotifierProvider(&#10;    // create: (context) =&gt; ThemeProvider(),&#10;    const MyApp(),&#10;  );&#10;}&#10;&#10;// void main() async{&#10;//   String phone = '0383730311';&#10;//   String fullName = 'Nguyen Van A';&#10;//   String password = '111111';&#10;//   String email = 'trongc71@gmail.com';&#10;//   // Addresses address = Addresses(&#10;//   //   province: 'Hà Nội',&#10;//   //   district: 'Hà Đông',&#10;//   //   ward: 'Phú Lãm',&#10;//   //   detailedAddress: 'Số 123, Đường ABC',&#10;//   // );&#10;//&#10;//   var repository = DefaultRepository();&#10;//   var data = await repository.loginHelper(phone, password);&#10;//   print('Login data: ${data.toString()}');&#10;//   var requestData = await repository.loadCleanerData();&#10;//   print('Request data: ${requestData.toString()}');&#10;//   // var registerData = await repository.registerCustomer(&#10;//   //   '4795335132',&#10;//   //   password,&#10;//   //   fullName,&#10;//   //   email,&#10;//   //   Addresses(&#10;//   //     province: 'Hà Nội',&#10;//   //     district: 'Hà Đông',&#10;//   //     ward: 'Phú Lãm',&#10;//   //     detailedAddress: 'Số 123, Đường ABC',&#10;//   //   ),&#10;//   // );&#10;//   // print('Register data: ${registerData.toString()}');&#10;//   // var customerData = await repository.loadCustomerInfo(data!.user.phone, data.accessToken);&#10;//   // print('Customer data: ${customerData.toString()}');&#10;//   // var requestData = await repository.loadCustomerRequest(data.user.phone, data.accessToken);&#10;//   // print('Request data: ${requestData.toString()}');&#10;//   // var requestDetailData = await repository.loadCustomerRequest(phone, data!.accessToken);&#10;//   // print('Request detail data: ${requestDetailData?.first.schedules}');&#10;// }&#10;&#10;class MyApp extends StatelessWidget {&#10;  const MyApp({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return MaterialApp(&#10;      debugShowCheckedModeBanner: false,&#10;      // theme: context.watch&lt;ThemeProvider&gt;().themeData,&#10;      home: const SplashScreen(),&#10;      // home: HomePage(),``&#10;" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:firebase_core/firebase_core.dart';&#10;import 'package:firebase_messaging/firebase_messaging.dart';&#10;import 'package:overlay_support/overlay_support.dart';&#10;import 'package:homecare_helper/app_theme.dart';&#10;import 'package:homecare_helper/components/spash_screen.dart';&#10;import 'package:homecare_helper/pages/home_page.dart';&#10;import 'package:homecare_helper/firebase_options.dart';&#10;import 'package:homecare_helper/services/fcm_service.dart';&#10;import 'data/repository/repository.dart';&#10;&#10;// Global navigator key để FCM service có thể navigate&#10;final GlobalKey&lt;NavigatorState&gt; navigatorKey = GlobalKey&lt;NavigatorState&gt;();&#10;&#10;Future&lt;void&gt; _firebaseMessagingBackgroundHandler(RemoteMessage message) async {&#10;  await Firebase.initializeApp();&#10;  print(&quot; Nhận thông báo trong nền: ${message.notification?.title}&quot;);&#10;}&#10;&#10;void main() async {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;&#10;  // Khởi tạo Firebase&#10;  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);&#10;&#10;  // Cấu hình xử lý thông báo nền&#10;  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);&#10;&#10;  // Khởi tạo FCM service với callback để xử lý token&#10;  await FCMService.initialize(&#10;    onTokenReceived: (String token) async {&#10;      print(&quot; Đã nhận FCM Token: $token&quot;);&#10;&#10;      // TODO: Gửi token lên server của bạn khi user đăng nhập&#10;      // await FCMService.sendTokenToServer(token, userId: 'current_user_id');&#10;&#10;      // Subscribe to general topics&#10;      await FCMService.subscribeToTopic('general');&#10;      await FCMService.subscribeToTopic('homecare_updates');&#10;    },&#10;  );&#10;&#10;  // Set navigator key cho FCM service&#10;  FCMService.setNavigatorKey(navigatorKey);&#10;&#10;  runApp(MyApp());&#10;}&#10;&#10;class MyApp extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return OverlaySupport.global(&#10;      child: MaterialApp(&#10;        debugShowCheckedModeBanner: false,&#10;        title: 'HomeCare Helper',&#10;        theme: AppTheme.lightTheme,&#10;        home: SplashScreen(),&#10;        navigatorKey: navigatorKey,&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/pages/fcm_test_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/pages/fcm_test_page.dart" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter/services.dart';&#10;import 'package:homecare_helper/services/fcm_service.dart';&#10;&#10;class FCMTestPage extends StatefulWidget {&#10;  @override&#10;  _FCMTestPageState createState() =&gt; _FCMTestPageState();&#10;}&#10;&#10;class _FCMTestPageState extends State&lt;FCMTestPage&gt; {&#10;  String? _token;&#10;  bool _isLoading = false;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _loadToken();&#10;  }&#10;&#10;  Future&lt;void&gt; _loadToken() async {&#10;    setState(() =&gt; _isLoading = true);&#10;    try {&#10;      String? token = await FCMService.getToken();&#10;      setState(() {&#10;        _token = token;&#10;        _isLoading = false;&#10;      });&#10;    } catch (e) {&#10;      setState(() =&gt; _isLoading = false);&#10;      _showSnackBar('Lỗi khi lấy token: $e', Colors.red);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _refreshToken() async {&#10;    setState(() =&gt; _isLoading = true);&#10;    try {&#10;      String? newToken = await FCMService.refreshToken();&#10;      setState(() {&#10;        _token = newToken;&#10;        _isLoading = false;&#10;      });&#10;      _showSnackBar('Token đã được refresh thành công!', Colors.green);&#10;    } catch (e) {&#10;      setState(() =&gt; _isLoading = false);&#10;      _showSnackBar('Lỗi khi refresh token: $e', Colors.red);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _copyToken() async {&#10;    if (_token != null) {&#10;      await Clipboard.setData(ClipboardData(text: _token!));&#10;      _showSnackBar('Token đã được copy!', Colors.blue);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _subscribeToTopic() async {&#10;    await FCMService.subscribeToTopic('general');&#10;    _showSnackBar('Đã subscribe topic &quot;general&quot;', Colors.green);&#10;  }&#10;&#10;  Future&lt;void&gt; _unsubscribeFromTopic() async {&#10;    await FCMService.unsubscribeFromTopic('general');&#10;    _showSnackBar('Đã unsubscribe topic &quot;general&quot;', Colors.orange);&#10;  }&#10;&#10;  void _showSnackBar(String message, Color color) {&#10;    ScaffoldMessenger.of(context).showSnackBar(&#10;      SnackBar(&#10;        content: Text(message),&#10;        backgroundColor: color,&#10;        duration: Duration(seconds: 3),&#10;      ),&#10;    );&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: Text('FCM Test'),&#10;        backgroundColor: Colors.blue,&#10;        foregroundColor: Colors.white,&#10;      ),&#10;      body: Padding(&#10;        padding: EdgeInsets.all(16.0),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.stretch,&#10;          children: [&#10;            Card(&#10;              child: Padding(&#10;                padding: EdgeInsets.all(16.0),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      'FCM Token:',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    SizedBox(height: 8),&#10;                    if (_isLoading)&#10;                      Center(child: CircularProgressIndicator())&#10;                    else if (_token != null)&#10;                      Container(&#10;                        padding: EdgeInsets.all(12),&#10;                        decoration: BoxDecoration(&#10;                          color: Colors.grey[100],&#10;                          borderRadius: BorderRadius.circular(8),&#10;                          border: Border.all(color: Colors.grey[300]!),&#10;                        ),&#10;                        child: Text(&#10;                          _token!,&#10;                          style: TextStyle(&#10;                            fontSize: 12,&#10;                            fontFamily: 'monospace',&#10;                          ),&#10;                        ),&#10;                      )&#10;                    else&#10;                      Text(&#10;                        'Không thể lấy token',&#10;                        style: TextStyle(color: Colors.red),&#10;                      ),&#10;                    SizedBox(height: 16),&#10;                    Row(&#10;                      children: [&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _token != null ? _copyToken : null,&#10;                            icon: Icon(Icons.copy),&#10;                            label: Text('Copy Token'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.blue,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                        SizedBox(width: 8),&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _refreshToken,&#10;                            icon: Icon(Icons.refresh),&#10;                            label: Text('Refresh'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.green,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;            SizedBox(height: 16),&#10;            Card(&#10;              child: Padding(&#10;                padding: EdgeInsets.all(16.0),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      'Topic Management:',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    SizedBox(height: 16),&#10;                    Row(&#10;                      children: [&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _subscribeToTopic,&#10;                            icon: Icon(Icons.add_alert),&#10;                            label: Text('Subscribe'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.green,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                        SizedBox(width: 8),&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _unsubscribeFromTopic,&#10;                            icon: Icon(Icons.notifications_off),&#10;                            label: Text('Unsubscribe'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.orange,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;            SizedBox(height: 16),&#10;            Card(&#10;              child: Padding(&#10;                padding: EdgeInsets.all(16.0),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      'Hướng dẫn test FCM:',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    SizedBox(height: 8),&#10;                    Text(&#10;                      '1. Copy token ở trên\n'&#10;                      '2. Vào Firebase Console &gt; Cloud Messaging\n'&#10;                      '3. Tạo thông báo mới\n'&#10;                      '4. Paste token vào &quot;Device registration token&quot;\n'&#10;                      '5. Gửi thông báo test',&#10;                      style: TextStyle(fontSize: 14),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/services/fcm_service.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/services/fcm_service.dart" />
              <option name="originalContent" value="import 'dart:convert';&#10;import 'package:firebase_messaging/firebase_messaging.dart';&#10;import 'package:flutter/material.dart';&#10;import 'package:overlay_support/overlay_support.dart';&#10;import 'package:shared_preferences/shared_preferences.dart';&#10;&#10;class FCMService {&#10;  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;&#10;  static String? _currentToken;&#10;  static Function(String)? _onTokenReceived;&#10;  static GlobalKey&lt;NavigatorState&gt;? _navigatorKey;&#10;&#10;  // Getter để lấy token hiện tại&#10;  static String? get currentToken =&gt; _currentToken;&#10;&#10;  // Set navigator key để có thể navigate&#10;  static void setNavigatorKey(GlobalKey&lt;NavigatorState&gt; navigatorKey) {&#10;    _navigatorKey = navigatorKey;&#10;  }&#10;&#10;  // Khởi tạo FCM service&#10;  static Future&lt;void&gt; initialize({Function(String)? onTokenReceived}) async {&#10;    _onTokenReceived = onTokenReceived;&#10;&#10;    // Yêu cầu quyền thông báo&#10;    NotificationSettings settings = await _firebaseMessaging.requestPermission(&#10;      alert: true,&#10;      announcement: false,&#10;      badge: true,&#10;      carPlay: false,&#10;      criticalAlert: false,&#10;      provisional: false,&#10;      sound: true,&#10;    );&#10;&#10;    if (settings.authorizationStatus == AuthorizationStatus.authorized) {&#10;      print('✅ Người dùng đã cấp quyền thông báo');&#10;    } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {&#10;      print('⚠️ Người dùng đã cấp quyền thông báo tạm thời');&#10;    } else {&#10;      print('❌ Người dùng từ chối quyền thông báo');&#10;    }&#10;&#10;    // Lấy FCM token và lưu trữ&#10;    await _getAndStoreToken();&#10;&#10;    // Lắng nghe thông báo khi app đang mở&#10;    FirebaseMessaging.onMessage.listen(handleForegroundMessage);&#10;&#10;    // Lắng nghe khi người dùng tap vào thông báo&#10;    FirebaseMessaging.onMessageOpenedApp.listen(handleNotificationTap);&#10;&#10;    // Kiểm tra thông báo đã mở app (khi app đã tắt hoàn toàn)&#10;    RemoteMessage? initialMessage = await _firebaseMessaging.getInitialMessage();&#10;    if (initialMessage != null) {&#10;      handleNotificationTap(initialMessage);&#10;    }&#10;&#10;    // Lắng nghe token refresh&#10;    _firebaseMessaging.onTokenRefresh.listen((newToken) {&#10;      _currentToken = newToken;&#10;      _saveTokenToPrefs(newToken);&#10;      print(&quot; Token đã được refresh: $newToken&quot;);&#10;      if (_onTokenReceived != null) {&#10;        _onTokenReceived!(newToken);&#10;      }&#10;    });&#10;  }&#10;&#10;  // Lấy và lưu trữ token&#10;  static Future&lt;void&gt; _getAndStoreToken() async {&#10;    try {&#10;      String? token = await _firebaseMessaging.getToken();&#10;      if (token != null) {&#10;        _currentToken = token;&#10;        await _saveTokenToPrefs(token);&#10;        print(&quot; FCM Token: $token&quot;);&#10;        if (_onTokenReceived != null) {&#10;          _onTokenReceived!(token);&#10;        }&#10;      }&#10;    } catch (e) {&#10;      print('❌ Lỗi khi lấy FCM token: $e');&#10;    }&#10;  }&#10;&#10;  // Lưu token vào SharedPreferences&#10;  static Future&lt;void&gt; _saveTokenToPrefs(String token) async {&#10;    try {&#10;      final prefs = await SharedPreferences.getInstance();&#10;      await prefs.setString('fcm_token', token);&#10;    } catch (e) {&#10;      print('❌ Lỗi khi lưu token: $e');&#10;    }&#10;  }&#10;&#10;  // Lấy token từ SharedPreferences&#10;  static Future&lt;String?&gt; getTokenFromPrefs() async {&#10;    try {&#10;      final prefs = await SharedPreferences.getInstance();&#10;      return prefs.getString('fcm_token');&#10;    } catch (e) {&#10;      print('❌ Lỗi khi lấy token từ prefs: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  // Lấy FCM token&#10;  static Future&lt;String?&gt; getToken() async {&#10;    if (_currentToken != null) {&#10;      return _currentToken;&#10;    }&#10;&#10;    try {&#10;      String? token = await _firebaseMessaging.getToken();&#10;      if (token != null) {&#10;        _currentToken = token;&#10;        await _saveTokenToPrefs(token);&#10;      }&#10;      return token;&#10;    } catch (e) {&#10;      print('❌ Lỗi khi lấy FCM token: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  // Send token to server&#10;  static Future&lt;void&gt; sendTokenToServer(String token, {String? userId}) async {&#10;    try {&#10;      // TODO: Implement API call to send token to your server&#10;      print(' Gửi token lên server: $token');&#10;      // Example:&#10;      // await http.post(&#10;      //   Uri.parse('your-api-endpoint/fcm-token'),&#10;      //   headers: {'Content-Type': 'application/json'},&#10;      //   body: jsonEncode({'token': token, 'userId': userId}),&#10;      // );&#10;    } catch (e) {&#10;      print('❌ Lỗi khi gửi token lên server: $e');&#10;    }&#10;  }&#10;&#10;  // Refresh FCM token&#10;  static Future&lt;String?&gt; refreshToken() async {&#10;    try {&#10;      await _firebaseMessaging.deleteToken();&#10;      String? newToken = await _firebaseMessaging.getToken();&#10;      if (newToken != null) {&#10;        _currentToken = newToken;&#10;        await _saveTokenToPrefs(newToken);&#10;        print(&quot; Token mới: $newToken&quot;);&#10;        if (_onTokenReceived != null) {&#10;          _onTokenReceived!(newToken);&#10;        }&#10;      }&#10;      return newToken;&#10;    } catch (e) {&#10;      print('❌ Lỗi khi refresh token: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  // Subscribe to topic&#10;  static Future&lt;void&gt; subscribeToTopic(String topic) async {&#10;    try {&#10;      await _firebaseMessaging.subscribeToTopic(topic);&#10;      print('✅ Đã subscribe topic: $topic');&#10;    } catch (e) {&#10;      print('❌ Lỗi khi subscribe topic $topic: $e');&#10;    }&#10;  }&#10;&#10;  // Unsubscribe from topic&#10;  static Future&lt;void&gt; unsubscribeFromTopic(String topic) async {&#10;    try {&#10;      await _firebaseMessaging.unsubscribeFromTopic(topic);&#10;      print('✅ Đã unsubscribe topic: $topic');&#10;    } catch (e) {&#10;      print('❌ Lỗi khi unsubscribe topic $topic: $e');&#10;    }&#10;  }&#10;&#10;  // Xử lý thông báo khi app đang mở&#10;  static void handleForegroundMessage(RemoteMessage message) {&#10;    print(&quot; Thông báo foreground: ${message.notification?.title}&quot;);&#10;&#10;    // Hiển thị thông báo overlay&#10;    if (message.notification != null) {&#10;      showSimpleNotification(&#10;        Text(message.notification!.title ?? 'Thông báo'),&#10;        subtitle: Text(message.notification!.body ?? ''),&#10;        background: Colors.blue,&#10;        duration: Duration(seconds: 4),&#10;        leading: Icon(&#10;          Icons.notifications,&#10;          color: Colors.white,&#10;        ),&#10;        trailing: TextButton(&#10;          onPressed: () {&#10;            // Dismiss the notification overlay&#10;            if (_navigatorKey?.currentContext != null) {&#10;              OverlaySupportEntry.of(_navigatorKey!.currentContext!)?.dismiss();&#10;            }&#10;            _handleDataPayload(message.data);&#10;          },&#10;          child: Text(&#10;            'Xem',&#10;            style: TextStyle(color: Colors.white),&#10;          ),&#10;        ),&#10;      );&#10;    }&#10;&#10;    // Xử lý data payload nếu có&#10;    if (message.data.isNotEmpty) {&#10;      print(&quot; Data payload: ${message.data}&quot;);&#10;    }&#10;  }&#10;&#10;  // Xử lý khi người dùng tap vào thông báo&#10;  static void handleNotificationTap(RemoteMessage message) {&#10;    print(&quot; Người dùng bấm vào thông báo: ${message.notification?.title}&quot;);&#10;&#10;    // Xử lý navigation hoặc action dựa trên data&#10;    if (message.data.isNotEmpty) {&#10;      _handleDataPayload(message.data);&#10;    }&#10;  }&#10;&#10;  // Xử lý data payload&#10;  static void _handleDataPayload(Map&lt;String, dynamic&gt; data) {&#10;    if (_navigatorKey?.currentContext == null) return;&#10;&#10;    // Ví dụ xử lý các loại thông báo khác nhau&#10;    String? type = data['type'];&#10;    String? targetScreen = data['screen'];&#10;&#10;    switch (type) {&#10;      case 'booking':&#10;        print(' Thông báo booking mới');&#10;        // Navigate to booking screen&#10;        // _navigatorKey!.currentState?.pushNamed('/booking');&#10;        break;&#10;      case 'message':&#10;        print(' Tin nhắn mới');&#10;        // Navigate to chat screen&#10;        // _navigatorKey!.currentState?.pushNamed('/chat');&#10;        break;&#10;      case 'reminder':&#10;        print('⏰ Nhắc nhở');&#10;        // Show reminder dialog&#10;        _showReminderDialog(data);&#10;        break;&#10;      case 'update':&#10;        print(' Cập nhật ứng dụng');&#10;        // Show update dialog&#10;        break;&#10;      default:&#10;        print(' Thông báo chung: $data');&#10;        break;&#10;    }&#10;  }&#10;&#10;  // Hiển thị dialog nhắc nhở&#10;  static void _showReminderDialog(Map&lt;String, dynamic&gt; data) {&#10;    if (_navigatorKey?.currentContext == null) return;&#10;&#10;    showDialog(&#10;      context: _navigatorKey!.currentContext!,&#10;      builder: (context) =&gt; AlertDialog(&#10;        title: Text('Nhắc nhở'),&#10;        content: Text(data['message'] ?? 'Bạn có một nhắc nhở mới'),&#10;        actions: [&#10;          TextButton(&#10;            onPressed: () =&gt; Navigator.of(context).pop(),&#10;            child: Text('Đóng'),&#10;          ),&#10;          if (data['action'] != null)&#10;            TextButton(&#10;              onPressed: () {&#10;                Navigator.of(context).pop();&#10;                // Xử lý action&#10;              },&#10;              child: Text('Xem chi tiết'),&#10;            ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  // Clear token (logout)&#10;  static Future&lt;void&gt; clearToken() async {&#10;    try {&#10;      await _firebaseMessaging.deleteToken();&#10;      _currentToken = null;&#10;      final prefs = await SharedPreferences.getInstance();&#10;      await prefs.remove('fcm_token');&#10;      print('️ Đã xóa FCM token');&#10;    } catch (e) {&#10;      print('❌ Lỗi khi xóa token: $e');&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'dart:convert';&#10;import 'package:firebase_messaging/firebase_messaging.dart';&#10;import 'package:flutter/material.dart';&#10;import 'package:overlay_support/overlay_support.dart';&#10;import 'package:shared_preferences/shared_preferences.dart';&#10;&#10;class FCMService {&#10;  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;&#10;  static String? _currentToken;&#10;  static Function(String)? _onTokenReceived;&#10;  static GlobalKey&lt;NavigatorState&gt;? _navigatorKey;&#10;&#10;  // Getter để lấy token hiện tại&#10;  static String? get currentToken =&gt; _currentToken;&#10;&#10;  // Set navigator key để có thể navigate&#10;  static void setNavigatorKey(GlobalKey&lt;NavigatorState&gt; navigatorKey) {&#10;    _navigatorKey = navigatorKey;&#10;  }&#10;&#10;  // Khởi tạo FCM service&#10;  static Future&lt;void&gt; initialize({Function(String)? onTokenReceived}) async {&#10;    _onTokenReceived = onTokenReceived;&#10;&#10;    // Yêu cầu quyền thông báo&#10;    NotificationSettings settings = await _firebaseMessaging.requestPermission(&#10;      alert: true,&#10;      announcement: false,&#10;      badge: true,&#10;      carPlay: false,&#10;      criticalAlert: false,&#10;      provisional: false,&#10;      sound: true,&#10;    );&#10;&#10;    if (settings.authorizationStatus == AuthorizationStatus.authorized) {&#10;      print('✅ Người dùng đã cấp quyền thông báo');&#10;    } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {&#10;      print('⚠️ Người dùng đã cấp quyền thông báo tạm thời');&#10;    } else {&#10;      print('❌ Người dùng từ chối quyền thông báo');&#10;    }&#10;&#10;    // Lấy FCM token và lưu trữ&#10;    await _getAndStoreToken();&#10;&#10;    // Lắng nghe thông báo khi app đang mở&#10;    FirebaseMessaging.onMessage.listen(handleForegroundMessage);&#10;&#10;    // Lắng nghe khi người dùng tap vào thông báo&#10;    FirebaseMessaging.onMessageOpenedApp.listen(handleNotificationTap);&#10;&#10;    // Kiểm tra thông báo đã mở app (khi app đã tắt hoàn toàn)&#10;    RemoteMessage? initialMessage = await _firebaseMessaging.getInitialMessage();&#10;    if (initialMessage != null) {&#10;      handleNotificationTap(initialMessage);&#10;    }&#10;&#10;    // Lắng nghe token refresh&#10;    _firebaseMessaging.onTokenRefresh.listen((newToken) {&#10;      _currentToken = newToken;&#10;      _saveTokenToPrefs(newToken);&#10;      print(&quot; Token đã được refresh: $newToken&quot;);&#10;      if (_onTokenReceived != null) {&#10;        _onTokenReceived!(newToken);&#10;      }&#10;    });&#10;  }&#10;&#10;  // Lấy và lưu trữ token&#10;  static Future&lt;void&gt; _getAndStoreToken() async {&#10;    try {&#10;      String? token = await _firebaseMessaging.getToken();&#10;      if (token != null) {&#10;        _currentToken = token;&#10;        await _saveTokenToPrefs(token);&#10;        print(&quot; FCM Token: $token&quot;);&#10;        if (_onTokenReceived != null) {&#10;          _onTokenReceived!(token);&#10;        }&#10;      }&#10;    } catch (e) {&#10;      print('❌ Lỗi khi lấy FCM token: $e');&#10;    }&#10;  }&#10;&#10;  // Lưu token vào SharedPreferences&#10;  static Future&lt;void&gt; _saveTokenToPrefs(String token) async {&#10;    try {&#10;      final prefs = await SharedPreferences.getInstance();&#10;      await prefs.setString('fcm_token', token);&#10;    } catch (e) {&#10;      print('❌ Lỗi khi lưu token: $e');&#10;    }&#10;  }&#10;&#10;  // Lấy token từ SharedPreferences&#10;  static Future&lt;String?&gt; getTokenFromPrefs() async {&#10;    try {&#10;      final prefs = await SharedPreferences.getInstance();&#10;      return prefs.getString('fcm_token');&#10;    } catch (e) {&#10;      print('❌ Lỗi khi lấy token từ prefs: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  // Lấy FCM token&#10;  static Future&lt;String?&gt; getToken() async {&#10;    if (_currentToken != null) {&#10;      return _currentToken;&#10;    }&#10;&#10;    try {&#10;      String? token = await _firebaseMessaging.getToken();&#10;      if (token != null) {&#10;        _currentToken = token;&#10;        await _saveTokenToPrefs(token);&#10;      }&#10;      return token;&#10;    } catch (e) {&#10;      print('❌ Lỗi khi lấy FCM token: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  // Send token to server&#10;  static Future&lt;void&gt; sendTokenToServer(String token, {String? userId}) async {&#10;    try {&#10;      // TODO: Implement API call to send token to your server&#10;      print(' Gửi token lên server: $token');&#10;      // Example:&#10;      // await http.post(&#10;      //   Uri.parse('your-api-endpoint/fcm-token'),&#10;      //   headers: {'Content-Type': 'application/json'},&#10;      //   body: jsonEncode({'token': token, 'userId': userId}),&#10;      // );&#10;    } catch (e) {&#10;      print('❌ Lỗi khi gửi token lên server: $e');&#10;    }&#10;  }&#10;&#10;  // Refresh FCM token&#10;  static Future&lt;String?&gt; refreshToken() async {&#10;    try {&#10;      await _firebaseMessaging.deleteToken();&#10;      String? newToken = await _firebaseMessaging.getToken();&#10;      if (newToken != null) {&#10;        _currentToken = newToken;&#10;        await _saveTokenToPrefs(newToken);&#10;        print(&quot; Token mới: $newToken&quot;);&#10;        if (_onTokenReceived != null) {&#10;          _onTokenReceived!(newToken);&#10;        }&#10;      }&#10;      return newToken;&#10;    } catch (e) {&#10;      print('❌ Lỗi khi refresh token: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  // Subscribe to topic&#10;  static Future&lt;void&gt; subscribeToTopic(String topic) async {&#10;    try {&#10;      await _firebaseMessaging.subscribeToTopic(topic);&#10;      print('✅ Đã subscribe topic: $topic');&#10;    } catch (e) {&#10;      print('❌ Lỗi khi subscribe topic $topic: $e');&#10;    }&#10;  }&#10;&#10;  // Unsubscribe from topic&#10;  static Future&lt;void&gt; unsubscribeFromTopic(String topic) async {&#10;    try {&#10;      await _firebaseMessaging.unsubscribeFromTopic(topic);&#10;      print('✅ Đã unsubscribe topic: $topic');&#10;    } catch (e) {&#10;      print('❌ Lỗi khi unsubscribe topic $topic: $e');&#10;    }&#10;  }&#10;&#10;  // Xử lý thông báo khi app đang mở&#10;  static void handleForegroundMessage(RemoteMessage message) {&#10;    print(&quot; Thông báo foreground: ${message.notification?.title}&quot;);&#10;&#10;    // Hiển thị thông báo overlay với logo app&#10;    if (message.notification != null) {&#10;      showSimpleNotification(&#10;        Text(&#10;          message.notification!.title ?? 'Thông báo',&#10;          style: TextStyle(&#10;            fontWeight: FontWeight.bold,&#10;            fontSize: 16,&#10;            color: Colors.green.shade800,&#10;          ),&#10;        ),&#10;        subtitle: Text(&#10;          message.notification!.body ?? '',&#10;          style: TextStyle(&#10;            fontSize: 14,&#10;            color: Colors.green.shade600,&#10;          ),&#10;        ),&#10;        background: Colors.white,&#10;        duration: Duration(seconds: 5),&#10;        leading: Container(&#10;          width: 40,&#10;          height: 40,&#10;          decoration: BoxDecoration(&#10;            color: Colors.green.shade50,&#10;            borderRadius: BorderRadius.circular(20),&#10;            border: Border.all(&#10;              color: Colors.green.shade200,&#10;              width: 2,&#10;            ),&#10;            boxShadow: [&#10;              BoxShadow(&#10;                color: Colors.green.shade100,&#10;                blurRadius: 8,&#10;                offset: Offset(0, 2),&#10;              ),&#10;            ],&#10;          ),&#10;          child: ClipRRect(&#10;            borderRadius: BorderRadius.circular(18),&#10;            child: Image.asset(&#10;              'lib/images/logo_noti.png',&#10;              width: 35,&#10;              height: 35,&#10;              fit: BoxFit.contain,&#10;              errorBuilder: (context, error, stackTrace) {&#10;                return Icon(&#10;                  Icons.notifications,&#10;                  color: Colors.green.shade600,&#10;                  size: 24,&#10;                );&#10;              },&#10;            ),&#10;          ),&#10;        ),&#10;        trailing: Container(&#10;          decoration: BoxDecoration(&#10;            color: Colors.green.shade600,&#10;            borderRadius: BorderRadius.circular(15),&#10;          ),&#10;          child: TextButton(&#10;            onPressed: () {&#10;              // Dismiss the notification overlay&#10;              if (_navigatorKey?.currentContext != null) {&#10;                OverlaySupportEntry.of(_navigatorKey!.currentContext!)?.dismiss();&#10;              }&#10;              _handleDataPayload(message.data);&#10;            },&#10;            child: Text(&#10;              'Xem',&#10;              style: TextStyle(&#10;                color: Colors.white,&#10;                fontWeight: FontWeight.bold,&#10;                fontSize: 13,&#10;              ),&#10;            ),&#10;          ),&#10;        ),&#10;      );&#10;    }&#10;&#10;    // Xử lý data payload nếu có&#10;    if (message.data.isNotEmpty) {&#10;      print(&quot; Data payload: ${message.data}&quot;);&#10;    }&#10;  }&#10;&#10;  // Xử lý khi người dùng tap vào thông báo&#10;  static void handleNotificationTap(RemoteMessage message) {&#10;    print(&quot; Người dùng bấm vào thông báo: ${message.notification?.title}&quot;);&#10;&#10;    // Xử lý navigation hoặc action dựa trên data&#10;    if (message.data.isNotEmpty) {&#10;      _handleDataPayload(message.data);&#10;    }&#10;  }&#10;&#10;  // Xử lý data payload&#10;  static void _handleDataPayload(Map&lt;String, dynamic&gt; data) {&#10;    if (_navigatorKey?.currentContext == null) return;&#10;&#10;    // Ví dụ xử lý các loại thông báo khác nhau&#10;    String? type = data['type'];&#10;    String? targetScreen = data['screen'];&#10;&#10;    switch (type) {&#10;      case 'booking':&#10;        print(' Thông báo booking mới');&#10;        // Navigate to booking screen&#10;        // _navigatorKey!.currentState?.pushNamed('/booking');&#10;        break;&#10;      case 'message':&#10;        print(' Tin nhắn mới');&#10;        // Navigate to chat screen&#10;        // _navigatorKey!.currentState?.pushNamed('/chat');&#10;        break;&#10;      case 'reminder':&#10;        print('⏰ Nhắc nhở');&#10;        // Show reminder dialog&#10;        _showReminderDialog(data);&#10;        break;&#10;      case 'update':&#10;        print(' Cập nhật ứng dụng');&#10;        // Show update dialog&#10;        break;&#10;      default:&#10;        print(' Thông báo chung: $data');&#10;        break;&#10;    }&#10;  }&#10;&#10;  // Hiển thị dialog nhắc nhở&#10;  static void _showReminderDialog(Map&lt;String, dynamic&gt; data) {&#10;    if (_navigatorKey?.currentContext == null) return;&#10;&#10;    showDialog(&#10;      context: _navigatorKey!.currentContext!,&#10;      builder: (context) =&gt; AlertDialog(&#10;        title: Text('Nhắc nhở'),&#10;        content: Text(data['message'] ?? 'Bạn có một nhắc nhở mới'),&#10;        actions: [&#10;          TextButton(&#10;            onPressed: () =&gt; Navigator.of(context).pop(),&#10;            child: Text('Đóng'),&#10;          ),&#10;          if (data['action'] != null)&#10;            TextButton(&#10;              onPressed: () {&#10;                Navigator.of(context).pop();&#10;                // Xử lý action&#10;              },&#10;              child: Text('Xem chi tiết'),&#10;            ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  // Clear token (logout)&#10;  static Future&lt;void&gt; clearToken() async {&#10;    try {&#10;      await _firebaseMessaging.deleteToken();&#10;      _currentToken = null;&#10;      final prefs = await SharedPreferences.getInstance();&#10;      await prefs.remove('fcm_token');&#10;      print('️ Đã xóa FCM token');&#10;    } catch (e) {&#10;      print('❌ Lỗi khi xóa token: $e');&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/services/firebase_messaging_service.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/services/firebase_messaging_service.dart" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pubspec.yaml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pubspec.yaml" />
              <option name="originalContent" value="name: homecare_helper&#10;description: &quot;HomeCare Services Application&quot;&#10;# The following line prevents the package from being accidentally published to&#10;# pub.dev using `flutter pub publish`. This is preferred for private packages.&#10;publish_to: 'none' # Remove this line if you wish to publish to pub.dev&#10;&#10;# The following defines the version and build number for your application.&#10;# A version number is three numbers separated by dots, like 1.2.43&#10;# followed by an optional build number separated by a +.&#10;# Both the version and the builder number may be overridden in flutter&#10;# build by specifying --build-name and --build-number, respectively.&#10;# In Android, build-name is used as versionName while build-number used as versionCode.&#10;# Read more about Android versioning at https://developer.android.com/studio/publish/versioning&#10;# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.&#10;# Read more about iOS versioning at&#10;# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html&#10;# In Windows, build-name is used as the major, minor, and patch parts&#10;# of the product and file versions while build-number is used as the build suffix.&#10;version: 1.0.0+1&#10;&#10;environment:&#10;  sdk: ^3.5.0&#10;&#10;# Dependencies specify other packages that your package needs in order to work.&#10;# To automatically upgrade your package dependencies to the latest versions&#10;# consider running `flutter pub upgrade --major-versions`. Alternatively,&#10;# dependencies can be manually updated by changing the version numbers below to&#10;# the latest version available on pub.dev. To see which dependencies have newer&#10;# versions available, run `flutter pub outdated`.&#10;dependencies:&#10;  flutter:&#10;    sdk: flutter&#10;  provider: ^6.1.2&#10;  google_nav_bar: ^5.0.6&#10;  curved_navigation_bar: 1.0.6  &#10;  # The following adds the Cupertino Icons font to your application.&#10;  # Use with the CupertinoIcons class for iOS style icons.&#10;  cupertino_icons: ^1.0.8&#10;  collection: ^1.18.0&#10;  http: ^1.2.2&#10;  intl: ^0.20.1&#10;  percent_indicator: ^4.2.3&#10;  awesome_dialog: ^3.2.1&#10;  table_calendar: ^3.0.9&#10;  syncfusion_flutter_calendar: ^28.1.41&#10;  syncfusion_flutter_datepicker: ^28.1.41&#10;  carousel_slider: ^5.0.0&#10;  smooth_page_indicator: ^1.0.0+2&#10;  flutter_staggered_grid_view: ^0.7.0&#10;  dropdown_button2: ^2.3.9&#10;  animations: ^2.0.11&#10;  flutter_launcher_icons: ^0.14.3&#10;  horizontal_date_picker_flutter: ^0.0.1&#10;  convex_bottom_bar: ^3.2.0&#10;  salomon_bottom_bar: ^3.3.2&#10;  lottie: ^3.3.1&#10;  cached_network_image: ^3.4.1&#10;  flutter_staggered_animations: ^1.1.1&#10;  path_provider: ^2.1.5&#10;  shimmer: ^3.0.0&#10;  dropdown_search: ^6.0.2&#10;  web_socket_channel: ^3.0.2&#10;  # Firebase dependencies&#10;  firebase_core: ^2.30.0&#10;  firebase_messaging: ^14.7.10&#10;  overlay_support: ^2.1.0&#10;&#10;&#10;flutter_launcher_icons:&#10;  android: true&#10;  ios: true&#10;  image_path: &quot;lib/images/logohelper.png&quot;  # Đổi thành đường dẫn icon của bạn&#10;  adaptive_icon_background: &quot;#ffffff&quot;  # Màu nền adaptive icon (Android)&#10;  adaptive_icon_foreground: &quot;lib/images/logohelper.png&quot;  # Adaptive icon foreground&#10;&#10;&#10;dev_dependencies:&#10;  flutter_test:&#10;    sdk: flutter&#10;&#10;  # The &quot;flutter_lints&quot; package below contains a set of recommended lints to&#10;  # encourage good coding practices. The lint set provided by the package is&#10;  # activated in the `analysis_options.yaml` file located at the root of your&#10;  # package. See that file for information about deactivating specific lint&#10;  # rules and activating additional ones.&#10;  flutter_lints: ^5.0.0&#10;&#10;# For information on the generic Dart part of this file, see the&#10;# following page: https://dart.dev/tools/pub/pubspec&#10;&#10;# The following section is specific to Flutter packages.&#10;flutter:&#10;&#10;  # The following line ensures that the Material Icons font is&#10;  # included with your application, so that you can use the icons in&#10;  # the material Icons class.&#10;  uses-material-design: true&#10;&#10;  # To add assets to your application, add an assets section, like this:&#10;  assets:&#10;    - lib/images/logo2.png&#10;    - lib/images/logo.png&#10;    - lib/images/logohelper.png&#10;    - lib/images/background.png&#10;    - lib/images/banner_1.png&#10;    - lib/images/banner_2.png&#10;    - lib/images/banner_3.png&#10;    - lib/images/avt.png&#10;    - lib/images/services/&#10;    - lib/images/staff/&#10;    - lib/images/logo_noti.png&#10;    - lib/images/delay/home.png&#10;    - lib/images/delay/la1.png&#10;    - lib/images/delay/la2.png&#10;    - lib/images/delay/la3.png&#10;    - lib/images/delay/la4.png&#10;    - lib/images/delay/homecare.png&#10;    - lib/images/delay/hand.png&#10;    - lib/images/delay/line.png&#10;    - lib/images/payment/momo.jpg&#10;    - lib/images/payment/vietcombank.jpg&#10;    - lib/images/payment/vnpay.jpg&#10;    - lib/images/vnpay.png&#10;    - lib/images/momo.png&#10;    - lib/images/loading.json&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;  #   - images/a_dot_ham.jpeg&#10;&#10;  # An image asset can refer to one or more resolution-specific &quot;variants&quot;, see&#10;  # https://flutter.dev/to/resolution-aware-images&#10;&#10;  # For details regarding adding assets from package dependencies, see&#10;  # https://flutter.dev/to/asset-from-package&#10;&#10;  # To add custom fonts to your application, add a fonts section here,&#10;  # in this &quot;flutter&quot; section. Each entry in this list should have a&#10;  # &quot;family&quot; key with the font family name, and a &quot;fonts&quot; key with a&#10;  # list giving the asset and other descriptors for the font. For&#10;  # example:&#10;  fonts:&#10;    - family: Nunito&#10;      fonts:&#10;        - asset: lib/images/fonts/Nunito.ttf&#10;        - asset: lib/images/fonts/Nunito-italic.ttf&#10;          weight: 700&#10;          style: italic&#10;    - family: Quicksand&#10;      fonts:&#10;        - asset: lib/images/fonts/Quicksand-Light.ttf&#10;        - asset: lib/images/fonts/Quicksand-Medium.ttf&#10;        - asset: lib/images/fonts/Quicksand-Bold.ttf&#10;        - asset: lib/images/fonts/Quicksand-SemiBold.ttf&#10;  &#10;  # For details regarding fonts from package dependencies,&#10;  # see https://flutter.dev/to/font-from-package&#10;" />
              <option name="updatedContent" value="name: homecare_helper&#10;description: &quot;HomeCare Services Application&quot;&#10;# The following line prevents the package from being accidentally published to&#10;# pub.dev using `flutter pub publish`. This is preferred for private packages.&#10;publish_to: 'none' # Remove this line if you wish to publish to pub.dev&#10;&#10;# The following defines the version and build number for your application.&#10;# A version number is three numbers separated by dots, like 1.2.43&#10;# followed by an optional build number separated by a +.&#10;# Both the version and the builder number may be overridden in flutter&#10;# build by specifying --build-name and --build-number, respectively.&#10;# In Android, build-name is used as versionName while build-number used as versionCode.&#10;# Read more about Android versioning at https://developer.android.com/studio/publish/versioning&#10;# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.&#10;# Read more about iOS versioning at&#10;# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html&#10;# In Windows, build-name is used as the major, minor, and patch parts&#10;# of the product and file versions while build-number is used as the build suffix.&#10;version: 1.0.0+1&#10;&#10;environment:&#10;  sdk: ^3.5.0&#10;&#10;# Dependencies specify other packages that your package needs in order to work.&#10;# To automatically upgrade your package dependencies to the latest versions&#10;# consider running `flutter pub upgrade --major-versions`. Alternatively,&#10;# dependencies can be manually updated by changing the version numbers below to&#10;# the latest version available on pub.dev. To see which dependencies have newer&#10;# versions available, run `flutter pub outdated`.&#10;dependencies:&#10;  flutter:&#10;    sdk: flutter&#10;  provider: ^6.1.2&#10;  google_nav_bar: ^5.0.6&#10;  curved_navigation_bar: 1.0.6  &#10;  # The following adds the Cupertino Icons font to your application.&#10;  # Use with the CupertinoIcons class for iOS style icons.&#10;  cupertino_icons: ^1.0.8&#10;  collection: ^1.18.0&#10;  http: ^1.2.2&#10;  intl: ^0.20.1&#10;  percent_indicator: ^4.2.3&#10;  awesome_dialog: ^3.2.1&#10;  table_calendar: ^3.0.9&#10;  syncfusion_flutter_calendar: ^28.1.41&#10;  syncfusion_flutter_datepicker: ^28.1.41&#10;  carousel_slider: ^5.0.0&#10;  smooth_page_indicator: ^1.0.0+2&#10;  flutter_staggered_grid_view: ^0.7.0&#10;  dropdown_button2: ^2.3.9&#10;  animations: ^2.0.11&#10;  flutter_launcher_icons: ^0.14.3&#10;  horizontal_date_picker_flutter: ^0.0.1&#10;  convex_bottom_bar: ^3.2.0&#10;  salomon_bottom_bar: ^3.3.2&#10;  lottie: ^3.3.1&#10;  cached_network_image: ^3.4.1&#10;  flutter_staggered_animations: ^1.1.1&#10;  path_provider: ^2.1.5&#10;  shimmer: ^3.0.0&#10;  dropdown_search: ^6.0.2&#10;  web_socket_channel: ^3.0.2&#10;  # Firebase dependencies&#10;  firebase_core: ^2.30.0&#10;  firebase_messaging: ^14.7.10&#10;  overlay_support: ^2.1.0&#10;  shared_preferences: ^2.3.2&#10;&#10;&#10;flutter_launcher_icons:&#10;  android: true&#10;  ios: true&#10;  image_path: &quot;lib/images/logohelper.png&quot;  # Đổi thành đường dẫn icon của bạn&#10;  adaptive_icon_background: &quot;#ffffff&quot;  # Màu nền adaptive icon (Android)&#10;  adaptive_icon_foreground: &quot;lib/images/logohelper.png&quot;  # Adaptive icon foreground&#10;&#10;&#10;dev_dependencies:&#10;  flutter_test:&#10;    sdk: flutter&#10;&#10;  # The &quot;flutter_lints&quot; package below contains a set of recommended lints to&#10;  # encourage good coding practices. The lint set provided by the package is&#10;  # activated in the `analysis_options.yaml` file located at the root of your&#10;  # package. See that file for information about deactivating specific lint&#10;  # rules and activating additional ones.&#10;  flutter_lints: ^5.0.0&#10;&#10;# For information on the generic Dart part of this file, see the&#10;# following page: https://dart.dev/tools/pub/pubspec&#10;&#10;# The following section is specific to Flutter packages.&#10;flutter:&#10;&#10;  # The following line ensures that the Material Icons font is&#10;  # included with your application, so that you can use the icons in&#10;  # the material Icons class.&#10;  uses-material-design: true&#10;&#10;  # To add assets to your application, add an assets section, like this:&#10;  assets:&#10;    - lib/images/logo2.png&#10;    - lib/images/logo.png&#10;    - lib/images/logohelper.png&#10;    - lib/images/background.png&#10;    - lib/images/banner_1.png&#10;    - lib/images/banner_2.png&#10;    - lib/images/banner_3.png&#10;    - lib/images/avt.png&#10;    - lib/images/services/&#10;    - lib/images/staff/&#10;    - lib/images/logo_noti.png&#10;    - lib/images/delay/home.png&#10;    - lib/images/delay/la1.png&#10;    - lib/images/delay/la2.png&#10;    - lib/images/delay/la3.png&#10;    - lib/images/delay/la4.png&#10;    - lib/images/delay/homecare.png&#10;    - lib/images/delay/hand.png&#10;    - lib/images/delay/line.png&#10;    - lib/images/payment/momo.jpg&#10;    - lib/images/payment/vietcombank.jpg&#10;    - lib/images/payment/vnpay.jpg&#10;    - lib/images/vnpay.png&#10;    - lib/images/momo.png&#10;    - lib/images/loading.json&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;  #   - images/a_dot_ham.jpeg&#10;&#10;  # An image asset can refer to one or more resolution-specific &quot;variants&quot;, see&#10;  # https://flutter.dev/to/resolution-aware-images&#10;&#10;  # For details regarding adding assets from package dependencies, see&#10;  # https://flutter.dev/to/asset-from-package&#10;&#10;  # To add custom fonts to your application, add a fonts section here,&#10;  # in this &quot;flutter&quot; section. Each entry in this list should have a&#10;  # &quot;family&quot; key with the font family name, and a &quot;fonts&quot; key with a&#10;  # list giving the asset and other descriptors for the font. For&#10;  # example:&#10;  fonts:&#10;    - family: Nunito&#10;      fonts:&#10;        - asset: lib/images/fonts/Nunito.ttf&#10;        - asset: lib/images/fonts/Nunito-italic.ttf&#10;          weight: 700&#10;          style: italic&#10;    - family: Quicksand&#10;      fonts:&#10;        - asset: lib/images/fonts/Quicksand-Light.ttf&#10;        - asset: lib/images/fonts/Quicksand-Medium.ttf&#10;        - asset: lib/images/fonts/Quicksand-Bold.ttf&#10;        - asset: lib/images/fonts/Quicksand-SemiBold.ttf&#10;  &#10;  # For details regarding fonts from package dependencies,&#10;  # see https://flutter.dev/to/font-from-package" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>