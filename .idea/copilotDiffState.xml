<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/android/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/android/app/src/main/res/values/colors.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/pages/fcm_test_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/pages/fcm_test_page.dart" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter/services.dart';&#10;import 'package:homecare_helper/services/fcm_service.dart';&#10;&#10;class FCMTestPage extends StatefulWidget {&#10;  @override&#10;  _FCMTestPageState createState() =&gt; _FCMTestPageState();&#10;}&#10;&#10;class _FCMTestPageState extends State&lt;FCMTestPage&gt; {&#10;  String? _token;&#10;  bool _isLoading = false;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _loadToken();&#10;  }&#10;&#10;  Future&lt;void&gt; _loadToken() async {&#10;    setState(() =&gt; _isLoading = true);&#10;    try {&#10;      String? token = await FCMService.getToken();&#10;      setState(() {&#10;        _token = token;&#10;        _isLoading = false;&#10;      });&#10;    } catch (e) {&#10;      setState(() =&gt; _isLoading = false);&#10;      _showSnackBar('Lỗi khi lấy token: $e', Colors.red);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _refreshToken() async {&#10;    setState(() =&gt; _isLoading = true);&#10;    try {&#10;      String? newToken = await FCMService.refreshToken();&#10;      setState(() {&#10;        _token = newToken;&#10;        _isLoading = false;&#10;      });&#10;      _showSnackBar('Token đã được refresh thành công!', Colors.green);&#10;    } catch (e) {&#10;      setState(() =&gt; _isLoading = false);&#10;      _showSnackBar('Lỗi khi refresh token: $e', Colors.red);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _copyToken() async {&#10;    if (_token != null) {&#10;      await Clipboard.setData(ClipboardData(text: _token!));&#10;      _showSnackBar('Token đã được copy!', Colors.blue);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _subscribeToTopic() async {&#10;    await FCMService.subscribeToTopic('general');&#10;    _showSnackBar('Đã subscribe topic &quot;general&quot;', Colors.green);&#10;  }&#10;&#10;  Future&lt;void&gt; _unsubscribeFromTopic() async {&#10;    await FCMService.unsubscribeFromTopic('general');&#10;    _showSnackBar('Đã unsubscribe topic &quot;general&quot;', Colors.orange);&#10;  }&#10;&#10;  void _showSnackBar(String message, Color color) {&#10;    ScaffoldMessenger.of(context).showSnackBar(&#10;      SnackBar(&#10;        content: Text(message),&#10;        backgroundColor: color,&#10;        duration: Duration(seconds: 3),&#10;      ),&#10;    );&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: Text('FCM Test'),&#10;        backgroundColor: Colors.blue,&#10;        foregroundColor: Colors.white,&#10;      ),&#10;      body: Padding(&#10;        padding: EdgeInsets.all(16.0),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.stretch,&#10;          children: [&#10;            Card(&#10;              child: Padding(&#10;                padding: EdgeInsets.all(16.0),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      'FCM Token:',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    SizedBox(height: 8),&#10;                    if (_isLoading)&#10;                      Center(child: CircularProgressIndicator())&#10;                    else if (_token != null)&#10;                      Container(&#10;                        padding: EdgeInsets.all(12),&#10;                        decoration: BoxDecoration(&#10;                          color: Colors.grey[100],&#10;                          borderRadius: BorderRadius.circular(8),&#10;                          border: Border.all(color: Colors.grey[300]!),&#10;                        ),&#10;                        child: Text(&#10;                          _token!,&#10;                          style: TextStyle(&#10;                            fontSize: 12,&#10;                            fontFamily: 'monospace',&#10;                          ),&#10;                        ),&#10;                      )&#10;                    else&#10;                      Text(&#10;                        'Không thể lấy token',&#10;                        style: TextStyle(color: Colors.red),&#10;                      ),&#10;                    SizedBox(height: 16),&#10;                    Row(&#10;                      children: [&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _token != null ? _copyToken : null,&#10;                            icon: Icon(Icons.copy),&#10;                            label: Text('Copy Token'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.blue,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                        SizedBox(width: 8),&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _refreshToken,&#10;                            icon: Icon(Icons.refresh),&#10;                            label: Text('Refresh'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.green,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;            SizedBox(height: 16),&#10;            Card(&#10;              child: Padding(&#10;                padding: EdgeInsets.all(16.0),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      'Topic Management:',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    SizedBox(height: 16),&#10;                    Row(&#10;                      children: [&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _subscribeToTopic,&#10;                            icon: Icon(Icons.add_alert),&#10;                            label: Text('Subscribe'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.green,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                        SizedBox(width: 8),&#10;                        Expanded(&#10;                          child: ElevatedButton.icon(&#10;                            onPressed: _unsubscribeFromTopic,&#10;                            icon: Icon(Icons.notifications_off),&#10;                            label: Text('Unsubscribe'),&#10;                            style: ElevatedButton.styleFrom(&#10;                              backgroundColor: Colors.orange,&#10;                              foregroundColor: Colors.white,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;            SizedBox(height: 16),&#10;            Card(&#10;              child: Padding(&#10;                padding: EdgeInsets.all(16.0),&#10;                child: Column(&#10;                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                  children: [&#10;                    Text(&#10;                      'Hướng dẫn test FCM:',&#10;                      style: TextStyle(&#10;                        fontSize: 18,&#10;                        fontWeight: FontWeight.bold,&#10;                      ),&#10;                    ),&#10;                    SizedBox(height: 8),&#10;                    Text(&#10;                      '1. Copy token ở trên\n'&#10;                      '2. Vào Firebase Console &gt; Cloud Messaging\n'&#10;                      '3. Tạo thông báo mới\n'&#10;                      '4. Paste token vào &quot;Device registration token&quot;\n'&#10;                      '5. Gửi thông báo test',&#10;                      style: TextStyle(fontSize: 14),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/services/firebase_messaging_service.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/services/firebase_messaging_service.dart" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>