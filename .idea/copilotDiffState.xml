<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/lib/data/model/helper.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/model/helper.dart" />
              <option name="originalContent" value="class Helper {&#10;  String id;&#10;  String? helperId;&#10;  String? fullName;&#10;  String? startDate;&#10;  String? birthDay;&#10;  String? phone;&#10;  String? birthPlace;&#10;  String? address;&#10;  WorkingArea workingArea;&#10;  String? jobDetail;&#10;  List&lt;String&gt; jobs;&#10;  num yearOfExperience;&#10;  String? experienceDescription;&#10;  String? avatar;&#10;  List&lt;String&gt; healthCertificates;&#10;  String? salaryId;&#10;  String? gender;&#10;  String? nationality;&#10;  String? educationLevel;&#10;  num height;&#10;  num weight;&#10;&#10;  Helper({&#10;    required this.id,&#10;    required this.helperId,&#10;    required this.fullName,&#10;    required this.startDate,&#10;    required this.birthDay,&#10;    required this.phone,&#10;    required this.birthPlace,&#10;    required this.address,&#10;    required this.workingArea,&#10;    required this.jobDetail,&#10;    required this.jobs,&#10;    required this.yearOfExperience,&#10;    required this.experienceDescription,&#10;    required this.avatar,&#10;    required this.healthCertificates,&#10;    required this.salaryId,&#10;    required this.gender,&#10;    required this.nationality,&#10;    required this.educationLevel,&#10;    required this.height,&#10;    required this.weight,&#10;  });&#10;&#10;  factory Helper.fromJson(Map&lt;String, dynamic&gt; map) {&#10;    return Helper(&#10;      id: map['_id'],&#10;      helperId: map['helper_id'],&#10;      fullName: map['fullName'],&#10;      startDate: map['startDate'],&#10;      birthDay: map['birthDate'],&#10;      phone: map['phone'],&#10;      birthPlace: map['birthPlace'],&#10;      address: map['address'],&#10;      workingArea: WorkingArea.fromJson(map['workingArea']),&#10;      jobDetail: map['jobDetail'],&#10;      jobs: List&lt;String&gt;.from(map['jobs']),&#10;      yearOfExperience: map['yearOfExperience'],&#10;      experienceDescription: map['experienceDescription'],&#10;      avatar: map['avatar'],&#10;      healthCertificates: List&lt;String&gt;.from(map['healthCertificates']),&#10;      salaryId: map['salaryId'],&#10;      gender: map['gender'],&#10;      nationality: map['nationality'],&#10;      educationLevel: map['educationLevel'],&#10;      height: map['height'].toDouble(),&#10;      // Convert to double&#10;      weight: map['weight'].toDouble(), // Convert to double&#10;    );&#10;  }&#10;&#10;  @override&#10;  bool operator ==(Object other) =&gt;&#10;      identical(this, other) ||&#10;      other is Helper &amp;&amp;&#10;          runtimeType == other.runtimeType &amp;&amp;&#10;          helperId == other.helperId &amp;&amp;&#10;          fullName == other.fullName &amp;&amp;&#10;          startDate == other.startDate &amp;&amp;&#10;          birthDay == other.birthDay &amp;&amp;&#10;          phone == other.phone &amp;&amp;&#10;          birthPlace == other.birthPlace &amp;&amp;&#10;          address == other.address &amp;&amp;&#10;          workingArea == other.workingArea &amp;&amp;&#10;          jobDetail == other.jobDetail &amp;&amp;&#10;          jobs == other.jobs &amp;&amp;&#10;          yearOfExperience == other.yearOfExperience &amp;&amp;&#10;          experienceDescription == other.experienceDescription &amp;&amp;&#10;          avatar == other.avatar &amp;&amp;&#10;          healthCertificates == other.healthCertificates &amp;&amp;&#10;          salaryId == other.salaryId &amp;&amp;&#10;          gender == other.gender &amp;&amp;&#10;          nationality == other.nationality &amp;&amp;&#10;          educationLevel == other.educationLevel &amp;&amp;&#10;          height == other.height &amp;&amp;&#10;          weight == other.weight;&#10;&#10;  @override&#10;  int get hashCode =&gt;&#10;      helperId.hashCode ^&#10;      fullName.hashCode ^&#10;      startDate.hashCode ^&#10;      birthDay.hashCode ^&#10;      phone.hashCode ^&#10;      birthPlace.hashCode ^&#10;      address.hashCode ^&#10;      workingArea.hashCode ^&#10;      jobDetail.hashCode ^&#10;      jobs.hashCode ^&#10;      yearOfExperience.hashCode ^&#10;      experienceDescription.hashCode ^&#10;      avatar.hashCode ^&#10;      healthCertificates.hashCode ^&#10;      salaryId.hashCode ^&#10;      gender.hashCode ^&#10;      nationality.hashCode ^&#10;      educationLevel.hashCode ^&#10;      height.hashCode ^&#10;      weight.hashCode;&#10;&#10;  @override&#10;  String toString() {&#10;    return 'Cleaner{helperId: $helperId, fullName: $fullName, startDate: $startDate, birthDay: $birthDay, phone: $phone, birthPlace: $birthPlace, address: $address, workingArea: $workingArea, jobDetail: $jobDetail, jobs: $jobs, yearOfExperience: $yearOfExperience, experienceDescription: $experienceDescription, avatar: $avatar, healthCertificates: $healthCertificates, salaryId: $salaryId, gender: $gender, nationality: $nationality, educationLevel: $educationLevel, height: $height, weight: $weight}';&#10;  }&#10;}&#10;&#10;class WorkingArea {&#10;  late String province;&#10;  late List&lt;String&gt; districts;&#10;&#10;  WorkingArea({required this.province, required this.districts});&#10;&#10;  factory WorkingArea.fromJson(Map&lt;String, dynamic&gt; map) {&#10;    return WorkingArea(&#10;      province: map['province'] ?? &quot;Không có thông tin&quot;,&#10;      districts: List&lt;String&gt;.from(map['districts'] ?? []),&#10;    );&#10;  }&#10;&#10;  @override&#10;  String toString() {&#10;    return 'WorkingArea{province: $province, districts: $districts}';&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="class Helper {&#10;  String id;&#10;  String? helperId;&#10;  String? fullName;&#10;  String? startDate;&#10;  String? birthDay;&#10;  String? phone;&#10;  String? birthPlace;&#10;  String? address;&#10;  WorkingArea workingArea;&#10;  String? jobDetail;&#10;  List&lt;String&gt; jobs;&#10;  num yearOfExperience;&#10;  String? experienceDescription;&#10;  String? avatar;&#10;  List&lt;String&gt; healthCertificates;&#10;  String? salaryId;&#10;  String? gender;&#10;  String? nationality;&#10;  String? educationLevel;&#10;  num height;&#10;  num weight;&#10;  String? status;&#10;  String? workingStatus;&#10;&#10;  Helper({&#10;    required this.id,&#10;    this.helperId,&#10;    this.fullName,&#10;    this.startDate,&#10;    this.birthDay,&#10;    this.phone,&#10;    this.birthPlace,&#10;    this.address,&#10;    required this.workingArea,&#10;    this.jobDetail,&#10;    required this.jobs,&#10;    required this.yearOfExperience,&#10;    this.experienceDescription,&#10;    this.avatar,&#10;    required this.healthCertificates,&#10;    this.salaryId,&#10;    this.gender,&#10;    this.nationality,&#10;    this.educationLevel,&#10;    required this.height,&#10;    required this.weight,&#10;    this.status,&#10;    this.workingStatus,&#10;  });&#10;&#10;  factory Helper.fromJson(Map&lt;String, dynamic&gt; map) {&#10;    try {&#10;      return Helper(&#10;        id: map['_id']?.toString() ?? '',&#10;        helperId: map['helper_id']?.toString(),&#10;        fullName: map['fullName']?.toString(),&#10;        startDate: map['startDate']?.toString(),&#10;        birthDay: map['birthDate']?.toString(),&#10;        phone: map['phone']?.toString(),&#10;        birthPlace: map['birthPlace']?.toString(),&#10;        address: map['address']?.toString(),&#10;        workingArea: map['workingArea'] != null &amp;&amp; map['workingArea'] is Map&lt;String, dynamic&gt;&#10;            ? WorkingArea.fromJson(map['workingArea'])&#10;            : WorkingArea(province: '', districts: []),&#10;        jobDetail: map['jobDetail']?.toString(),&#10;        jobs: map['jobs'] != null &amp;&amp; map['jobs'] is List&#10;            ? List&lt;String&gt;.from(map['jobs'].map((item) =&gt; item.toString()))&#10;            : [],&#10;        yearOfExperience: map['yearOfExperience'] is num &#10;            ? map['yearOfExperience'] &#10;            : (num.tryParse(map['yearOfExperience']?.toString() ?? '0') ?? 0),&#10;        experienceDescription: map['experienceDescription']?.toString(),&#10;        avatar: map['avatar']?.toString(),&#10;        healthCertificates: map['healthCertificates'] != null &amp;&amp; map['healthCertificates'] is List&#10;            ? List&lt;String&gt;.from(map['healthCertificates'].map((item) =&gt; item.toString()))&#10;            : [],&#10;        salaryId: map['salaryId']?.toString(),&#10;        gender: map['gender']?.toString(),&#10;        nationality: map['nationality']?.toString(),&#10;        educationLevel: map['educationLevel']?.toString(),&#10;        height: map['height'] is num &#10;            ? map['height'] &#10;            : (num.tryParse(map['height']?.toString() ?? '0') ?? 0),&#10;        weight: map['weight'] is num &#10;            ? map['weight'] &#10;            : (num.tryParse(map['weight']?.toString() ?? '0') ?? 0),&#10;        status: map['status']?.toString(),&#10;        workingStatus: map['workingStatus']?.toString(),&#10;      );&#10;    } catch (e) {&#10;      print('Error parsing Helper from JSON: $e');&#10;      print('Problematic JSON: $map');&#10;      rethrow;&#10;    }&#10;  }&#10;&#10;  @override&#10;  bool operator ==(Object other) =&gt;&#10;      identical(this, other) ||&#10;      other is Helper &amp;&amp;&#10;          runtimeType == other.runtimeType &amp;&amp;&#10;          helperId == other.helperId &amp;&amp;&#10;          fullName == other.fullName &amp;&amp;&#10;          startDate == other.startDate &amp;&amp;&#10;          birthDay == other.birthDay &amp;&amp;&#10;          phone == other.phone &amp;&amp;&#10;          birthPlace == other.birthPlace &amp;&amp;&#10;          address == other.address &amp;&amp;&#10;          workingArea == other.workingArea &amp;&amp;&#10;          jobDetail == other.jobDetail &amp;&amp;&#10;          jobs == other.jobs &amp;&amp;&#10;          yearOfExperience == other.yearOfExperience &amp;&amp;&#10;          experienceDescription == other.experienceDescription &amp;&amp;&#10;          avatar == other.avatar &amp;&amp;&#10;          healthCertificates == other.healthCertificates &amp;&amp;&#10;          salaryId == other.salaryId &amp;&amp;&#10;          gender == other.gender &amp;&amp;&#10;          nationality == other.nationality &amp;&amp;&#10;          educationLevel == other.educationLevel &amp;&amp;&#10;          height == other.height &amp;&amp;&#10;          weight == other.weight;&#10;&#10;  @override&#10;  int get hashCode =&gt;&#10;      helperId.hashCode ^&#10;      fullName.hashCode ^&#10;      startDate.hashCode ^&#10;      birthDay.hashCode ^&#10;      phone.hashCode ^&#10;      birthPlace.hashCode ^&#10;      address.hashCode ^&#10;      workingArea.hashCode ^&#10;      jobDetail.hashCode ^&#10;      jobs.hashCode ^&#10;      yearOfExperience.hashCode ^&#10;      experienceDescription.hashCode ^&#10;      avatar.hashCode ^&#10;      healthCertificates.hashCode ^&#10;      salaryId.hashCode ^&#10;      gender.hashCode ^&#10;      nationality.hashCode ^&#10;      educationLevel.hashCode ^&#10;      height.hashCode ^&#10;      weight.hashCode;&#10;&#10;  @override&#10;  String toString() {&#10;    return 'Cleaner{helperId: $helperId, fullName: $fullName, startDate: $startDate, birthDay: $birthDay, phone: $phone, birthPlace: $birthPlace, address: $address, workingArea: $workingArea, jobDetail: $jobDetail, jobs: $jobs, yearOfExperience: $yearOfExperience, experienceDescription: $experienceDescription, avatar: $avatar, healthCertificates: $healthCertificates, salaryId: $salaryId, gender: $gender, nationality: $nationality, educationLevel: $educationLevel, height: $height, weight: $weight}';&#10;  }&#10;}&#10;&#10;class WorkingArea {&#10;  late String province;&#10;  late List&lt;String&gt; districts;&#10;&#10;  WorkingArea({required this.province, required this.districts});&#10;&#10;  factory WorkingArea.fromJson(Map&lt;String, dynamic&gt; map) {&#10;    return WorkingArea(&#10;      province: map['province'] ?? &quot;Không có thông tin&quot;,&#10;      districts: List&lt;String&gt;.from(map['districts'] ?? []),&#10;    );&#10;  }&#10;&#10;  @override&#10;  String toString() {&#10;    return 'WorkingArea{province: $province, districts: $districts}';&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/source/source.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/source/source.dart" />
              <option name="originalContent" value="import 'dart:convert';&#10;import 'dart:io';&#10;&#10;import 'package:flutter/foundation.dart';&#10;import 'package:flutter/services.dart';&#10;import 'package:homecare_helper/data/model/RequestHelper.dart';&#10;import 'package:homecare_helper/data/model/coefficient.dart';&#10;import 'package:homecare_helper/data/model/cost_factor.dart';&#10;import 'package:homecare_helper/data/model/customer.dart';&#10;import 'package:homecare_helper/data/model/helper.dart';&#10;import 'package:homecare_helper/data/model/location.dart';&#10;import 'package:homecare_helper/data/model/message.dart';&#10;import 'package:homecare_helper/data/model/request.dart';&#10;import 'package:homecare_helper/data/model/request_detail.dart';&#10;import 'package:homecare_helper/data/model/services.dart';&#10;import 'package:homecare_helper/data/model/time_off.dart';&#10;&#10;import 'package:http/http.dart' as http;&#10;&#10;import '../model/Authen.dart';&#10;&#10;abstract interface class DataSource {&#10;  Future&lt;List&lt;Helper&gt;?&gt; loadCleanerData();&#10;&#10;  Future&lt;List&lt;Location&gt;?&gt; loadLocationData();&#10;&#10;  Future&lt;List&lt;Services&gt;?&gt; loadServicesData();&#10;&#10;  Future&lt;List&lt;Customer&gt;?&gt; loadCustomerData();&#10;&#10;  Future&lt;List&lt;Requests&gt;?&gt; loadRequestData();&#10;&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailData();&#10;&#10;  Future&lt;void&gt; sendRequests(Requests requests);&#10;&#10;  Future&lt;void&gt; cancelRequest(String id);&#10;&#10;  Future&lt;void&gt; finishRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; assignedRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; processingRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; finishPayment(String id, String token);&#10;&#10;  Future&lt;void&gt; waitPayment(String id);&#10;&#10;  Future&lt;List&lt;TimeOff&gt;?&gt; loadTimeOffData();&#10;&#10;  Future&lt;List&lt;Message&gt;?&gt; loadMessageData(Message message);&#10;&#10;  Future&lt;void&gt; sendMessage(String phone);&#10;&#10;  Future&lt;List&lt;CostFactor&gt;?&gt; loadCostFactorData();&#10;&#10;  Future&lt;CoefficientOther?&gt; loadCoefficientOther();&#10;&#10;  Future&lt;List&lt;CoefficientOther&gt;?&gt; loadCoefficientService();&#10;&#10;  Future&lt;void&gt; sendCustomerRegisterRequest(Customer customer);&#10;&#10;  Future&lt;Map&lt;String, dynamic&gt;?&gt; calculateCost(&#10;      num servicePrice,&#10;      String startTime,&#10;      String endTime,&#10;      String startDate,&#10;      CoefficientOther coefficientOther,&#10;      num serviceFactor);&#10;&#10;  Future&lt;Authen?&gt; loginHelper(String phone, String password);&#10;&#10;  Future&lt;Authen?&gt; registerHelper(String phone, String password, String name,&#10;      String email, Addresses addresses);&#10;&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadUnassignedRequest(String token);&#10;&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadAssignedRequest(String token);&#10;}&#10;&#10;class RemoteDataSource implements DataSource {&#10;  @override&#10;  Future&lt;List&lt;Helper&gt;?&gt; loadCleanerData() async {&#10;    const url = 'https://homecareapi.vercel.app/helper/';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; cleanerList = jsonDecode(bodyContent);&#10;        return cleanerList.map((cleaner) =&gt; Helper.fromJson(cleaner)).toList();&#10;      } else {&#10;        print(&#10;            'Failed to load cleaner data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading cleaner data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Location&gt;?&gt; loadLocationData() async {&#10;    const url = 'https://homecareapi.vercel.app/location';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; locationList = jsonDecode(bodyContent);&#10;        return locationList&#10;            .map((location) =&gt; Location.fromJson(location))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load location data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading location data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Customer&gt;?&gt; loadCustomerData() async {&#10;    const url = 'https://homecareapi.vercel.app/customer';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; customerList = jsonDecode(bodyContent);&#10;        return customerList&#10;            .map((customer) =&gt; Customer.fromJson(customer))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load customer data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading customer data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; updateCustomerInfo(Customer customer) async {&#10;    final url = 'https://homecareapi.vercel.app/customer/${customer.phone}';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode(customer.toJson());&#10;&#10;    try {&#10;      final response = await http.patch(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        print('Customer updated successfully!');&#10;      } else {&#10;        print('Failed to update customer. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error updating customer: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Services&gt;?&gt; loadServicesData() async {&#10;    const url = 'https://homecareapi.vercel.app/service';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; servicesList = jsonDecode(bodyContent);&#10;        return servicesList&#10;            .map((services) =&gt; Services.fromJson(services))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load services data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading services data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Requests&gt;?&gt; loadRequestData() async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        // print(response.body);&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;        return requestList&#10;            .map((request) =&gt; Requests.fromJson(request))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailData() async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;&#10;        List&lt;String&gt; requestIds = [];&#10;&#10;        for (var request in requestList) {&#10;          Requests req = Requests.fromJson(request);&#10;          if (req.scheduleIds.isNotEmpty) {&#10;            requestIds.addAll(req.scheduleIds);&#10;          }&#10;        }&#10;        return await loadRequestDetailId(requestIds);&#10;      } else {&#10;        print(&#10;            'Failed to load request detail data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailId(List&lt;String&gt; id) async {&#10;    String idString = id.join(',');&#10;    if (idString.endsWith(',')) {&#10;      idString = idString.substring(0, idString.length - 1);&#10;    }&#10;    String url = 'https://homecareapi.vercel.app/requestDetail?ids=$idString';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; detailsList = jsonDecode(bodyContent);&#10;        return detailsList&#10;            .map((detail) =&gt; RequestDetail.fromJson(detail))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request detail IDs. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail IDs: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;TimeOff&gt;?&gt; loadTimeOffData() async {&#10;    const url = 'https://homecareapi.vercel.app/timeOff/test';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; timeOffList = jsonDecode(bodyContent);&#10;        return timeOffList.map((timeOff) =&gt; TimeOff.fromJson(timeOff)).toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request detail IDs. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail IDs: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendRequests(Requests requests) async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode(requests.toJson());&#10;&#10;    print(body);&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; cancelRequest(String id) async {&#10;    final url = 'https://homecareapi.vercel.app/request/cancel';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'id': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Cancel request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; waitPayment(String id) async {&#10;    final url = 'https://homecareapi.vercel.app/request/waitpayment';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'id': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Wait payment request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; finishRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/finish';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; assignedRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/assign';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Assigned request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Message&gt;?&gt; loadMessageData(Message message) async {&#10;    final url = Uri.parse(&#10;        'https://homecareapi.vercel.app/message?phone=${message.phone}');&#10;    try {&#10;      final response = await http.get(url);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = json.decode(response.body);&#10;        final List&lt;dynamic&gt; messageList = jsonDecode(bodyContent);&#10;        return messageList.map((message) =&gt; Message.fromJson(message)).toList();&#10;      } else {&#10;        print('Failed to load message. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error occurred: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendMessage(String phone) async {&#10;    const url = 'https://homecareapi.vercel.app/message';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'phone': phone});&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;CostFactor&gt;?&gt; loadCostFactorData() async {&#10;    final url = &quot;https://homecareapi.vercel.app/costFactor&quot;;&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; costFactorList = jsonDecode(bodyContent);&#10;        return costFactorList&#10;            .map((costFactor) =&gt; CostFactor.fromJson(costFactor))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Map&lt;String, dynamic&gt;?&gt; calculateCost(&#10;      num servicePrice,&#10;      String startTime,&#10;      String endTime,&#10;      String startDate,&#10;      CoefficientOther coefficientOther,&#10;      num serviceFactor) async {&#10;    const url = 'https://homecareapi.vercel.app/request/calculateCost';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;servicePrice&quot;: servicePrice,&#10;      &quot;startTime&quot;: startTime,&#10;      &quot;endTime&quot;: endTime,&#10;      &quot;workDate&quot;: startDate,&#10;      &quot;officeStartTime&quot;: &quot;08:00&quot;,&#10;      &quot;officeEndTime&quot;: &quot;18:00&quot;,&#10;      &quot;coefficient_other&quot;: coefficientOther.toJson(),&#10;      &quot;serviceFactor&quot;: serviceFactor&#10;    });&#10;&#10;    debugPrint(body);&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        final decodedResponse =&#10;            jsonDecode(utf8.decode(response.bodyBytes)) as Map&lt;String, dynamic&gt;;&#10;        // debugPrint(&quot;Response Body: $decodedResponse&quot;);&#10;        return decodedResponse;&#10;      } else {&#10;        print(&#10;            'Failed to post requests calculation. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests calculation: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;CoefficientOther?&gt; loadCoefficientOther() async {&#10;    final url = &quot;https://homecareapi.vercel.app/costFactor/other&quot;;&#10;    final uri = Uri.parse(url);&#10;&#10;    try {&#10;      final response = await http.get(uri);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final Map&lt;String, dynamic&gt; coefficientOtherMap =&#10;            jsonDecode(bodyContent);&#10;&#10;        return CoefficientOther.fromJson(coefficientOtherMap);&#10;      } else {&#10;        print('Failed to load data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;CoefficientOther&gt;?&gt; loadCoefficientService() async {&#10;    const String url =&#10;        &quot;https://homecareapi.vercel.app/costFactor/service&quot;; // Thay bằng URL API thực tế&#10;    final Uri uri = Uri.parse(url);&#10;&#10;    try {&#10;      final response = await http.get(uri);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; coefficientServiceList = jsonDecode(bodyContent);&#10;        return coefficientServiceList&#10;            .map((coefficient) =&gt; CoefficientOther.fromJson(coefficient))&#10;            .toList();&#10;      } else {&#10;        print('Failed to load data. Status code: ${response.statusCode}');&#10;        return [];&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return [];&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendCustomerRegisterRequest(Customer customer) async {&#10;    const url = 'https://homecareapi.vercel.app/customer';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;email&quot;: customer.email,&#10;      &quot;fullName&quot;: customer.name,&#10;      &quot;phone&quot;: customer.phone,&#10;      &quot;password&quot;: customer.password,&#10;      &quot;points&quot;: [&#10;        {&#10;          &quot;point&quot;: 100000000,&#10;        }&#10;      ],&#10;      &quot;addresses&quot;:&#10;          customer.addresses.map((address) =&gt; address.toJson()).toList(),&#10;    });&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; finishPayment(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/finishpayment';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; processingRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/processing';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Authen?&gt; loginHelper(String phone, String password) {&#10;    const url = 'https://homecareapi.vercel.app/auth/login/helper';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;phone&quot;: phone,&#10;      &quot;password&quot;: password,&#10;    });&#10;&#10;    try {&#10;      return http.post(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final Map&lt;String, dynamic&gt; authMap = jsonDecode(bodyContent);&#10;          final Authen auth = Authen.fromJson(authMap);&#10;          return auth;&#10;        } else {&#10;          print('Failed to authenticate. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;        }&#10;        return null;&#10;      });&#10;    } catch (e) {&#10;      print('Error during authentication: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Authen?&gt; registerHelper(String phone, String password, String name,&#10;      String email, Addresses addresses) {&#10;    const url = 'https://homecareapi.vercel.app/auth/register/helper';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;fullName&quot;: name,&#10;      &quot;phone&quot;: phone,&#10;      &quot;password&quot;: password,&#10;      &quot;email&quot;: email,&#10;      &quot;address&quot;: addresses.toJson(),&#10;    });&#10;&#10;    try {&#10;      return http.post(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 201) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final Map&lt;String, dynamic&gt; authenMap = jsonDecode(bodyContent);&#10;          final Authen authen = Authen.fromJson(authenMap);&#10;          return authen;&#10;        } else {&#10;          print('Failed to register. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return Future.error('Failed to register');&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error during registration: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadUnassignedRequest(String token) {&#10;    final url = &quot;https://homecareapi.vercel.app/request&quot;;&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token',&#10;    };&#10;    try {&#10;      return http.get(uri, headers: headers).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;          print('body: $bodyContent');&#10;          return requestList&#10;              .map((request) =&gt; RequestHelper.fromJson(request))&#10;              .toList();&#10;        } else {&#10;          print(&#10;              'Failed to load unassigned requests. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return null;&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error loading unassigned requests: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadAssignedRequest(String token) {&#10;    final url = &quot;https://homecareapi.vercel.app/request/my-assigned&quot;;&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token',&#10;    };&#10;    try {&#10;      return http.get(uri, headers: headers).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;          print('body: $bodyContent');&#10;          return requestList&#10;              .map((request) =&gt; RequestHelper.fromJson(request))&#10;              .toList();&#10;        } else {&#10;          print(&#10;              'Failed to load assigned requests. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return null;&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error loading assigned requests: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'dart:convert';&#10;import 'dart:io';&#10;&#10;import 'package:flutter/foundation.dart';&#10;import 'package:flutter/services.dart';&#10;import 'package:homecare_helper/data/model/RequestHelper.dart';&#10;import 'package:homecare_helper/data/model/coefficient.dart';&#10;import 'package:homecare_helper/data/model/cost_factor.dart';&#10;import 'package:homecare_helper/data/model/customer.dart';&#10;import 'package:homecare_helper/data/model/helper.dart';&#10;import 'package:homecare_helper/data/model/location.dart';&#10;import 'package:homecare_helper/data/model/message.dart';&#10;import 'package:homecare_helper/data/model/request.dart';&#10;import 'package:homecare_helper/data/model/request_detail.dart';&#10;import 'package:homecare_helper/data/model/services.dart';&#10;import 'package:homecare_helper/data/model/time_off.dart';&#10;&#10;import 'package:http/http.dart' as http;&#10;&#10;import '../model/Authen.dart';&#10;&#10;abstract interface class DataSource {&#10;  Future&lt;List&lt;Helper&gt;?&gt; loadCleanerData();&#10;&#10;  Future&lt;List&lt;Location&gt;?&gt; loadLocationData();&#10;&#10;  Future&lt;List&lt;Services&gt;?&gt; loadServicesData();&#10;&#10;  Future&lt;List&lt;Customer&gt;?&gt; loadCustomerData();&#10;&#10;  Future&lt;List&lt;Requests&gt;?&gt; loadRequestData();&#10;&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailData();&#10;&#10;  Future&lt;void&gt; sendRequests(Requests requests);&#10;&#10;  Future&lt;void&gt; cancelRequest(String id);&#10;&#10;  Future&lt;void&gt; finishRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; assignedRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; processingRequest(String id, String token);&#10;&#10;  Future&lt;void&gt; finishPayment(String id, String token);&#10;&#10;  Future&lt;void&gt; waitPayment(String id);&#10;&#10;  Future&lt;List&lt;TimeOff&gt;?&gt; loadTimeOffData();&#10;&#10;  Future&lt;List&lt;Message&gt;?&gt; loadMessageData(Message message);&#10;&#10;  Future&lt;void&gt; sendMessage(String phone);&#10;&#10;  Future&lt;List&lt;CostFactor&gt;?&gt; loadCostFactorData();&#10;&#10;  Future&lt;CoefficientOther?&gt; loadCoefficientOther();&#10;&#10;  Future&lt;List&lt;CoefficientOther&gt;?&gt; loadCoefficientService();&#10;&#10;  Future&lt;void&gt; sendCustomerRegisterRequest(Customer customer);&#10;&#10;  Future&lt;Map&lt;String, dynamic&gt;?&gt; calculateCost(&#10;      num servicePrice,&#10;      String startTime,&#10;      String endTime,&#10;      String startDate,&#10;      CoefficientOther coefficientOther,&#10;      num serviceFactor);&#10;&#10;  Future&lt;Authen?&gt; loginHelper(String phone, String password);&#10;&#10;  Future&lt;Authen?&gt; registerHelper(String phone, String password, String name,&#10;      String email, Addresses addresses);&#10;&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadUnassignedRequest(String token);&#10;&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadAssignedRequest(String token);&#10;}&#10;&#10;class RemoteDataSource implements DataSource {&#10;  @override&#10;  Future&lt;List&lt;Helper&gt;?&gt; loadCleanerData() async {&#10;    const url = 'https://homecareapi.vercel.app/helper/';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; cleanerList = jsonDecode(bodyContent);&#10;        &#10;        List&lt;Helper&gt; helpers = [];&#10;        for (int i = 0; i &lt; cleanerList.length; i++) {&#10;          try {&#10;            final helper = Helper.fromJson(cleanerList[i]);&#10;            helpers.add(helper);&#10;          } catch (e) {&#10;            print('Error parsing helper at index $i: $e');&#10;            print('Helper data: ${cleanerList[i]}');&#10;            // Continue with other helpers instead of failing completely&#10;            continue;&#10;          }&#10;        }&#10;        &#10;        return helpers;&#10;      } else {&#10;        print(&#10;            'Failed to load cleaner data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading cleaner data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Location&gt;?&gt; loadLocationData() async {&#10;    const url = 'https://homecareapi.vercel.app/location';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; locationList = jsonDecode(bodyContent);&#10;        return locationList&#10;            .map((location) =&gt; Location.fromJson(location))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load location data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading location data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Customer&gt;?&gt; loadCustomerData() async {&#10;    const url = 'https://homecareapi.vercel.app/customer';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; customerList = jsonDecode(bodyContent);&#10;        return customerList&#10;            .map((customer) =&gt; Customer.fromJson(customer))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load customer data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading customer data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; updateCustomerInfo(Customer customer) async {&#10;    final url = 'https://homecareapi.vercel.app/customer/${customer.phone}';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode(customer.toJson());&#10;&#10;    try {&#10;      final response = await http.patch(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        print('Customer updated successfully!');&#10;      } else {&#10;        print('Failed to update customer. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error updating customer: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Services&gt;?&gt; loadServicesData() async {&#10;    const url = 'https://homecareapi.vercel.app/service';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; servicesList = jsonDecode(bodyContent);&#10;        return servicesList&#10;            .map((services) =&gt; Services.fromJson(services))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load services data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading services data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Requests&gt;?&gt; loadRequestData() async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        // print(response.body);&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;        return requestList&#10;            .map((request) =&gt; Requests.fromJson(request))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailData() async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;&#10;        List&lt;String&gt; requestIds = [];&#10;&#10;        for (var request in requestList) {&#10;          Requests req = Requests.fromJson(request);&#10;          if (req.scheduleIds.isNotEmpty) {&#10;            requestIds.addAll(req.scheduleIds);&#10;          }&#10;        }&#10;        return await loadRequestDetailId(requestIds);&#10;      } else {&#10;        print(&#10;            'Failed to load request detail data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  Future&lt;List&lt;RequestDetail&gt;?&gt; loadRequestDetailId(List&lt;String&gt; id) async {&#10;    String idString = id.join(',');&#10;    if (idString.endsWith(',')) {&#10;      idString = idString.substring(0, idString.length - 1);&#10;    }&#10;    String url = 'https://homecareapi.vercel.app/requestDetail?ids=$idString';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; detailsList = jsonDecode(bodyContent);&#10;        return detailsList&#10;            .map((detail) =&gt; RequestDetail.fromJson(detail))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request detail IDs. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail IDs: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;TimeOff&gt;?&gt; loadTimeOffData() async {&#10;    const url = 'https://homecareapi.vercel.app/timeOff/test';&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; timeOffList = jsonDecode(bodyContent);&#10;        return timeOffList.map((timeOff) =&gt; TimeOff.fromJson(timeOff)).toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request detail IDs. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading request detail IDs: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendRequests(Requests requests) async {&#10;    const url = 'https://homecareapi.vercel.app/request';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode(requests.toJson());&#10;&#10;    print(body);&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; cancelRequest(String id) async {&#10;    final url = 'https://homecareapi.vercel.app/request/cancel';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'id': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Cancel request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; waitPayment(String id) async {&#10;    final url = 'https://homecareapi.vercel.app/request/waitpayment';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'id': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Wait payment request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; finishRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/finish';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; assignedRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/assign';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Assigned request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;Message&gt;?&gt; loadMessageData(Message message) async {&#10;    final url = Uri.parse(&#10;        'https://homecareapi.vercel.app/message?phone=${message.phone}');&#10;    try {&#10;      final response = await http.get(url);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = json.decode(response.body);&#10;        final List&lt;dynamic&gt; messageList = jsonDecode(bodyContent);&#10;        return messageList.map((message) =&gt; Message.fromJson(message)).toList();&#10;      } else {&#10;        print('Failed to load message. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error occurred: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendMessage(String phone) async {&#10;    const url = 'https://homecareapi.vercel.app/message';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({'phone': phone});&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;CostFactor&gt;?&gt; loadCostFactorData() async {&#10;    final url = &quot;https://homecareapi.vercel.app/costFactor&quot;;&#10;    final uri = Uri.parse(url);&#10;    try {&#10;      final response = await http.get(uri);&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; costFactorList = jsonDecode(bodyContent);&#10;        return costFactorList&#10;            .map((costFactor) =&gt; CostFactor.fromJson(costFactor))&#10;            .toList();&#10;      } else {&#10;        print(&#10;            'Failed to load request data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Map&lt;String, dynamic&gt;?&gt; calculateCost(&#10;      num servicePrice,&#10;      String startTime,&#10;      String endTime,&#10;      String startDate,&#10;      CoefficientOther coefficientOther,&#10;      num serviceFactor) async {&#10;    const url = 'https://homecareapi.vercel.app/request/calculateCost';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;servicePrice&quot;: servicePrice,&#10;      &quot;startTime&quot;: startTime,&#10;      &quot;endTime&quot;: endTime,&#10;      &quot;workDate&quot;: startDate,&#10;      &quot;officeStartTime&quot;: &quot;08:00&quot;,&#10;      &quot;officeEndTime&quot;: &quot;18:00&quot;,&#10;      &quot;coefficient_other&quot;: coefficientOther.toJson(),&#10;      &quot;serviceFactor&quot;: serviceFactor&#10;    });&#10;&#10;    debugPrint(body);&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        final decodedResponse =&#10;            jsonDecode(utf8.decode(response.bodyBytes)) as Map&lt;String, dynamic&gt;;&#10;        // debugPrint(&quot;Response Body: $decodedResponse&quot;);&#10;        return decodedResponse;&#10;      } else {&#10;        print(&#10;            'Failed to post requests calculation. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests calculation: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;CoefficientOther?&gt; loadCoefficientOther() async {&#10;    final url = &quot;https://homecareapi.vercel.app/costFactor/other&quot;;&#10;    final uri = Uri.parse(url);&#10;&#10;    try {&#10;      final response = await http.get(uri);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final Map&lt;String, dynamic&gt; coefficientOtherMap =&#10;            jsonDecode(bodyContent);&#10;&#10;        return CoefficientOther.fromJson(coefficientOtherMap);&#10;      } else {&#10;        print('Failed to load data. Status code: ${response.statusCode}');&#10;        return null;&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return null;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;CoefficientOther&gt;?&gt; loadCoefficientService() async {&#10;    const String url =&#10;        &quot;https://homecareapi.vercel.app/costFactor/service&quot;; // Thay bằng URL API thực tế&#10;    final Uri uri = Uri.parse(url);&#10;&#10;    try {&#10;      final response = await http.get(uri);&#10;&#10;      if (response.statusCode == 200) {&#10;        final bodyContent = utf8.decode(response.bodyBytes);&#10;        final List&lt;dynamic&gt; coefficientServiceList = jsonDecode(bodyContent);&#10;        return coefficientServiceList&#10;            .map((coefficient) =&gt; CoefficientOther.fromJson(coefficient))&#10;            .toList();&#10;      } else {&#10;        print('Failed to load data. Status code: ${response.statusCode}');&#10;        return [];&#10;      }&#10;    } catch (e) {&#10;      print('Error loading CostFactor data: $e');&#10;      return [];&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; sendCustomerRegisterRequest(Customer customer) async {&#10;    const url = 'https://homecareapi.vercel.app/customer';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;email&quot;: customer.email,&#10;      &quot;fullName&quot;: customer.name,&#10;      &quot;phone&quot;: customer.phone,&#10;      &quot;password&quot;: customer.password,&#10;      &quot;points&quot;: [&#10;        {&#10;          &quot;point&quot;: 100000000,&#10;        }&#10;      ],&#10;      &quot;addresses&quot;:&#10;          customer.addresses.map((address) =&gt; address.toJson()).toList(),&#10;    });&#10;&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Requests posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; finishPayment(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/finishpayment';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; processingRequest(String id, String token) async {&#10;    final url = 'https://homecareapi.vercel.app/request/processing';&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token'&#10;    };&#10;    final body = jsonEncode({'detailId': id});&#10;    try {&#10;      final response = await http.post(uri, headers: headers, body: body);&#10;&#10;      if (response.statusCode == 200) {&#10;        if (kDebugMode) {&#10;          print('Done request posted successfully!');&#10;        }&#10;      } else {&#10;        print('Failed to post requests. Status code: ${response.statusCode}');&#10;        print('Response body: ${response.body}');&#10;      }&#10;    } catch (e) {&#10;      print('Error posting requests: $e');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Authen?&gt; loginHelper(String phone, String password) {&#10;    const url = 'https://homecareapi.vercel.app/auth/login/helper';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;phone&quot;: phone,&#10;      &quot;password&quot;: password,&#10;    });&#10;&#10;    try {&#10;      return http.post(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final Map&lt;String, dynamic&gt; authMap = jsonDecode(bodyContent);&#10;          final Authen auth = Authen.fromJson(authMap);&#10;          return auth;&#10;        } else {&#10;          print('Failed to authenticate. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;        }&#10;        return null;&#10;      });&#10;    } catch (e) {&#10;      print('Error during authentication: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;Authen?&gt; registerHelper(String phone, String password, String name,&#10;      String email, Addresses addresses) {&#10;    const url = 'https://homecareapi.vercel.app/auth/register/helper';&#10;    final uri = Uri.parse(url);&#10;    final headers = {'Content-Type': 'application/json'};&#10;    final body = jsonEncode({&#10;      &quot;fullName&quot;: name,&#10;      &quot;phone&quot;: phone,&#10;      &quot;password&quot;: password,&#10;      &quot;email&quot;: email,&#10;      &quot;address&quot;: addresses.toJson(),&#10;    });&#10;&#10;    try {&#10;      return http.post(uri, headers: headers, body: body).then((response) {&#10;        if (response.statusCode == 201) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final Map&lt;String, dynamic&gt; authenMap = jsonDecode(bodyContent);&#10;          final Authen authen = Authen.fromJson(authenMap);&#10;          return authen;&#10;        } else {&#10;          print('Failed to register. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return Future.error('Failed to register');&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error during registration: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadUnassignedRequest(String token) {&#10;    final url = &quot;https://homecareapi.vercel.app/request&quot;;&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token',&#10;    };&#10;    try {&#10;      return http.get(uri, headers: headers).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;          print('body: $bodyContent');&#10;          return requestList&#10;              .map((request) =&gt; RequestHelper.fromJson(request))&#10;              .toList();&#10;        } else {&#10;          print(&#10;              'Failed to load unassigned requests. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return null;&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error loading unassigned requests: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;RequestHelper&gt;?&gt; loadAssignedRequest(String token) {&#10;    final url = &quot;https://homecareapi.vercel.app/request/my-assigned&quot;;&#10;    final uri = Uri.parse(url);&#10;    final headers = {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': 'Bearer $token',&#10;    };&#10;    try {&#10;      return http.get(uri, headers: headers).then((response) {&#10;        if (response.statusCode == 200) {&#10;          final bodyContent = utf8.decode(response.bodyBytes);&#10;          final List&lt;dynamic&gt; requestList = jsonDecode(bodyContent);&#10;          print('body: $bodyContent');&#10;          return requestList&#10;              .map((request) =&gt; RequestHelper.fromJson(request))&#10;              .toList();&#10;        } else {&#10;          print(&#10;              'Failed to load assigned requests. Status code: ${response.statusCode}');&#10;          print('Response body: ${response.body}');&#10;          return null;&#10;        }&#10;      });&#10;    } catch (e) {&#10;      print('Error loading assigned requests: $e');&#10;      return Future.error(e);&#10;    }&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/pages/order_detail_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/pages/order_detail_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:homecare_helper/data/model/RequestHelper.dart';&#10;import 'package:intl/intl.dart';&#10;&#10;class OrderDetailPage extends StatefulWidget {&#10;  final RequestHelper request;&#10;&#10;  const OrderDetailPage({Key? key, required this.request}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;OrderDetailPage&gt; createState() =&gt; _OrderDetailPageState();&#10;}&#10;&#10;class _OrderDetailPageState extends State&lt;OrderDetailPage&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text(&#10;          &quot;Chi tiết đơn hàng&quot;,&#10;          style: TextStyle(&#10;            fontWeight: FontWeight.bold,&#10;            fontSize: 20,&#10;            color: Colors.white,&#10;            fontFamily: 'Quicksand',&#10;          ),&#10;        ),&#10;        centerTitle: true,&#10;        backgroundColor: Colors.green,&#10;        iconTheme: const IconThemeData(color: Colors.white),&#10;      ),&#10;      body: SingleChildScrollView(&#10;        padding: const EdgeInsets.all(16),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            // Order Status Header&#10;            _buildStatusCard(),&#10;            const SizedBox(height: 16),&#10;&#10;            // Customer Information&#10;            _buildInfoCard(&quot;Thông tin khách hàng&quot;, [&#10;              _buildInfoRow(&quot;Họ và tên&quot;, widget.request.customerInfo.fullName, Icons.person),&#10;              _buildInfoRow(&quot;Số điện thoại&quot;, widget.request.customerInfo.phone, Icons.phone),&#10;              _buildInfoRow(&quot;Địa chỉ&quot;, widget.request.customerInfo.address, Icons.location_on),&#10;              _buildInfoRow(&quot;Điểm đã sử dụng&quot;, &quot;${widget.request.customerInfo.usedPoint} điểm&quot;, Icons.stars),&#10;            ]),&#10;&#10;            const SizedBox(height: 16),&#10;&#10;            // Service Information&#10;            _buildInfoCard(&quot;Thông tin dịch vụ&quot;, [&#10;              _buildInfoRow(&quot;Tên dịch vụ&quot;, widget.request.service.title, Icons.home_repair_service),&#10;              _buildInfoRow(&quot;Giá cơ bản&quot;, &quot;${NumberFormat('#,###').format(widget.request.service.cost)} VNĐ&quot;, Icons.attach_money),&#10;              _buildInfoRow(&quot;Hệ số dịch vụ&quot;, &quot;x${widget.request.service.coefficientService}&quot;, Icons.trending_up),&#10;              _buildInfoRow(&quot;Hệ số khác&quot;, &quot;x${widget.request.service.coefficientOther}&quot;, Icons.trending_up),&#10;              _buildInfoRow(&quot;Hệ số OT&quot;, &quot;x${widget.request.service.coefficientOt}&quot;, Icons.access_time),&#10;            ]),&#10;&#10;            const SizedBox(height: 16),&#10;&#10;            // Order Information&#10;            _buildInfoCard(&quot;Thông tin đơn hàng&quot;, [&#10;              _buildInfoRow(&quot;Mã đơn hàng&quot;, widget.request.id, Icons.receipt),&#10;              _buildInfoRow(&quot;Ngày đặt&quot;, _formatDate(widget.request.orderDate), Icons.calendar_today),&#10;              _buildInfoRow(&quot;Thời gian bắt đầu&quot;, _formatDateTime(widget.request.startTime), Icons.schedule),&#10;              _buildInfoRow(&quot;Thời gian kết thúc&quot;, _formatDateTime(widget.request.endTime), Icons.schedule_outlined),&#10;              _buildInfoRow(&quot;Tổng chi phí&quot;, &quot;${NumberFormat('#,###').format(widget.request.totalCost)} VNĐ&quot;, Icons.payment),&#10;            ]),&#10;&#10;            const SizedBox(height: 16),&#10;&#10;            // Schedules List&#10;            _buildSchedulesCard(),&#10;&#10;            const SizedBox(height: 24),&#10;&#10;            // Action Buttons&#10;            _buildActionButtons(),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildStatusCard() {&#10;    Color statusColor;&#10;    IconData statusIcon;&#10;    String statusText;&#10;&#10;    switch (widget.request.status.toLowerCase()) {&#10;      case 'pending':&#10;        statusColor = Colors.orange;&#10;        statusIcon = Icons.schedule;&#10;        statusText = 'Chờ xử lý';&#10;        break;&#10;      case 'confirmed':&#10;        statusColor = Colors.blue;&#10;        statusIcon = Icons.check_circle;&#10;        statusText = 'Đã xác nhận';&#10;        break;&#10;      case 'in_progress':&#10;        statusColor = Colors.green;&#10;        statusIcon = Icons.work;&#10;        statusText = 'Đang thực hiện';&#10;        break;&#10;      case 'completed':&#10;        statusColor = Colors.green[700]!;&#10;        statusIcon = Icons.check_circle_outline;&#10;        statusText = 'Hoàn thành';&#10;        break;&#10;      case 'cancelled':&#10;        statusColor = Colors.red;&#10;        statusIcon = Icons.cancel;&#10;        statusText = 'Đã hủy';&#10;        break;&#10;      default:&#10;        statusColor = Colors.grey;&#10;        statusIcon = Icons.help;&#10;        statusText = widget.request.status;&#10;    }&#10;&#10;    return Container(&#10;      width: double.infinity,&#10;      padding: const EdgeInsets.all(20),&#10;      decoration: BoxDecoration(&#10;        color: statusColor.withOpacity(0.1),&#10;        borderRadius: BorderRadius.circular(12),&#10;        border: Border.all(color: statusColor, width: 2),&#10;      ),&#10;      child: Row(&#10;        children: [&#10;          Icon(statusIcon, color: statusColor, size: 32),&#10;          const SizedBox(width: 16),&#10;          Expanded(&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              children: [&#10;                const Text(&#10;                  'Trạng thái đơn hàng',&#10;                  style: TextStyle(&#10;                    fontSize: 14,&#10;                    color: Colors.grey,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                Text(&#10;                  statusText,&#10;                  style: TextStyle(&#10;                    fontSize: 20,&#10;                    fontWeight: FontWeight.bold,&#10;                    color: statusColor,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildInfoCard(String title, List&lt;Widget&gt; children) {&#10;    return Card(&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(16),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Text(&#10;              title,&#10;              style: const TextStyle(&#10;                fontSize: 18,&#10;                fontWeight: FontWeight.bold,&#10;                fontFamily: 'Quicksand',&#10;              ),&#10;            ),&#10;            const SizedBox(height: 16),&#10;            ...children,&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildInfoRow(String label, String value, IconData icon) {&#10;    return Padding(&#10;      padding: const EdgeInsets.only(bottom: 12),&#10;      child: Row(&#10;        children: [&#10;          Icon(icon, color: Colors.grey[600], size: 20),&#10;          const SizedBox(width: 12),&#10;          Expanded(&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              children: [&#10;                Text(&#10;                  label,&#10;                  style: TextStyle(&#10;                    fontSize: 12,&#10;                    color: Colors.grey[600],&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                const SizedBox(height: 2),&#10;                Text(&#10;                  value,&#10;                  style: const TextStyle(&#10;                    fontSize: 16,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildSchedulesCard() {&#10;    return Card(&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(16),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Row(&#10;              children: [&#10;                const Text(&#10;                  'Lịch trình công việc',&#10;                  style: TextStyle(&#10;                    fontSize: 18,&#10;                    fontWeight: FontWeight.bold,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                const Spacer(),&#10;                Container(&#10;                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),&#10;                  decoration: BoxDecoration(&#10;                    color: Colors.green.withOpacity(0.1),&#10;                    borderRadius: BorderRadius.circular(12),&#10;                  ),&#10;                  child: Text(&#10;                    '${widget.request.schedules.length} ca làm',&#10;                    style: const TextStyle(&#10;                      fontSize: 12,&#10;                      color: Colors.green,&#10;                      fontWeight: FontWeight.bold,&#10;                    ),&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;            const SizedBox(height: 16),&#10;            if (widget.request.schedules.isEmpty)&#10;              const Center(&#10;                child: Padding(&#10;                  padding: EdgeInsets.all(20),&#10;                  child: Text(&#10;                    'Chưa có lịch trình nào được tạo',&#10;                    style: TextStyle(&#10;                      color: Colors.grey,&#10;                      fontFamily: 'Quicksand',&#10;                    ),&#10;                  ),&#10;                ),&#10;              )&#10;            else&#10;              ...widget.request.schedules.map((schedule) =&gt; _buildScheduleItem(schedule)),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildScheduleItem(Schedule schedule) {&#10;    Color statusColor;&#10;    IconData statusIcon;&#10;    String statusText;&#10;&#10;    switch (schedule.status.toLowerCase()) {&#10;      case 'pending':&#10;        statusColor = Colors.orange;&#10;        statusIcon = Icons.schedule;&#10;        statusText = 'Chờ thực hiện';&#10;        break;&#10;      case 'in_progress':&#10;        statusColor = Colors.blue;&#10;        statusIcon = Icons.work;&#10;        statusText = 'Đang thực hiện';&#10;        break;&#10;      case 'completed':&#10;        statusColor = Colors.green;&#10;        statusIcon = Icons.check_circle;&#10;        statusText = 'Hoàn thành';&#10;        break;&#10;      case 'cancelled':&#10;        statusColor = Colors.red;&#10;        statusIcon = Icons.cancel;&#10;        statusText = 'Đã hủy';&#10;        break;&#10;      default:&#10;        statusColor = Colors.grey;&#10;        statusIcon = Icons.help;&#10;        statusText = schedule.status;&#10;    }&#10;&#10;    return Container(&#10;      margin: const EdgeInsets.only(bottom: 12),&#10;      padding: const EdgeInsets.all(12),&#10;      decoration: BoxDecoration(&#10;        border: Border.all(color: Colors.grey[300]!),&#10;        borderRadius: BorderRadius.circular(8),&#10;      ),&#10;      child: Column(&#10;        crossAxisAlignment: CrossAxisAlignment.start,&#10;        children: [&#10;          Row(&#10;            children: [&#10;              Icon(statusIcon, color: statusColor, size: 20),&#10;              const SizedBox(width: 8),&#10;              Text(&#10;                statusText,&#10;                style: TextStyle(&#10;                  color: statusColor,&#10;                  fontWeight: FontWeight.bold,&#10;                  fontFamily: 'Quicksand',&#10;                ),&#10;              ),&#10;              const Spacer(),&#10;              Text(&#10;                &quot;${NumberFormat('#,###').format(schedule.helperCost)} VNĐ&quot;,&#10;                style: const TextStyle(&#10;                  fontWeight: FontWeight.bold,&#10;                  color: Colors.green,&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;          const SizedBox(height: 8),&#10;          Row(&#10;            children: [&#10;              const Icon(Icons.calendar_today, size: 16, color: Colors.grey),&#10;              const SizedBox(width: 4),&#10;              Text(_formatDate(schedule.workingDate)),&#10;            ],&#10;          ),&#10;          const SizedBox(height: 4),&#10;          Row(&#10;            children: [&#10;              const Icon(Icons.access_time, size: 16, color: Colors.grey),&#10;              const SizedBox(width: 4),&#10;              Text('${_formatTime(schedule.startTime)} - ${_formatTime(schedule.endTime)}'),&#10;            ],&#10;          ),&#10;          if (schedule.comment.review.isNotEmpty) ...[&#10;            const SizedBox(height: 8),&#10;            Container(&#10;              padding: const EdgeInsets.all(8),&#10;              decoration: BoxDecoration(&#10;                color: Colors.grey[100],&#10;                borderRadius: BorderRadius.circular(6),&#10;              ),&#10;              child: Column(&#10;                crossAxisAlignment: CrossAxisAlignment.start,&#10;                children: [&#10;                  const Text(&#10;                    'Đánh giá:',&#10;                    style: TextStyle(&#10;                      fontWeight: FontWeight.bold,&#10;                      fontSize: 12,&#10;                    ),&#10;                  ),&#10;                  Text(schedule.comment.review),&#10;                  if (schedule.comment.loseThings || schedule.comment.breakThings) ...[&#10;                    const SizedBox(height: 4),&#10;                    Row(&#10;                      children: [&#10;                        if (schedule.comment.loseThings)&#10;                          const Chip(&#10;                            label: Text('Làm mất đồ', style: TextStyle(fontSize: 10)),&#10;                            backgroundColor: Colors.red,&#10;                            labelStyle: TextStyle(color: Colors.white),&#10;                          ),&#10;                        if (schedule.comment.breakThings) ...[&#10;                          if (schedule.comment.loseThings) const SizedBox(width: 8),&#10;                          const Chip(&#10;                            label: Text('Làm hỏng đồ', style: TextStyle(fontSize: 10)),&#10;                            backgroundColor: Colors.orange,&#10;                            labelStyle: TextStyle(color: Colors.white),&#10;                          ),&#10;                        ],&#10;                      ],&#10;                    ),&#10;                  ],&#10;                ],&#10;              ),&#10;            ),&#10;          ],&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildActionButtons() {&#10;    return Row(&#10;      children: [&#10;        if (widget.request.status.toLowerCase() == 'pending') ...[&#10;          Expanded(&#10;            child: OutlinedButton(&#10;              onPressed: () =&gt; _showCancelDialog(),&#10;              style: OutlinedButton.styleFrom(&#10;                foregroundColor: Colors.red,&#10;                side: const BorderSide(color: Colors.red),&#10;              ),&#10;              child: const Text('Hủy đơn'),&#10;            ),&#10;          ),&#10;          const SizedBox(width: 16),&#10;          Expanded(&#10;            child: ElevatedButton(&#10;              onPressed: () =&gt; _confirmOrder(),&#10;              style: ElevatedButton.styleFrom(backgroundColor: Colors.green),&#10;              child: const Text('Xác nhận', style: TextStyle(color: Colors.white)),&#10;            ),&#10;          ),&#10;        ] else if (widget.request.status.toLowerCase() == 'confirmed') ...[&#10;          Expanded(&#10;            child: ElevatedButton(&#10;              onPressed: () =&gt; _startWork(),&#10;              style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),&#10;              child: const Text('Bắt đầu làm việc', style: TextStyle(color: Colors.white)),&#10;            ),&#10;          ),&#10;        ] else if (widget.request.status.toLowerCase() == 'in_progress') ...[&#10;          Expanded(&#10;            child: ElevatedButton(&#10;              onPressed: () =&gt; _completeWork(),&#10;              style: ElevatedButton.styleFrom(backgroundColor: Colors.green),&#10;              child: const Text('Hoàn thành', style: TextStyle(color: Colors.white)),&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  String _formatDate(String dateString) {&#10;    try {&#10;      final DateTime date = DateTime.parse(dateString);&#10;      return DateFormat('dd/MM/yyyy').format(date);&#10;    } catch (e) {&#10;      return dateString;&#10;    }&#10;  }&#10;&#10;  String _formatCurrency(num amount) {&#10;    final formatter = NumberFormat.currency(locale: 'vi_VN', symbol: 'đ');&#10;    return formatter.format(amount);&#10;  }&#10;&#10;  String _formatRequestType(String requestType) {&#10;    switch (requestType) {&#10;      case 'short_term':&#10;        return 'Ngắn hạn';&#10;      case 'long_term':&#10;        return 'Dài hạn';&#10;      default:&#10;        return requestType;&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:homecare_helper/data/model/RequestHelper.dart';&#10;import 'package:intl/intl.dart';&#10;&#10;class OrderDetailPage extends StatefulWidget {&#10;  final RequestHelper request;&#10;&#10;  const OrderDetailPage({Key? key, required this.request}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;OrderDetailPage&gt; createState() =&gt; _OrderDetailPageState();&#10;}&#10;&#10;class _OrderDetailPageState extends State&lt;OrderDetailPage&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text(&#10;          &quot;Chi tiết đơn hàng&quot;,&#10;          style: TextStyle(&#10;            fontWeight: FontWeight.bold,&#10;            fontSize: 20,&#10;            color: Colors.white,&#10;            fontFamily: 'Quicksand',&#10;          ),&#10;        ),&#10;        centerTitle: true,&#10;        backgroundColor: Colors.green,&#10;        iconTheme: const IconThemeData(color: Colors.white),&#10;      ),&#10;      body: SingleChildScrollView(&#10;        padding: const EdgeInsets.all(16),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            // Order Status Header&#10;            _buildStatusCard(),&#10;            const SizedBox(height: 16),&#10;&#10;            // Customer Information&#10;            _buildInfoCard(&quot;Thông tin khách hàng&quot;, [&#10;              _buildInfoRow(&quot;Họ và tên&quot;, widget.request.customerInfo.fullName, Icons.person),&#10;              _buildInfoRow(&quot;Số điện thoại&quot;, widget.request.customerInfo.phone, Icons.phone),&#10;              _buildInfoRow(&quot;Địa chỉ&quot;, widget.request.customerInfo.address, Icons.location_on),&#10;              _buildInfoRow(&quot;Điểm đã sử dụng&quot;, &quot;${widget.request.customerInfo.usedPoint} điểm&quot;, Icons.stars),&#10;            ]),&#10;&#10;            const SizedBox(height: 16),&#10;&#10;            // Service Information&#10;            _buildInfoCard(&quot;Thông tin dịch vụ&quot;, [&#10;              _buildInfoRow(&quot;Tên dịch vụ&quot;, widget.request.service.title, Icons.home_repair_service),&#10;              _buildInfoRow(&quot;Giá cơ bản&quot;, &quot;${NumberFormat('#,###').format(widget.request.service.cost)} VNĐ&quot;, Icons.attach_money),&#10;              _buildInfoRow(&quot;Hệ số dịch vụ&quot;, &quot;x${widget.request.service.coefficientService}&quot;, Icons.trending_up),&#10;              _buildInfoRow(&quot;Hệ số khác&quot;, &quot;x${widget.request.service.coefficientOther}&quot;, Icons.trending_up),&#10;              _buildInfoRow(&quot;Hệ số OT&quot;, &quot;x${widget.request.service.coefficientOt}&quot;, Icons.access_time),&#10;            ]),&#10;&#10;            const SizedBox(height: 16),&#10;&#10;            // Order Information&#10;            _buildInfoCard(&quot;Thông tin đơn hàng&quot;, [&#10;              _buildInfoRow(&quot;Mã đơn hàng&quot;, widget.request.id, Icons.receipt),&#10;              _buildInfoRow(&quot;Ngày đặt&quot;, _formatDate(widget.request.orderDate), Icons.calendar_today),&#10;              _buildInfoRow(&quot;Thời gian bắt đầu&quot;, _formatDateTime(widget.request.startTime), Icons.schedule),&#10;              _buildInfoRow(&quot;Thời gian kết thúc&quot;, _formatDateTime(widget.request.endTime), Icons.schedule_outlined),&#10;              _buildInfoRow(&quot;Tổng chi phí&quot;, &quot;${NumberFormat('#,###').format(widget.request.totalCost)} VNĐ&quot;, Icons.payment),&#10;            ]),&#10;&#10;            const SizedBox(height: 16),&#10;&#10;            // Schedules List&#10;            _buildSchedulesCard(),&#10;&#10;            const SizedBox(height: 24),&#10;&#10;            // Action Buttons&#10;            _buildActionButtons(),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildStatusCard() {&#10;    Color statusColor;&#10;    IconData statusIcon;&#10;    String statusText;&#10;&#10;    switch (widget.request.status.toLowerCase()) {&#10;      case 'pending':&#10;        statusColor = Colors.orange;&#10;        statusIcon = Icons.schedule;&#10;        statusText = 'Chờ xử lý';&#10;        break;&#10;      case 'confirmed':&#10;        statusColor = Colors.blue;&#10;        statusIcon = Icons.check_circle;&#10;        statusText = 'Đã xác nhận';&#10;        break;&#10;      case 'in_progress':&#10;        statusColor = Colors.green;&#10;        statusIcon = Icons.work;&#10;        statusText = 'Đang thực hiện';&#10;        break;&#10;      case 'completed':&#10;        statusColor = Colors.green[700]!;&#10;        statusIcon = Icons.check_circle_outline;&#10;        statusText = 'Hoàn thành';&#10;        break;&#10;      case 'cancelled':&#10;        statusColor = Colors.red;&#10;        statusIcon = Icons.cancel;&#10;        statusText = 'Đã hủy';&#10;        break;&#10;      default:&#10;        statusColor = Colors.grey;&#10;        statusIcon = Icons.help;&#10;        statusText = widget.request.status;&#10;    }&#10;&#10;    return Container(&#10;      width: double.infinity,&#10;      padding: const EdgeInsets.all(20),&#10;      decoration: BoxDecoration(&#10;        color: statusColor.withOpacity(0.1),&#10;        borderRadius: BorderRadius.circular(12),&#10;        border: Border.all(color: statusColor, width: 2),&#10;      ),&#10;      child: Row(&#10;        children: [&#10;          Icon(statusIcon, color: statusColor, size: 32),&#10;          const SizedBox(width: 16),&#10;          Expanded(&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              children: [&#10;                const Text(&#10;                  'Trạng thái đơn hàng',&#10;                  style: TextStyle(&#10;                    fontSize: 14,&#10;                    color: Colors.grey,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                Text(&#10;                  statusText,&#10;                  style: TextStyle(&#10;                    fontSize: 20,&#10;                    fontWeight: FontWeight.bold,&#10;                    color: statusColor,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildInfoCard(String title, List&lt;Widget&gt; children) {&#10;    return Card(&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(16),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Text(&#10;              title,&#10;              style: const TextStyle(&#10;                fontSize: 18,&#10;                fontWeight: FontWeight.bold,&#10;                fontFamily: 'Quicksand',&#10;              ),&#10;            ),&#10;            const SizedBox(height: 16),&#10;            ...children,&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildInfoRow(String label, String value, IconData icon) {&#10;    return Padding(&#10;      padding: const EdgeInsets.only(bottom: 12),&#10;      child: Row(&#10;        children: [&#10;          Icon(icon, color: Colors.grey[600], size: 20),&#10;          const SizedBox(width: 12),&#10;          Expanded(&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              children: [&#10;                Text(&#10;                  label,&#10;                  style: TextStyle(&#10;                    fontSize: 12,&#10;                    color: Colors.grey[600],&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                const SizedBox(height: 2),&#10;                Text(&#10;                  value,&#10;                  style: const TextStyle(&#10;                    fontSize: 16,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildSchedulesCard() {&#10;    return Card(&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(16),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Row(&#10;              children: [&#10;                const Text(&#10;                  'Lịch trình công việc',&#10;                  style: TextStyle(&#10;                    fontSize: 18,&#10;                    fontWeight: FontWeight.bold,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                const Spacer(),&#10;                Container(&#10;                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),&#10;                  decoration: BoxDecoration(&#10;                    color: Colors.green.withOpacity(0.1),&#10;                    borderRadius: BorderRadius.circular(12),&#10;                  ),&#10;                  child: Text(&#10;                    '${widget.request.schedules.length} ca làm',&#10;                    style: const TextStyle(&#10;                      fontSize: 12,&#10;                      color: Colors.green,&#10;                      fontWeight: FontWeight.bold,&#10;                    ),&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;            const SizedBox(height: 16),&#10;            if (widget.request.schedules.isEmpty)&#10;              const Center(&#10;                child: Padding(&#10;                  padding: EdgeInsets.all(20),&#10;                  child: Text(&#10;                    'Chưa có lịch trình nào được tạo',&#10;                    style: TextStyle(&#10;                      color: Colors.grey,&#10;                      fontFamily: 'Quicksand',&#10;                    ),&#10;                  ),&#10;                ),&#10;              )&#10;            else&#10;              ...widget.request.schedules.map((schedule) =&gt; _buildScheduleItem(schedule)),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildScheduleItem(Schedule schedule) {&#10;    Color statusColor;&#10;    IconData statusIcon;&#10;    String statusText;&#10;&#10;    switch (schedule.status.toLowerCase()) {&#10;      case 'pending':&#10;        statusColor = Colors.orange;&#10;        statusIcon = Icons.schedule;&#10;        statusText = 'Chờ thực hiện';&#10;        break;&#10;      case 'in_progress':&#10;        statusColor = Colors.blue;&#10;        statusIcon = Icons.work;&#10;        statusText = 'Đang thực hiện';&#10;        break;&#10;      case 'completed':&#10;        statusColor = Colors.green;&#10;        statusIcon = Icons.check_circle;&#10;        statusText = 'Hoàn thành';&#10;        break;&#10;      case 'cancelled':&#10;        statusColor = Colors.red;&#10;        statusIcon = Icons.cancel;&#10;        statusText = 'Đã hủy';&#10;        break;&#10;      default:&#10;        statusColor = Colors.grey;&#10;        statusIcon = Icons.help;&#10;        statusText = schedule.status;&#10;    }&#10;&#10;    return Container(&#10;      margin: const EdgeInsets.only(bottom: 12),&#10;      padding: const EdgeInsets.all(12),&#10;      decoration: BoxDecoration(&#10;        border: Border.all(color: Colors.grey[300]!),&#10;        borderRadius: BorderRadius.circular(8),&#10;      ),&#10;      child: Column(&#10;        crossAxisAlignment: CrossAxisAlignment.start,&#10;        children: [&#10;          Row(&#10;            children: [&#10;              Icon(statusIcon, color: statusColor, size: 20),&#10;              const SizedBox(width: 8),&#10;              Text(&#10;                statusText,&#10;                style: TextStyle(&#10;                  color: statusColor,&#10;                  fontWeight: FontWeight.bold,&#10;                  fontFamily: 'Quicksand',&#10;                ),&#10;              ),&#10;              const Spacer(),&#10;              Text(&#10;                &quot;${NumberFormat('#,###').format(schedule.helperCost)} VNĐ&quot;,&#10;                style: const TextStyle(&#10;                  fontWeight: FontWeight.bold,&#10;                  color: Colors.green,&#10;                ),&#10;              ),&#10;            ],&#10;          ),&#10;          const SizedBox(height: 8),&#10;          Row(&#10;            children: [&#10;              const Icon(Icons.calendar_today, size: 16, color: Colors.grey),&#10;              const SizedBox(width: 4),&#10;              Text(_formatDate(schedule.workingDate)),&#10;            ],&#10;          ),&#10;          const SizedBox(height: 4),&#10;          Row(&#10;            children: [&#10;              const Icon(Icons.access_time, size: 16, color: Colors.grey),&#10;              const SizedBox(width: 4),&#10;              Text('${_formatTime(schedule.startTime)} - ${_formatTime(schedule.endTime)}'),&#10;            ],&#10;          ),&#10;          if (schedule.comment.review.isNotEmpty) ...[&#10;            const SizedBox(height: 8),&#10;            Container(&#10;              padding: const EdgeInsets.all(8),&#10;              decoration: BoxDecoration(&#10;                color: Colors.grey[100],&#10;                borderRadius: BorderRadius.circular(6),&#10;              ),&#10;              child: Column(&#10;                crossAxisAlignment: CrossAxisAlignment.start,&#10;                children: [&#10;                  const Text(&#10;                    'Đánh giá:',&#10;                    style: TextStyle(&#10;                      fontWeight: FontWeight.bold,&#10;                      fontSize: 12,&#10;                    ),&#10;                  ),&#10;                  Text(schedule.comment.review),&#10;                  if (schedule.comment.loseThings || schedule.comment.breakThings) ...[&#10;                    const SizedBox(height: 4),&#10;                    Row(&#10;                      children: [&#10;                        if (schedule.comment.loseThings)&#10;                          const Chip(&#10;                            label: Text('Làm mất đồ', style: TextStyle(fontSize: 10)),&#10;                            backgroundColor: Colors.red,&#10;                            labelStyle: TextStyle(color: Colors.white),&#10;                          ),&#10;                        if (schedule.comment.breakThings) ...[&#10;                          if (schedule.comment.loseThings) const SizedBox(width: 8),&#10;                          const Chip(&#10;                            label: Text('Làm hỏng đồ', style: TextStyle(fontSize: 10)),&#10;                            backgroundColor: Colors.orange,&#10;                            labelStyle: TextStyle(color: Colors.white),&#10;                          ),&#10;                        ],&#10;                      ],&#10;                    ),&#10;                  ],&#10;                ],&#10;              ),&#10;            ),&#10;          ],&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildActionButtons() {&#10;    return Row(&#10;      children: [&#10;        if (widget.request.status.toLowerCase() == 'pending') ...[&#10;          Expanded(&#10;            child: OutlinedButton(&#10;              onPressed: () =&gt; _showCancelDialog(),&#10;              style: OutlinedButton.styleFrom(&#10;                foregroundColor: Colors.red,&#10;                side: const BorderSide(color: Colors.red),&#10;              ),&#10;              child: const Text('Hủy đơn'),&#10;            ),&#10;          ),&#10;          const SizedBox(width: 16),&#10;          Expanded(&#10;            child: ElevatedButton(&#10;              onPressed: () =&gt; _confirmOrder(),&#10;              style: ElevatedButton.styleFrom(backgroundColor: Colors.green),&#10;              child: const Text('Xác nhận', style: TextStyle(color: Colors.white)),&#10;            ),&#10;          ),&#10;        ] else if (widget.request.status.toLowerCase() == 'confirmed') ...[&#10;          Expanded(&#10;            child: ElevatedButton(&#10;              onPressed: () =&gt; _startWork(),&#10;              style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),&#10;              child: const Text('Bắt đầu làm việc', style: TextStyle(color: Colors.white)),&#10;            ),&#10;          ),&#10;        ] else if (widget.request.status.toLowerCase() == 'in_progress') ...[&#10;          Expanded(&#10;            child: ElevatedButton(&#10;              onPressed: () =&gt; _completeWork(),&#10;              style: ElevatedButton.styleFrom(backgroundColor: Colors.green),&#10;              child: const Text('Hoàn thành', style: TextStyle(color: Colors.white)),&#10;            ),&#10;          ),&#10;        ],&#10;      ],&#10;    );&#10;  }&#10;&#10;  String _formatDate(String dateString) {&#10;    try {&#10;      final DateTime date = DateTime.parse(dateString);&#10;      return DateFormat('dd/MM/yyyy').format(date);&#10;    } catch (e) {&#10;      return dateString;&#10;    }&#10;  }&#10;&#10;  String _formatDateTime(DateTime dateTime) {&#10;    return DateFormat('dd/MM/yyyy HH:mm').format(dateTime);&#10;  }&#10;&#10;  String _formatTime(DateTime dateTime) {&#10;    return DateFormat('HH:mm').format(dateTime);&#10;  }&#10;&#10;  void _showCancelDialog() {&#10;    showDialog(&#10;      context: context,&#10;      builder: (context) =&gt; AlertDialog(&#10;        title: const Text('Xác nhận hủy'),&#10;        content: const Text('Bạn có chắc chắn muốn hủy đơn hàng này?'),&#10;        actions: [&#10;          TextButton(&#10;            onPressed: () =&gt; Navigator.pop(context),&#10;            child: const Text('Không'),&#10;          ),&#10;          TextButton(&#10;            onPressed: () {&#10;              Navigator.pop(context);&#10;              ScaffoldMessenger.of(context).showSnackBar(&#10;                const SnackBar(content: Text('Đã hủy đơn hàng')),&#10;              );&#10;            },&#10;            style: TextButton.styleFrom(foregroundColor: Colors.red),&#10;            child: const Text('Hủy đơn'),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  void _confirmOrder() {&#10;    ScaffoldMessenger.of(context).showSnackBar(&#10;      const SnackBar(content: Text('Đã xác nhận đơn hàng')),&#10;    );&#10;  }&#10;&#10;  void _startWork() {&#10;    ScaffoldMessenger.of(context).showSnackBar(&#10;      const SnackBar(content: Text('Đã bắt đầu làm việc')),&#10;    );&#10;  }&#10;&#10;  void _completeWork() {&#10;    ScaffoldMessenger.of(context).showSnackBar(&#10;      const SnackBar(content: Text('Đã hoàn thành công việc')),&#10;    );&#10;  }&#10;&#10;  String _formatCurrency(num amount) {&#10;    return NumberFormat('#,###').format(amount) + ' VNĐ';&#10;  }&#10;&#10;  String _formatRequestType(String requestType) {&#10;    switch (requestType.toLowerCase()) {&#10;      case 'short_term':&#10;        return 'Ngắn hạn';&#10;      case 'long_term':&#10;        return 'Dài hạn';&#10;      default:&#10;        return requestType;&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/pages/personal_info_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/pages/personal_info_page.dart" />
              <option name="originalContent" value="                _buildReadOnlyField(&quot;Trình độ học vấn&quot;, widget.helper.educationLevel ?? &quot;Không có thông tin&quot;, Icons.school),&#10;              ]),&#10;&#10;              if (_isEditing) ...[&#10;                const SizedBox(height: 24),&#10;                Row(&#10;                  children: [&#10;                    Expanded(&#10;                      child: OutlinedButton(&#10;                        onPressed: () {&#10;                          setState(() {&#10;                            _isEditing = false;&#10;                            // Reset controllers&#10;                            _fullNameController.text = widget.helper.fullName ?? '';&#10;                            _phoneController.text = widget.helper.phone ?? '';&#10;                            _addressController.text = widget.helper.address ?? '';&#10;                            _experienceController.text = widget.helper.experienceDescription ?? '';&#10;                          });&#10;                        },&#10;                        child: const Text(&quot;Hủy&quot;),&#10;                      ),&#10;                    ),&#10;                    const SizedBox(width: 16),&#10;                    Expanded(&#10;                      child: ElevatedButton(&#10;                        onPressed: () {&#10;                          if (_formKey.currentState!.validate()) {&#10;                            // TODO: Save changes&#10;                            ScaffoldMessenger.of(context).showSnackBar(&#10;                              const SnackBar(content: Text(&quot;Đã lưu thay đổi&quot;)),&#10;                            );&#10;                            setState(() {&#10;                              _isEditing = false;&#10;                            });&#10;                          }&#10;                        },&#10;                        style: ElevatedButton.styleFrom(backgroundColor: Colors.green),&#10;                        child: const Text(&quot;Lưu&quot;, style: TextStyle(color: Colors.white)),&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ],&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildAvatarSection() {&#10;    return Center(&#10;      child: Stack(&#10;        children: [&#10;          CircleAvatar(&#10;            radius: 60,&#10;            backgroundImage: widget.helper.avatar != null&#10;                ? NetworkImage(widget.helper.avatar!)&#10;                : const AssetImage('lib/images/staff/anhhuy.jpg') as ImageProvider,&#10;            child: widget.helper.avatar == null&#10;                ? const Icon(Icons.person, size: 60, color: Colors.grey)&#10;                : null,&#10;          ),&#10;          if (_isEditing)&#10;            Positioned(&#10;              bottom: 0,&#10;              right: 0,&#10;              child: Container(&#10;                decoration: const BoxDecoration(&#10;                  color: Colors.green,&#10;                  shape: BoxShape.circle,&#10;                ),&#10;                child: IconButton(&#10;                  onPressed: () {&#10;                    // TODO: Implement image picker&#10;                    ScaffoldMessenger.of(context).showSnackBar(&#10;                      const SnackBar(content: Text(&quot;Chức năng chọn ảnh sẽ được thêm&quot;)),&#10;                    );&#10;                  },&#10;                  icon: const Icon(Icons.camera_alt, color: Colors.white),&#10;                ),&#10;              ),&#10;            ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildInfoCard(String title, List&lt;Widget&gt; children) {&#10;    return Card(&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(16),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Text(&#10;              title,&#10;              style: const TextStyle(&#10;                fontSize: 18,&#10;                fontWeight: FontWeight.bold,&#10;                fontFamily: 'Quicksand',&#10;              ),&#10;            ),&#10;            const SizedBox(height: 16),&#10;            ...children,&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildEditableField(String label, TextEditingController controller, IconData icon, {int maxLines = 1}) {&#10;    return Padding(&#10;      padding: const EdgeInsets.only(bottom: 16),&#10;      child: TextFormField(&#10;        controller: controller,&#10;        enabled: _isEditing,&#10;        maxLines: maxLines,&#10;        decoration: InputDecoration(&#10;          labelText: label,&#10;          prefixIcon: Icon(icon),&#10;          border: const OutlineInputBorder(),&#10;        ),&#10;        validator: (value) {&#10;          if (value == null || value.isEmpty) {&#10;            return 'Vui lòng nhập $label';&#10;          }&#10;          return null;&#10;        },&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildReadOnlyField(String label, String value, IconData icon) {&#10;    return Padding(&#10;      padding: const EdgeInsets.only(bottom: 16),&#10;      child: Row(&#10;        children: [&#10;          Icon(icon, color: Colors.grey[600]),&#10;          const SizedBox(width: 12),&#10;          Expanded(&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              children: [&#10;                Text(&#10;                  label,&#10;                  style: TextStyle(&#10;                    fontSize: 12,&#10;                    color: Colors.grey[600],&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                const SizedBox(height: 4),&#10;                Text(&#10;                  value,&#10;                  style: const TextStyle(&#10;                    fontSize: 16,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;import 'package:flutter/material.dart';&#10;import 'package:homecare_helper/data/model/helper.dart';&#10;import 'package:intl/intl.dart';&#10;&#10;class PersonalInfoPage extends StatefulWidget {&#10;  final Helper helper;&#10;&#10;  const PersonalInfoPage({Key? key, required this.helper}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;PersonalInfoPage&gt; createState() =&gt; _PersonalInfoPageState();&#10;}&#10;&#10;class _PersonalInfoPageState extends State&lt;PersonalInfoPage&gt; {&#10;  final _formKey = GlobalKey&lt;FormState&gt;();&#10;  late TextEditingController _fullNameController;&#10;  late TextEditingController _phoneController;&#10;  late TextEditingController _addressController;&#10;  late TextEditingController _experienceController;&#10;  bool _isEditing = false;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _fullNameController = TextEditingController(text: widget.helper.fullName ?? '');&#10;    _phoneController = TextEditingController(text: widget.helper.phone ?? '');&#10;    _addressController = TextEditingController(text: widget.helper.address ?? '');&#10;    _experienceController = TextEditingController(text: widget.helper.experienceDescription ?? '');&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _fullNameController.dispose();&#10;    _phoneController.dispose();&#10;    _addressController.dispose();&#10;    _experienceController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  String _formatDate(String? dateString) {&#10;    if (dateString == null) return 'Không có thông tin';&#10;    try {&#10;      final date = DateTime.parse(dateString);&#10;      return DateFormat('dd/MM/yyyy').format(date);&#10;    } catch (e) {&#10;      return dateString;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text(&#10;          &quot;Thông tin cá nhân&quot;,&#10;          style: TextStyle(&#10;            fontWeight: FontWeight.bold,&#10;            fontSize: 20,&#10;            color: Colors.white,&#10;            fontFamily: 'Quicksand',&#10;          ),&#10;        ),&#10;        centerTitle: true,&#10;        backgroundColor: Colors.green,&#10;        iconTheme: const IconThemeData(color: Colors.white),&#10;        actions: [&#10;          IconButton(&#10;            onPressed: () {&#10;              setState(() {&#10;                _isEditing = !_isEditing;&#10;              });&#10;            },&#10;            icon: Icon(_isEditing ? Icons.close : Icons.edit),&#10;          ),&#10;        ],&#10;      ),&#10;      body: SingleChildScrollView(&#10;        padding: const EdgeInsets.all(16),&#10;        child: Form(&#10;          key: _formKey,&#10;          child: Column(&#10;            children: [&#10;              // Avatar section&#10;              _buildAvatarSection(),&#10;              const SizedBox(height: 24),&#10;&#10;              // Basic info&#10;              _buildInfoCard(&quot;Thông tin cơ bản&quot;, [&#10;                _buildEditableField(&quot;Họ và tên&quot;, _fullNameController, Icons.person),&#10;                _buildEditableField(&quot;Số điện thoại&quot;, _phoneController, Icons.phone),&#10;                _buildEditableField(&quot;Địa chỉ&quot;, _addressController, Icons.location_on),&#10;                _buildReadOnlyField(&quot;Giới tính&quot;, widget.helper.gender ?? &quot;Không có thông tin&quot;, Icons.wc),&#10;                _buildReadOnlyField(&quot;Ngày sinh&quot;, _formatDate(widget.helper.birthDay), Icons.cake),&#10;                _buildReadOnlyField(&quot;Nơi sinh&quot;, widget.helper.birthPlace ?? &quot;Không có thông tin&quot;, Icons.place),&#10;              ]),&#10;&#10;              const SizedBox(height: 16),&#10;&#10;              // Work info&#10;              _buildInfoCard(&quot;Thông tin công việc&quot;, [&#10;                _buildReadOnlyField(&quot;Mã nhân viên&quot;, widget.helper.helperId ?? &quot;Không có thông tin&quot;, Icons.badge),&#10;                _buildReadOnlyField(&quot;Ngày bắt đầu&quot;, _formatDate(widget.helper.startDate), Icons.work),&#10;                _buildReadOnlyField(&quot;Kinh nghiệm&quot;, &quot;${widget.helper.yearOfExperience} năm&quot;, Icons.timeline),&#10;                _buildEditableField(&quot;Mô tả kinh nghiệm&quot;, _experienceController, Icons.description, maxLines: 3),&#10;                _buildReadOnlyField(&quot;Trạng thái&quot;, widget.helper.status ?? &quot;Không có thông tin&quot;, Icons.info),&#10;              ]),&#10;&#10;              const SizedBox(height: 16),&#10;&#10;              // Physical info&#10;              _buildInfoCard(&quot;Thông tin sức khỏe&quot;, [&#10;                _buildReadOnlyField(&quot;Chiều cao&quot;, &quot;${widget.helper.height} cm&quot;, Icons.height),&#10;                _buildReadOnlyField(&quot;Cân nặng&quot;, &quot;${widget.helper.weight} kg&quot;, Icons.monitor_weight),&#10;                _buildReadOnlyField(&quot;Quốc tịch&quot;, widget.helper.nationality ?? &quot;Không có thông tin&quot;, Icons.flag),&#10;&#10;" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:homecare_helper/data/model/helper.dart';&#10;import 'package:intl/intl.dart';&#10;&#10;class PersonalInfoPage extends StatefulWidget {&#10;  final Helper helper;&#10;&#10;  const PersonalInfoPage({Key? key, required this.helper}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;PersonalInfoPage&gt; createState() =&gt; _PersonalInfoPageState();&#10;}&#10;&#10;class _PersonalInfoPageState extends State&lt;PersonalInfoPage&gt; {&#10;  final _formKey = GlobalKey&lt;FormState&gt;();&#10;  late TextEditingController _fullNameController;&#10;  late TextEditingController _phoneController;&#10;  late TextEditingController _addressController;&#10;  late TextEditingController _experienceController;&#10;  bool _isEditing = false;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _fullNameController = TextEditingController(text: widget.helper.fullName ?? '');&#10;    _phoneController = TextEditingController(text: widget.helper.phone ?? '');&#10;    _addressController = TextEditingController(text: widget.helper.address ?? '');&#10;    _experienceController = TextEditingController(text: widget.helper.experienceDescription ?? '');&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _fullNameController.dispose();&#10;    _phoneController.dispose();&#10;    _addressController.dispose();&#10;    _experienceController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  String _formatDate(String? dateString) {&#10;    if (dateString == null) return 'Không có thông tin';&#10;    try {&#10;      final date = DateTime.parse(dateString);&#10;      return DateFormat('dd/MM/yyyy').format(date);&#10;    } catch (e) {&#10;      return dateString;&#10;    }&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text(&#10;          &quot;Thông tin cá nhân&quot;,&#10;          style: TextStyle(&#10;            fontWeight: FontWeight.bold,&#10;            fontSize: 20,&#10;            color: Colors.white,&#10;            fontFamily: 'Quicksand',&#10;          ),&#10;        ),&#10;        centerTitle: true,&#10;        backgroundColor: Colors.green,&#10;        iconTheme: const IconThemeData(color: Colors.white),&#10;        actions: [&#10;          IconButton(&#10;            onPressed: () {&#10;              setState(() {&#10;                _isEditing = !_isEditing;&#10;              });&#10;            },&#10;            icon: Icon(_isEditing ? Icons.close : Icons.edit),&#10;          ),&#10;        ],&#10;      ),&#10;      body: SingleChildScrollView(&#10;        padding: const EdgeInsets.all(16),&#10;        child: Form(&#10;          key: _formKey,&#10;          child: Column(&#10;            children: [&#10;              // Avatar section&#10;              _buildAvatarSection(),&#10;              const SizedBox(height: 24),&#10;&#10;              // Basic info&#10;              _buildInfoCard(&quot;Thông tin cơ bản&quot;, [&#10;                _buildEditableField(&quot;Họ và tên&quot;, _fullNameController, Icons.person),&#10;                _buildEditableField(&quot;Số điện thoại&quot;, _phoneController, Icons.phone),&#10;                _buildEditableField(&quot;Địa chỉ&quot;, _addressController, Icons.location_on),&#10;                _buildReadOnlyField(&quot;Giới tính&quot;, widget.helper.gender ?? &quot;Không có thông tin&quot;, Icons.wc),&#10;                _buildReadOnlyField(&quot;Ngày sinh&quot;, _formatDate(widget.helper.birthDay), Icons.cake),&#10;                _buildReadOnlyField(&quot;Nơi sinh&quot;, widget.helper.birthPlace ?? &quot;Không có thông tin&quot;, Icons.place),&#10;              ]),&#10;&#10;              const SizedBox(height: 16),&#10;&#10;              // Work info&#10;              _buildInfoCard(&quot;Thông tin công việc&quot;, [&#10;                _buildReadOnlyField(&quot;Mã nhân viên&quot;, widget.helper.helperId ?? &quot;Không có thông tin&quot;, Icons.badge),&#10;                _buildReadOnlyField(&quot;Ngày bắt đầu&quot;, _formatDate(widget.helper.startDate), Icons.work),&#10;                _buildReadOnlyField(&quot;Kinh nghiệm&quot;, &quot;${widget.helper.yearOfExperience} năm&quot;, Icons.timeline),&#10;                _buildEditableField(&quot;Mô tả kinh nghiệm&quot;, _experienceController, Icons.description, maxLines: 3),&#10;                _buildReadOnlyField(&quot;Trạng thái&quot;, widget.helper.status ?? &quot;Không có thông tin&quot;, Icons.info),&#10;              ]),&#10;&#10;              const SizedBox(height: 16),&#10;&#10;              // Physical info&#10;              _buildInfoCard(&quot;Thông tin sức khỏe&quot;, [&#10;                _buildReadOnlyField(&quot;Chiều cao&quot;, &quot;${widget.helper.height} cm&quot;, Icons.height),&#10;                _buildReadOnlyField(&quot;Cân nặng&quot;, &quot;${widget.helper.weight} kg&quot;, Icons.monitor_weight),&#10;                _buildReadOnlyField(&quot;Quốc tịch&quot;, widget.helper.nationality ?? &quot;Không có thông tin&quot;, Icons.flag),&#10;                _buildReadOnlyField(&quot;Trình độ học vấn&quot;, widget.helper.educationLevel ?? &quot;Không có thông tin&quot;, Icons.school),&#10;              ]),&#10;&#10;              if (_isEditing) ...[&#10;                const SizedBox(height: 24),&#10;                Row(&#10;                  children: [&#10;                    Expanded(&#10;                      child: OutlinedButton(&#10;                        onPressed: () {&#10;                          setState(() {&#10;                            _isEditing = false;&#10;                            // Reset controllers&#10;                            _fullNameController.text = widget.helper.fullName ?? '';&#10;                            _phoneController.text = widget.helper.phone ?? '';&#10;                            _addressController.text = widget.helper.address ?? '';&#10;                            _experienceController.text = widget.helper.experienceDescription ?? '';&#10;                          });&#10;                        },&#10;                        child: const Text(&quot;Hủy&quot;),&#10;                      ),&#10;                    ),&#10;                    const SizedBox(width: 16),&#10;                    Expanded(&#10;                      child: ElevatedButton(&#10;                        onPressed: () {&#10;                          if (_formKey.currentState!.validate()) {&#10;                            // TODO: Save changes&#10;                            ScaffoldMessenger.of(context).showSnackBar(&#10;                              const SnackBar(content: Text(&quot;Đã lưu thay đổi&quot;)),&#10;                            );&#10;                            setState(() {&#10;                              _isEditing = false;&#10;                            });&#10;                          }&#10;                        },&#10;                        style: ElevatedButton.styleFrom(backgroundColor: Colors.green),&#10;                        child: const Text(&quot;Lưu&quot;, style: TextStyle(color: Colors.white)),&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ],&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildAvatarSection() {&#10;    return Center(&#10;      child: Stack(&#10;        children: [&#10;          CircleAvatar(&#10;            radius: 60,&#10;            backgroundImage: widget.helper.avatar != null&#10;                ? NetworkImage(widget.helper.avatar!)&#10;                : const AssetImage('lib/images/staff/anhhuy.jpg') as ImageProvider,&#10;            child: widget.helper.avatar == null&#10;                ? const Icon(Icons.person, size: 60, color: Colors.grey)&#10;                : null,&#10;          ),&#10;          if (_isEditing)&#10;            Positioned(&#10;              bottom: 0,&#10;              right: 0,&#10;              child: Container(&#10;                decoration: const BoxDecoration(&#10;                  color: Colors.green,&#10;                  shape: BoxShape.circle,&#10;                ),&#10;                child: IconButton(&#10;                  onPressed: () {&#10;                    // TODO: Implement image picker&#10;                    ScaffoldMessenger.of(context).showSnackBar(&#10;                      const SnackBar(content: Text(&quot;Chức năng chọn ảnh sẽ được thêm&quot;)),&#10;                    );&#10;                  },&#10;                  icon: const Icon(Icons.camera_alt, color: Colors.white),&#10;                ),&#10;              ),&#10;            ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildInfoCard(String title, List&lt;Widget&gt; children) {&#10;    return Card(&#10;      child: Padding(&#10;        padding: const EdgeInsets.all(16),&#10;        child: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Text(&#10;              title,&#10;              style: const TextStyle(&#10;                fontSize: 18,&#10;                fontWeight: FontWeight.bold,&#10;                fontFamily: 'Quicksand',&#10;              ),&#10;            ),&#10;            const SizedBox(height: 16),&#10;            ...children,&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildEditableField(String label, TextEditingController controller, IconData icon, {int maxLines = 1}) {&#10;    return Padding(&#10;      padding: const EdgeInsets.only(bottom: 16),&#10;      child: TextFormField(&#10;        controller: controller,&#10;        enabled: _isEditing,&#10;        maxLines: maxLines,&#10;        decoration: InputDecoration(&#10;          labelText: label,&#10;          prefixIcon: Icon(icon),&#10;          border: const OutlineInputBorder(),&#10;        ),&#10;        validator: (value) {&#10;          if (value == null || value.isEmpty) {&#10;            return 'Vui lòng nhập $label';&#10;          }&#10;          return null;&#10;        },&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildReadOnlyField(String label, String value, IconData icon) {&#10;    return Padding(&#10;      padding: const EdgeInsets.only(bottom: 16),&#10;      child: Row(&#10;        children: [&#10;          Icon(icon, color: Colors.grey[600]),&#10;          const SizedBox(width: 12),&#10;          Expanded(&#10;            child: Column(&#10;              crossAxisAlignment: CrossAxisAlignment.start,&#10;              children: [&#10;                Text(&#10;                  label,&#10;                  style: TextStyle(&#10;                    fontSize: 12,&#10;                    color: Colors.grey[600],&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;                const SizedBox(height: 4),&#10;                Text(&#10;                  value,&#10;                  style: const TextStyle(&#10;                    fontSize: 16,&#10;                    fontFamily: 'Quicksand',&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/pages/schedule_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/pages/schedule_page.dart" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:homecare_helper/data/model/helper.dart';&#10;import 'package:intl/intl.dart';&#10;import 'package:table_calendar/table_calendar.dart';&#10;&#10;class SchedulePage extends StatefulWidget {&#10;  final Helper helper;&#10;&#10;  const SchedulePage({Key? key, required this.helper}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;SchedulePage&gt; createState() =&gt; _SchedulePageState();&#10;}&#10;&#10;class _SchedulePageState extends State&lt;SchedulePage&gt; {&#10;  CalendarFormat _calendarFormat = CalendarFormat.month;&#10;  DateTime _focusedDay = DateTime.now();&#10;  DateTime? _selectedDay;&#10;  &#10;  // Mock data for schedules&#10;  Map&lt;DateTime, List&lt;Schedule&gt;&gt; _schedules = {};&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _selectedDay = DateTime.now();&#10;    _loadMockSchedules();&#10;  }&#10;&#10;  void _loadMockSchedules() {&#10;    final today = DateTime.now();&#10;    _schedules = {&#10;      today: [&#10;        Schedule(&#10;          id: '1',&#10;          title: 'Chăm sóc bà Nguyễn Thị Lan',&#10;          startTime: '08:00',&#10;          endTime: '12:00',&#10;          address: '123 Nguyễn Trãi, Q1, TP.HCM',&#10;          status: ScheduleStatus.confirmed,&#10;        ),&#10;        Schedule(&#10;          id: '2',&#10;          title: 'Chăm sóc ông Trần Văn Nam',&#10;          startTime: '14:00',&#10;          endTime: '18:00',&#10;          address: '456 Lê Lợi, Q3, TP.HCM',&#10;          status: ScheduleStatus.pending,&#10;        ),&#10;      ],&#10;      today.add(const Duration(days: 1)): [&#10;        Schedule(&#10;          id: '3',&#10;          title: 'Chăm sóc bà Phạm Thị Hoa',&#10;          startTime: '09:00',&#10;          endTime: '15:00',&#10;          address: '789 Hai Bà Trưng, Q1, TP.HCM',&#10;          status: ScheduleStatus.confirmed,&#10;        ),&#10;      ],&#10;      today.add(const Duration(days: 2)): [&#10;        Schedule(&#10;          id: '4',&#10;          title: 'Nghỉ phép',&#10;          startTime: '00:00',&#10;          endTime: '23:59',&#10;          address: '',&#10;          status: ScheduleStatus.leave,&#10;        ),&#10;      ],&#10;    };&#10;  }&#10;&#10;  List&lt;Schedule&gt; _getSchedulesForDay(DateTime day) {&#10;    return _schedules[DateTime(day.year, day.month, day.day)] ?? [];&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text(&#10;          &quot;Lịch làm việc&quot;,&#10;          style: TextStyle(&#10;            fontWeight: FontWeight.bold,&#10;            fontSize: 20,&#10;            color: Colors.white,&#10;            fontFamily: 'Quicksand',&#10;          ),&#10;        ),&#10;        centerTitle: true,&#10;        backgroundColor: Colors.green,&#10;        iconTheme: const IconThemeData(color: Colors.white),&#10;        actions: [&#10;          IconButton(&#10;            onPressed: () =&gt; _showAddScheduleDialog(),&#10;            icon: const Icon(Icons.add),&#10;          ),&#10;        ],&#10;      ),&#10;      body: Column(&#10;        children: [&#10;          // Calendar&#10;          Card(&#10;            margin: const EdgeInsets.all(8),&#10;            child: TableCalendar&lt;Schedule&gt;(&#10;              firstDay: DateTime.utc(2020, 1, 1),&#10;              lastDay: DateTime.utc(2030, 12, 31),&#10;              focusedDay: _focusedDay,&#10;              calendarFormat: _calendarFormat,&#10;              eventLoader: _getSchedulesForDay,&#10;              startingDayOfWeek: StartingDayOfWeek.monday,&#10;              selectedDayPredicate: (day) {&#10;                return isSameDay(_selectedDay, day);&#10;              },&#10;              onDaySelected: (selectedDay, focusedDay) {&#10;                setState(() {&#10;                  _selectedDay = selectedDay;&#10;                  _focusedDay = focusedDay;&#10;                });&#10;              },&#10;              onFormatChanged: (format) {&#10;                setState(() {&#10;                  _calendarFormat = format;&#10;                });&#10;              },&#10;              calendarStyle: const CalendarStyle(&#10;                outsideDaysVisible: false,&#10;                markerDecoration: BoxDecoration(&#10;                  color: Colors.green,&#10;                  shape: BoxShape.circle,&#10;                ),&#10;                selectedDecoration: BoxDecoration(&#10;                  color: Colors.green,&#10;                  shape: BoxShape.circle,&#10;                ),&#10;                todayDecoration: BoxDecoration(&#10;                  color: Colors.orange,&#10;                  shape: BoxShape.circle,&#10;                ),&#10;              ),&#10;              headerStyle: const HeaderStyle(&#10;                formatButtonVisible: true,&#10;                titleCentered: true,&#10;                formatButtonDecoration: BoxDecoration(&#10;                  color: Colors.green,&#10;                  borderRadius: BorderRadius.all(Radius.circular(12)),&#10;                ),&#10;                formatButtonTextStyle: TextStyle(color: Colors.white),&#10;              ),&#10;            ),&#10;          ),&#10;&#10;          // Schedule list for selected day&#10;          Expanded(&#10;            child: Container(&#10;              padding: const EdgeInsets.all(16),&#10;              child: Column(&#10;                crossAxisAlignment: CrossAxisAlignment.start,&#10;                children: [&#10;                  Text(&#10;                    'Lịch trình ngày ${DateFormat('dd/MM/yyyy').format(_selectedDay ?? DateTime.now())}',&#10;                    style: const TextStyle(&#10;                      fontSize: 18,&#10;                      fontWeight: FontWeight.bold,&#10;                      fontFamily: 'Quicksand',&#10;                    ),&#10;                  ),&#10;                  const SizedBox(height: 16),&#10;                  Expanded(&#10;                    child: _buildScheduleList(),&#10;                  ),&#10;                ],&#10;              ),&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildScheduleList() {&#10;    final schedules = _getSchedulesForDay(_selectedDay ?? DateTime.now());&#10;    &#10;    if (schedules.isEmpty) {&#10;      return const Center(&#10;        child: Column(&#10;          mainAxisAlignment: MainAxisAlignment.center,&#10;          children: [&#10;            Icon(Icons.calendar_today, size: 64, color: Colors.grey),&#10;            SizedBox(height: 16),&#10;            Text(&#10;              'Không có lịch trình nào',&#10;              style: TextStyle(&#10;                fontSize: 16,&#10;                color: Colors.grey,&#10;                fontFamily: 'Quicksand',&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      );&#10;    }&#10;&#10;    return ListView.builder(&#10;      itemCount: schedules.length,&#10;      itemBuilder: (context, index) {&#10;        final schedule = schedules[index];&#10;        return _buildScheduleCard(schedule);&#10;      },&#10;    );&#10;  }&#10;&#10;  Widget _buildScheduleCard(Schedule schedule) {&#10;    Color statusColor;&#10;    IconData statusIcon;&#10;    String statusText;&#10;&#10;    switch (schedule.status) {&#10;      case ScheduleStatus.confirmed:&#10;        statusColor = Colors.green;&#10;        statusIcon = Icons.check_circle;&#10;        statusText = 'Đã xác nhận';&#10;        break;&#10;      case ScheduleStatus.pending:&#10;        statusColor = Colors.orange;&#10;        statusIcon = Icons.schedule;&#10;        statusText = 'Chờ xác nhận';&#10;        break;&#10;      case ScheduleStatus.cancelled:&#10;        statusColor = Colors.red;&#10;        statusIcon = Icons.cancel;&#10;        statusText = 'Đã hủy';&#10;        break;&#10;      case ScheduleStatus.leave:&#10;        statusColor = Colors.blue;&#10;        statusIcon = Icons.beach_access;&#10;        statusText = 'Nghỉ phép';&#10;        break;&#10;    }&#10;&#10;    return Card(&#10;      margin: const EdgeInsets.only(bottom: 8),&#10;      child: ListTile(&#10;        leading: CircleAvatar(&#10;          backgroundColor: statusColor,&#10;          child: Icon(statusIcon, color: Colors.white),&#10;        ),&#10;        title: Text(&#10;          schedule.title,&#10;          style: const TextStyle(&#10;            fontWeight: FontWeight.bold,&#10;            fontFamily: 'Quicksand',&#10;          ),&#10;        ),&#10;        subtitle: Column(&#10;          crossAxisAlignment: CrossAxisAlignment.start,&#10;          children: [&#10;            Row(&#10;              children: [&#10;                const Icon(Icons.access_time, size: 16, color: Colors.grey),&#10;                const SizedBox(width: 4),&#10;                Text('${schedule.startTime} - ${schedule.endTime}'),&#10;              ],&#10;            ),&#10;            if (schedule.address.isNotEmpty) ...[&#10;              const SizedBox(height: 4),&#10;              Row(&#10;                children: [&#10;                  const Icon(Icons.location_on, size: 16, color: Colors.grey),&#10;                  const SizedBox(width: 4),&#10;                  Expanded(child: Text(schedule.address)),&#10;                ],&#10;              ),&#10;            ],&#10;            const SizedBox(height: 4),&#10;            Row(&#10;              children: [&#10;                Icon(statusIcon, size: 16, color: statusColor),&#10;                const SizedBox(width: 4),&#10;                Text(statusText, style: TextStyle(color: statusColor)),&#10;              ],&#10;            ),&#10;          ],&#10;        ),&#10;        trailing: PopupMenuButton(&#10;          onSelected: (value) {&#10;            switch (value) {&#10;              case 'edit':&#10;                _showEditScheduleDialog(schedule);&#10;                break;&#10;              case 'delete':&#10;                _showDeleteConfirmDialog(schedule);&#10;                break;&#10;            }&#10;          },&#10;          itemBuilder: (context) =&gt; [&#10;            const PopupMenuItem(&#10;              value: 'edit',&#10;              child: Row(&#10;                children: [&#10;                  Icon(Icons.edit),&#10;                  SizedBox(width: 8),&#10;                  Text('Chỉnh sửa'),&#10;                ],&#10;              ),&#10;            ),&#10;            const PopupMenuItem(&#10;              value: 'delete',&#10;              child: Row(&#10;                children: [&#10;                  Icon(Icons.delete, color: Colors.red),&#10;                  SizedBox(width: 8),&#10;                  Text('Xóa', style: TextStyle(color: Colors.red)),&#10;                ],&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  void _showAddScheduleDialog() {&#10;    showDialog(&#10;      context: context,&#10;      builder: (context) =&gt; AlertDialog(&#10;        title: const Text('Thêm lịch trình'),&#10;        content: const Text('Chức năng thêm lịch trình sẽ được phát triển'),&#10;        actions: [&#10;          TextButton(&#10;            onPressed: () =&gt; Navigator.pop(context),&#10;            child: const Text('Đóng'),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  void _showEditScheduleDialog(Schedule schedule) {&#10;    showDialog(&#10;      context: context,&#10;      builder: (context) =&gt; AlertDialog(&#10;        title: const Text('Chỉnh sửa lịch trình'),&#10;        content: Text('Chỉnh sửa: ${schedule.title}'),&#10;        actions: [&#10;          TextButton(&#10;            onPressed: () =&gt; Navigator.pop(context),&#10;            child: const Text('Hủy'),&#10;          ),&#10;          TextButton(&#10;            onPressed: () =&gt; Navigator.pop(context),&#10;            child: const Text('Lưu'),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;&#10;  void _showDeleteConfirmDialog(Schedule schedule) {&#10;    showDialog(&#10;      context: context,&#10;      builder: (context) =&gt; AlertDialog(&#10;        title: const Text('Xác nhận xóa'),&#10;        content: Text('Bạn có chắc chắn muốn xóa lịch trình &quot;${schedule.title}&quot;?'),&#10;        actions: [&#10;          TextButton(&#10;            onPressed: () =&gt; Navigator.pop(context),&#10;            child: const Text('Hủy'),&#10;          ),&#10;          TextButton(&#10;            onPressed: () {&#10;              // TODO: Implement delete functionality&#10;              Navigator.pop(context);&#10;              ScaffoldMessenger.of(context).showSnackBar(&#10;                const SnackBar(content: Text('Đã xóa lịch trình')),&#10;              );&#10;            },&#10;            style: TextButton.styleFrom(foregroundColor: Colors.red),&#10;            child: const Text('Xóa'),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;}&#10;&#10;// Schedule model&#10;class Schedule {&#10;  final String id;&#10;  final String title;&#10;  final String startTime;&#10;  final String endTime;&#10;  final String address;&#10;  final ScheduleStatus status;&#10;&#10;  Schedule({&#10;    required this.id,&#10;    required this.title,&#10;    required this.startTime,&#10;    required this.endTime,&#10;    required this.address,&#10;    required this.status,&#10;  });&#10;}&#10;&#10;enum ScheduleStatus {&#10;  confirmed,&#10;  pending,&#10;  cancelled,&#10;  leave,&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pubspec.yaml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pubspec.yaml" />
              <option name="originalContent" value="name: homecare_helper&#10;description: &quot;HomeCare Services Application&quot;&#10;# The following line prevents the package from being accidentally published to&#10;# pub.dev using `flutter pub publish`. This is preferred for private packages.&#10;publish_to: 'none' # Remove this line if you wish to publish to pub.dev&#10;&#10;# The following defines the version and build number for your application.&#10;# A version number is three numbers separated by dots, like 1.2.43&#10;# followed by an optional build number separated by a +.&#10;# Both the version and the builder number may be overridden in flutter&#10;# build by specifying --build-name and --build-number, respectively.&#10;# In Android, build-name is used as versionName while build-number used as versionCode.&#10;# Read more about Android versioning at https://developer.android.com/studio/publish/versioning&#10;# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.&#10;# Read more about iOS versioning at&#10;# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html&#10;# In Windows, build-name is used as the major, minor, and patch parts&#10;# of the product and file versions while build-number is used as the build suffix.&#10;version: 1.0.0+1&#10;&#10;environment:&#10;  sdk: ^3.5.0&#10;&#10;# Dependencies specify other packages that your package needs in order to work.&#10;# To automatically upgrade your package dependencies to the latest versions&#10;# consider running `flutter pub upgrade --major-versions`. Alternatively,&#10;# dependencies can be manually updated by changing the version numbers below to&#10;# the latest version available on pub.dev. To see which dependencies have newer&#10;# versions available, run `flutter pub outdated`.&#10;dependencies:&#10;  flutter:&#10;    sdk: flutter&#10;  provider: ^6.1.2&#10;  google_nav_bar: ^5.0.6&#10;  curved_navigation_bar: 1.0.6  &#10;  # The following adds the Cupertino Icons font to your application.&#10;  # Use with the CupertinoIcons class for iOS style icons.&#10;  cupertino_icons: ^1.0.8&#10;  collection: ^1.18.0&#10;  http: ^1.2.2&#10;  intl: ^0.20.1&#10;  percent_indicator: ^4.2.3&#10;  awesome_dialog: ^3.2.1&#10;  table_calendar: ^3.1.2&#10;  syncfusion_flutter_calendar: ^28.1.41&#10;  syncfusion_flutter_datepicker: ^28.1.41&#10;  carousel_slider: ^5.0.0&#10;  smooth_page_indicator: ^1.0.0+2&#10;  flutter_staggered_grid_view: ^0.7.0&#10;  dropdown_button2: ^2.3.9&#10;  animations: ^2.0.11&#10;  flutter_launcher_icons: ^0.14.3&#10;  horizontal_date_picker_flutter: ^0.0.1&#10;  convex_bottom_bar: ^3.2.0&#10;  salomon_bottom_bar: ^3.3.2&#10;  lottie: ^3.3.1&#10;  cached_network_image: ^3.4.1&#10;  flutter_staggered_animations: ^1.1.1&#10;  path_provider: ^2.1.5&#10;  shimmer: ^3.0.0&#10;  dropdown_search: ^6.0.2&#10;  web_socket_channel: ^3.0.2&#10;&#10;&#10;flutter_launcher_icons:&#10;  android: true&#10;  ios: true&#10;  image_path: &quot;lib/images/logohelper.png&quot;  # Đổi thành đường dẫn icon của bạn&#10;  adaptive_icon_background: &quot;#ffffff&quot;  # Màu nền adaptive icon (Android)&#10;  adaptive_icon_foreground: &quot;lib/images/logohelper.png&quot;  # Adaptive icon foreground&#10;&#10;&#10;dev_dependencies:&#10;  flutter_test:&#10;    sdk: flutter&#10;&#10;  # The &quot;flutter_lints&quot; package below contains a set of recommended lints to&#10;  # encourage good coding practices. The lint set provided by the package is&#10;  # activated in the `analysis_options.yaml` file located at the root of your&#10;  # package. See that file for information about deactivating specific lint&#10;  # rules and activating additional ones.&#10;  flutter_lints: ^5.0.0&#10;&#10;# For information on the generic Dart part of this file, see the&#10;# following page: https://dart.dev/tools/pub/pubspec&#10;&#10;# The following section is specific to Flutter packages.&#10;flutter:&#10;&#10;  # The following line ensures that the Material Icons font is&#10;  # included with your application, so that you can use the icons in&#10;  # the material Icons class.&#10;  uses-material-design: true&#10;&#10;  # To add assets to your application, add an assets section, like this:&#10;  assets:&#10;    - lib/images/logo2.png&#10;    - lib/images/logo.png&#10;    - lib/images/logohelper.png&#10;    - lib/images/background.png&#10;    - lib/images/banner_1.png&#10;    - lib/images/banner_2.png&#10;    - lib/images/banner_3.png&#10;    - lib/images/avt.png&#10;    - lib/images/services/&#10;    - lib/images/staff/&#10;    - lib/images/logo_noti.png&#10;    - lib/images/delay/home.png&#10;    - lib/images/delay/la1.png&#10;    - lib/images/delay/la2.png&#10;    - lib/images/delay/la3.png&#10;    - lib/images/delay/la4.png&#10;    - lib/images/delay/homecare.png&#10;    - lib/images/delay/hand.png&#10;    - lib/images/delay/line.png&#10;    - lib/images/payment/momo.jpg&#10;    - lib/images/payment/vietcombank.jpg&#10;    - lib/images/payment/vnpay.jpg&#10;    - lib/images/vnpay.png&#10;    - lib/images/momo.png&#10;    - lib/images/loading.json&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;  #   - images/a_dot_ham.jpeg&#10;&#10;  # An image asset can refer to one or more resolution-specific &quot;variants&quot;, see&#10;  # https://flutter.dev/to/resolution-aware-images&#10;&#10;  # For details regarding adding assets from package dependencies, see&#10;  # https://flutter.dev/to/asset-from-package&#10;&#10;  # To add custom fonts to your application, add a fonts section here,&#10;  # in this &quot;flutter&quot; section. Each entry in this list should have a&#10;  # &quot;family&quot; key with the font family name, and a &quot;fonts&quot; key with a&#10;  # list giving the asset and other descriptors for the font. For&#10;  # example:&#10;  fonts:&#10;    - family: Nunito&#10;      fonts:&#10;        - asset: lib/images/fonts/Nunito.ttf&#10;        - asset: lib/images/fonts/Nunito-italic.ttf&#10;          weight: 700&#10;          style: italic&#10;    - family: Quicksand&#10;      fonts:&#10;        - asset: lib/images/fonts/Quicksand-Light.ttf&#10;        - asset: lib/images/fonts/Quicksand-Medium.ttf&#10;        - asset: lib/images/fonts/Quicksand-Bold.ttf&#10;        - asset: lib/images/fonts/Quicksand-SemiBold.ttf&#10;  &#10;  # For details regarding fonts from package dependencies,&#10;  # see https://flutter.dev/to/font-from-package&#10;" />
              <option name="updatedContent" value="name: homecare_helper&#10;description: &quot;HomeCare Services Application&quot;&#10;# The following line prevents the package from being accidentally published to&#10;# pub.dev using `flutter pub publish`. This is preferred for private packages.&#10;publish_to: 'none' # Remove this line if you wish to publish to pub.dev&#10;&#10;# The following defines the version and build number for your application.&#10;# A version number is three numbers separated by dots, like 1.2.43&#10;# followed by an optional build number separated by a +.&#10;# Both the version and the builder number may be overridden in flutter&#10;# build by specifying --build-name and --build-number, respectively.&#10;# In Android, build-name is used as versionName while build-number used as versionCode.&#10;# Read more about Android versioning at https://developer.android.com/studio/publish/versioning&#10;# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.&#10;# Read more about iOS versioning at&#10;# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html&#10;# In Windows, build-name is used as the major, minor, and patch parts&#10;# of the product and file versions while build-number is used as the build suffix.&#10;version: 1.0.0+1&#10;&#10;environment:&#10;  sdk: ^3.5.0&#10;&#10;# Dependencies specify other packages that your package needs in order to work.&#10;# To automatically upgrade your package dependencies to the latest versions&#10;# consider running `flutter pub upgrade --major-versions`. Alternatively,&#10;# dependencies can be manually updated by changing the version numbers below to&#10;# the latest version available on pub.dev. To see which dependencies have newer&#10;# versions available, run `flutter pub outdated`.&#10;dependencies:&#10;  flutter:&#10;    sdk: flutter&#10;  provider: ^6.1.2&#10;  google_nav_bar: ^5.0.6&#10;  curved_navigation_bar: 1.0.6  &#10;  # The following adds the Cupertino Icons font to your application.&#10;  # Use with the CupertinoIcons class for iOS style icons.&#10;  cupertino_icons: ^1.0.8&#10;  collection: ^1.18.0&#10;  http: ^1.2.2&#10;  intl: ^0.20.1&#10;  percent_indicator: ^4.2.3&#10;  awesome_dialog: ^3.2.1&#10;  table_calendar: ^3.0.9&#10;  syncfusion_flutter_calendar: ^28.1.41&#10;  syncfusion_flutter_datepicker: ^28.1.41&#10;  carousel_slider: ^5.0.0&#10;  smooth_page_indicator: ^1.0.0+2&#10;  flutter_staggered_grid_view: ^0.7.0&#10;  dropdown_button2: ^2.3.9&#10;  animations: ^2.0.11&#10;  flutter_launcher_icons: ^0.14.3&#10;  horizontal_date_picker_flutter: ^0.0.1&#10;  convex_bottom_bar: ^3.2.0&#10;  salomon_bottom_bar: ^3.3.2&#10;  lottie: ^3.3.1&#10;  cached_network_image: ^3.4.1&#10;  flutter_staggered_animations: ^1.1.1&#10;  path_provider: ^2.1.5&#10;  shimmer: ^3.0.0&#10;  dropdown_search: ^6.0.2&#10;  web_socket_channel: ^3.0.2&#10;&#10;&#10;flutter_launcher_icons:&#10;  android: true&#10;  ios: true&#10;  image_path: &quot;lib/images/logohelper.png&quot;  # Đổi thành đường dẫn icon của bạn&#10;  adaptive_icon_background: &quot;#ffffff&quot;  # Màu nền adaptive icon (Android)&#10;  adaptive_icon_foreground: &quot;lib/images/logohelper.png&quot;  # Adaptive icon foreground&#10;&#10;&#10;dev_dependencies:&#10;  flutter_test:&#10;    sdk: flutter&#10;&#10;  # The &quot;flutter_lints&quot; package below contains a set of recommended lints to&#10;  # encourage good coding practices. The lint set provided by the package is&#10;  # activated in the `analysis_options.yaml` file located at the root of your&#10;  # package. See that file for information about deactivating specific lint&#10;  # rules and activating additional ones.&#10;  flutter_lints: ^5.0.0&#10;&#10;# For information on the generic Dart part of this file, see the&#10;# following page: https://dart.dev/tools/pub/pubspec&#10;&#10;# The following section is specific to Flutter packages.&#10;flutter:&#10;&#10;  # The following line ensures that the Material Icons font is&#10;  # included with your application, so that you can use the icons in&#10;  # the material Icons class.&#10;  uses-material-design: true&#10;&#10;  # To add assets to your application, add an assets section, like this:&#10;  assets:&#10;    - lib/images/logo2.png&#10;    - lib/images/logo.png&#10;    - lib/images/logohelper.png&#10;    - lib/images/background.png&#10;    - lib/images/banner_1.png&#10;    - lib/images/banner_2.png&#10;    - lib/images/banner_3.png&#10;    - lib/images/avt.png&#10;    - lib/images/services/&#10;    - lib/images/staff/&#10;    - lib/images/logo_noti.png&#10;    - lib/images/delay/home.png&#10;    - lib/images/delay/la1.png&#10;    - lib/images/delay/la2.png&#10;    - lib/images/delay/la3.png&#10;    - lib/images/delay/la4.png&#10;    - lib/images/delay/homecare.png&#10;    - lib/images/delay/hand.png&#10;    - lib/images/delay/line.png&#10;    - lib/images/payment/momo.jpg&#10;    - lib/images/payment/vietcombank.jpg&#10;    - lib/images/payment/vnpay.jpg&#10;    - lib/images/vnpay.png&#10;    - lib/images/momo.png&#10;    - lib/images/loading.json&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;  #   - images/a_dot_ham.jpeg&#10;&#10;  # An image asset can refer to one or more resolution-specific &quot;variants&quot;, see&#10;  # https://flutter.dev/to/resolution-aware-images&#10;&#10;  # For details regarding adding assets from package dependencies, see&#10;  # https://flutter.dev/to/asset-from-package&#10;&#10;  # To add custom fonts to your application, add a fonts section here,&#10;  # in this &quot;flutter&quot; section. Each entry in this list should have a&#10;  # &quot;family&quot; key with the font family name, and a &quot;fonts&quot; key with a&#10;  # list giving the asset and other descriptors for the font. For&#10;  # example:&#10;  fonts:&#10;    - family: Nunito&#10;      fonts:&#10;        - asset: lib/images/fonts/Nunito.ttf&#10;        - asset: lib/images/fonts/Nunito-italic.ttf&#10;          weight: 700&#10;          style: italic&#10;    - family: Quicksand&#10;      fonts:&#10;        - asset: lib/images/fonts/Quicksand-Light.ttf&#10;        - asset: lib/images/fonts/Quicksand-Medium.ttf&#10;        - asset: lib/images/fonts/Quicksand-Bold.ttf&#10;        - asset: lib/images/fonts/Quicksand-SemiBold.ttf&#10;  &#10;  # For details regarding fonts from package dependencies,&#10;  # see https://flutter.dev/to/font-from-package" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>