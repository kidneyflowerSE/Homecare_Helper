import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:homecare_helper/data/model/customer.dart';
import 'package:homecare_helper/data/model/helper.dart';
import 'package:homecare_helper/data/model/request.dart';
import 'package:homecare_helper/data/repository/repository.dart';
import 'package:homecare_helper/data/model/request_detail.dart';

class HomeContent extends StatefulWidget {
  final Helper helper;

  const HomeContent({
    Key? key,
    required this.helper,
  }) : super(key: key);

  @override
  State<HomeContent> createState() => _HomeContentState();
}

class _HomeContentState extends State<HomeContent>
    with SingleTickerProviderStateMixin {
  String _selectedStatus = "notDone";
  Key pageKey = UniqueKey();
  List<Requests> requests = [];
  List<Requests> helperRequests = [];
  List<Customer> customers = [];
  List<RequestDetail> requestDetails = [];
  bool isLoading = true;
  late TabController _tabController;
  Map<String, Set<int>> completedDaysMap = {};
  final currencyFormat =
      NumberFormat.currency(locale: 'vi_VN', symbol: '₫', decimalDigits: 0);

  final Map<String, Map<String, dynamic>> _statusInfo = {
    "notDone": {
      "label": "Chờ xác nhận",
      "color": Colors.amber,
      "icon": Icons.access_time,
    },
    "assigned": {
      "label": "Đã nhận việc",
      "color": Colors.blue,
      "icon": Icons.assignment_turned_in,
    },
    "processing": {
      "label": "Đang tiến hành",
      "color": Colors.purple,
      "icon": Icons.hourglass_top,
    },
    "waitPayment": {
      "label": "Chờ thanh toán",
      "color": Colors.orange,
      "icon": Icons.payments,
    },
    "done": {
      "label": "Hoàn thành",
      "color": Colors.green,
      "icon": Icons.check_circle,
    },
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 5, vsync: this);
    _tabController.addListener(() {
      setState(() {
        _selectedStatus = _getStatusByTabIndex(_tabController.index);
      });
    });
    loadData();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  String _getStatusByTabIndex(int index) {
    switch (index) {
      case 0:
        return "notDone";
      case 1:
        return "assigned";
      case 2:
        return "processing";
      case 3:
        return "waitPayment";
      case 4:
        return "done";
      default:
        return "notDone";
    }
  }

  Future<void> loadData() async {
    setState(() {
      isLoading = true;
    });

    try {
      var repository = DefaultRepository();

      var fetchedRequests = await repository.loadRequest();
      var fetchedCustomers = await repository.loadCustomer();
      var fetchedRequestDetails =
          await repository.getRequestDetailById(widget.helper.id);

      setState(() {
        requests = fetchedRequests ?? [];
        customers = fetchedCustomers ?? [];
        requestDetails = fetchedRequestDetails ?? [];
        updateHelperRequests();
        isLoading = false;
      });
    } catch (e) {
      setState(() {
        isLoading = false;
      });

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Lỗi tải dữ liệu: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void updateHelperRequests() {
    helperRequests = requests
        .where((request) => request.scheduleIds.any((scheduleId) =>
            requestDetails
                .any((requestDetail) => requestDetail.id == scheduleId)))
        .toList();
  }

  // Count jobs in current week
  int _countWeeklyJobs(List<Requests> requests) {
    final now = DateTime.now();
    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));
    final endOfWeek = startOfWeek.add(const Duration(days: 6));

    return requests.where((req) {
      if (req.startTime == null) return false;
      try {
        final jobDate = DateTime.parse(req.startTime!);
        return jobDate.isAfter(startOfWeek) &&
            jobDate.isBefore(endOfWeek.add(const Duration(days: 1)));
      } catch (e) {
        return false;
      }
    }).length;
  }

  // Calculate this week's income
  double _calculateWeeklyIncome() {
    final now = DateTime.now();
    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));
    final endOfWeek = startOfWeek.add(const Duration(days: 6));

    return requestDetails
        .where((detail) =>
            detail.status == 'done' &&
            detail.workingDate != null &&
            DateTime.parse(detail.workingDate!).isAfter(startOfWeek) &&
            DateTime.parse(detail.workingDate!)
                .isBefore(endOfWeek.add(const Duration(days: 1))))
        .fold(0.0, (sum, detail) => sum + (detail.helperCost ?? 0));
  }

  // Calculate total earnings
  double _calculateTotalEarnings() {
    return requestDetails
        .where((detail) => detail.status == 'done')
        .fold(0.0, (sum, detail) => sum + (detail.helperCost ?? 0));
  }

  // Get count of jobs by status
  int _getJobCountByStatus(String status) {
    return helperRequests.where((req) => req.status == status).length;
  }

  Future<void> assignedRequest(Requests request) async {
    var repository = DefaultRepository();
    await repository.remoteDataSource.assignedRequest(request.id);
    setState(() {
      request.status = 'assigned';
    });
  }

  Future<void> processingRequest(Requests request, int index) async {
    var repository = DefaultRepository();
    for (var i = 0; i < index; ++i) {
      await repository.processingRequest(request.scheduleIds[i]);
    }
    setState(() {
      request.status = 'processing';
    });
  }

  Future<void> finishRequest(Requests request, int index) async {
    var repository = DefaultRepository();

    for (var id = 0; id < index; ++id) {
      await repository.doneConfirmRequest(request.scheduleIds[id]);
    }

    setState(() {
      request.status = 'waitPayment';
    });
  }

  Future<void> finishPayment(Requests request) async {
    var repository = DefaultRepository();
    await repository.remoteDataSource.finishPayment(request.scheduleIds.first);
    setState(() {
      request.status = 'done';
    });
  }

  Future<void> cancelRequest(Requests request) async {
    var repository = DefaultRepository();
    await repository.remoteDataSource.cancelRequest(request.id);
    setState(() {
      request.status = 'cancelled';
    });
  }

  @override
  Widget build(BuildContext context) {
    updateHelperRequests();

    // Filter requests based on selected status
    List<Requests> filteredRequests =
        helperRequests.where((req) => req.status == _selectedStatus).toList()
          ..sort((a, b) {
            DateTime dateA =
                DateTime.parse(a.startTime ?? DateTime.now().toString());
            DateTime dateB =
                DateTime.parse(b.startTime ?? DateTime.now().toString());
            return dateB.compareTo(dateA); // Sort by most recent first
          });

    return SafeArea(
      child: isLoading
          ? const Center(child: CircularProgressIndicator())
          : RefreshIndicator(
              onRefresh: loadData,
              child: NestedScrollView(
                headerSliverBuilder: (context, innerBoxIsScrolled) {
                  return [
                    SliverToBoxAdapter(
                      child: _buildHeader(),
                    ),
                    SliverToBoxAdapter(
                      child: _buildDashboard(),
                    ),
                    SliverPersistentHeader(
                      delegate: _SliverAppBarDelegate(
                        TabBar(
                          controller: _tabController,
                          isScrollable: true,
                          labelColor: Theme.of(context).primaryColor,
                          unselectedLabelColor: Colors.grey,
                          indicatorColor: Theme.of(context).primaryColor,
                          tabs: _statusInfo.entries.map((entry) {
                            return Tab(
                              icon: Badge(
                                label: Text(
                                    _getJobCountByStatus(entry.key).toString()),
                                isLabelVisible:
                                    _getJobCountByStatus(entry.key) > 0,
                                child: Icon(entry.value["icon"]),
                              ),
                              text: entry.value["label"],
                            );
                          }).toList(),
                        ),
                      ),
                      pinned: true,
                    ),
                  ];
                },
                body: TabBarView(
                  controller: _tabController,
                  children: _statusInfo.keys.map((status) {
                    final statusRequests = helperRequests
                        .where((req) => req.status == status)
                        .toList()
                      ..sort((a, b) {
                        DateTime dateA = DateTime.parse(
                            a.startTime ?? DateTime.now().toString());
                        DateTime dateB = DateTime.parse(
                            b.startTime ?? DateTime.now().toString());
                        return dateB.compareTo(dateA);
                      });

                    if (statusRequests.isEmpty) {
                      return _buildEmptyState(status);
                    }

                    return ListView.builder(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 8),
                      itemCount: statusRequests.length,
                      itemBuilder: (context, index) {
                        return _buildJobCard(statusRequests[index]);
                      },
                    );
                  }).toList(),
                ),
              ),
            ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).primaryColor.withOpacity(0.05),
        borderRadius: const BorderRadius.only(
          bottomLeft: Radius.circular(24),
          bottomRight: Radius.circular(24),
        ),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Container(
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.white, width: 2),
                  borderRadius: BorderRadius.circular(50),
                ),
                child: CircleAvatar(
                  radius: 24,
                  backgroundImage: widget.helper.avatar!.isEmpty
                      ? NetworkImage('${widget.helper.avatar}')
                      : null,
                  child: widget.helper.avatar!.isEmpty
                      ? Icon(Icons.person, color: Colors.green)
                      : null,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      "Xin chào,",
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey[600],
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    Text(
                      '${widget.helper.fullName}',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.green,
                      ),
                    ),
                  ],
                ),
              ),
              Container(
                padding:
                    const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.15),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Row(
                  children: [
                    Container(
                      width: 8,
                      height: 8,
                      decoration: const BoxDecoration(
                        color: Colors.green,
                        shape: BoxShape.circle,
                      ),
                    ),
                    const SizedBox(width: 6),
                    const Text(
                      "Trực tuyến",
                      style: TextStyle(
                        color: Colors.green,
                        fontWeight: FontWeight.w600,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildDashboard() {
    final weeklyIncome = _calculateWeeklyIncome();
    final totalEarnings = _calculateTotalEarnings();
    final weeklyJobs = _countWeeklyJobs(helperRequests);

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "Thống kê của bạn",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  // Theme.of(context).primaryColor,
                  // Theme.of(context).primaryColor.withOpacity(0.7),
                  Colors.green,
                  Colors.green.withOpacity(0.7),
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Theme.of(context).primaryColor.withOpacity(0.2),
                  blurRadius: 10,
                  offset: const Offset(0, 5),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  "Tổng thu nhập",
                  style: TextStyle(
                    color: Colors.white70,
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  currencyFormat.format(totalEarnings),
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            "Thu nhập tuần này",
                            style: TextStyle(
                              color: Colors.white70,
                              fontSize: 12,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            currencyFormat.format(weeklyIncome),
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                    Container(
                      width: 1,
                      height: 30,
                      color: Colors.white30,
                    ),
                    Expanded(
                      child: Padding(
                        padding: const EdgeInsets.only(left: 16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              "Công việc tuần này",
                              style: TextStyle(
                                color: Colors.white70,
                                fontSize: 12,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              "$weeklyJobs công việc",
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          const SizedBox(height: 24),
          const Text(
            "Danh sách công việc",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
        ],
      ),
    );
  }

  Widget _buildEmptyState(String status) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            _statusInfo[status]?["icon"] ?? Icons.work_off_outlined,
            size: 64,
            color: Colors.grey[300],
          ),
          const SizedBox(height: 16),
          Text(
            "Không có công việc ${_statusInfo[status]?["label"] ?? ""}",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            "Bạn chưa có công việc nào ở trạng thái này",
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[500],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildJobCard(Requests request) {
    DateTime now =
        DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day);
    DateTime start = DateTime(
        DateTime.parse(request.startTime).year,
        DateTime.parse(request.startTime).month,
        DateTime.parse(request.startTime).day);

    final statusInfo = _statusInfo[request.status] ??
        {
          "color": Colors.grey,
          "label": "Không xác định",
          "icon": Icons.help_outline,
        };

    // Calculate the day index for multi-day services
    int index = request.scheduleIds.length; // Default
    if ((request.status == "processing" || request.status == 'assigned') &&
        start.isAtSameMomentAs(now)) {
      index = now.difference(start).inDays + 1;
    }

    // Format the date for display
    String formattedDate = '';
    try {
      final date = DateTime.parse(request.startTime ?? '');
      formattedDate = DateFormat('dd/MM/yyyy').format(date);
    } catch (e) {
      formattedDate = request.startTime ?? '';
    }

    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(
          color: statusInfo["color"].withOpacity(0.3),
          width: 1,
        ),
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              color: statusInfo["color"].withOpacity(0.1),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Icon(
                  statusInfo["icon"],
                  color: statusInfo["color"],
                  size: 20,
                ),
                const SizedBox(width: 8),
                Text(
                  statusInfo["label"],
                  style: TextStyle(
                    color: statusInfo["color"],
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Spacer(),
                Text(
                  formattedDate,
                  style: TextStyle(
                    color: Colors.grey[600],
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.blue[50],
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Icon(
                        _getServiceIcon(request.service.title),
                        color: Colors.blue,
                        size: 24,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            request.service.title,
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            "Mã đơn: #${request.id.substring(0, 8)}",
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.grey[600],
                            ),
                          ),
                          const SizedBox(height: 8),
                          Text(
                            currencyFormat.format(request.totalCost),
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: Colors.green[700],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
                const Divider(height: 24),
                _buildInfoRow(
                  icon: Icons.person,
                  label: "Khách hàng",
                  value: request.customerInfo.fullName,
                ),
                _buildInfoRow(
                  icon: Icons.phone,
                  label: "Điện thoại",
                  value: request.customerInfo.phone,
                ),
                _buildInfoRow(
                  icon: Icons.location_on,
                  label: "Địa chỉ",
                  value:
                      "${request.customerInfo.address},${request.location.ward}, ${request.location.district}, ${request.location.province}",
                ),
                _buildInfoRow(
                    icon: Icons.access_time,
                    label: "Thời gian",
                    value:
                        // "${request.startTime?.split(' ')[1] ?? ''} - ${request.endTime?.split(' ')[1] ?? ''}",
                        // '5',
                        '${request.endTime}'),
                if (request.scheduleIds.length > 1)
                  _buildInfoRow(
                    icon: Icons.calendar_today,
                    label: "Số ngày",
                    value: "${request.scheduleIds.length} ngày",
                    valueColor: Colors.blue[700],
                  ),
                const SizedBox(height: 16),
                _buildActionButtons(request, index),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoRow({
    required IconData icon,
    required String label,
    required String value,
    Color? valueColor,
  }) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        children: [
          Icon(
            icon,
            size: 16,
            color: Colors.grey[600],
          ),
          const SizedBox(width: 8),
          Text(
            "$label: ",
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 14,
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                fontWeight: FontWeight.w500,
                color: valueColor ?? Colors.black87,
                fontSize: 14,
              ),
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons(Requests request, int index) {
    switch (request.status) {
      case "notDone":
        return Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                onPressed: () => _showRejectConfirmationDialog(request),
                icon: const Icon(Icons.close, size: 16),
                label: const Text("Từ chối"),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.red,
                  side: const BorderSide(color: Colors.red),
                  padding: const EdgeInsets.symmetric(vertical: 12),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _showAcceptConfirmationDialog(request),
                icon: const Icon(Icons.check, size: 16),
                label: const Text("Nhận việc"),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 12),
                ),
              ),
            ),
          ],
        );
      case "assigned":
        return ElevatedButton.icon(
          onPressed: () => processingRequest(request, index),
          icon: const Icon(Icons.play_arrow, size: 16),
          label: const Text("Bắt đầu làm việc"),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.blue,
            foregroundColor: Colors.white,
            minimumSize: const Size(double.infinity, 48),
          ),
        );
      case "processing":
        return ElevatedButton.icon(
          onPressed: () => finishRequest(request, index),
          icon: const Icon(Icons.check_circle, size: 16),
          label: Text(
              "Hoàn thành công việc (Ngày: $index/${request.scheduleIds.length})"),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.green,
            foregroundColor: Colors.white,
            minimumSize: const Size(double.infinity, 48),
          ),
        );
      case "waitPayment":
        return ElevatedButton.icon(
          onPressed: () => finishPayment(request),
          icon: const Icon(Icons.payments, size: 16),
          label: const Text("Xác nhận thanh toán"),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.orange,
            foregroundColor: Colors.white,
            minimumSize: const Size(double.infinity, 48),
          ),
        );
      default:
        return const SizedBox.shrink();
    }
  }

  Future<void> _showRejectConfirmationDialog(Requests request) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          title: const Text(
            'Xác nhận từ chối',
            style: TextStyle(
              fontWeight: FontWeight.bold,
            ),
          ),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                const Text(
                  'Bạn có chắc chắn muốn từ chối công việc này?',
                ),
                const SizedBox(height: 12),
                Text(
                  'Dịch vụ: ${request.service.title}',
                  style: const TextStyle(
                    fontWeight: FontWeight.w500,
                  ),
                ),
                Text(
                  'Khách hàng: ${request.customerInfo.fullName}',
                  style: const TextStyle(
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: Text(
                'Hủy',
                style: TextStyle(
                  color: Colors.grey[700],
                ),
              ),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text(
                'Từ chối',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                ),
              ),
              onPressed: () {
                cancelRequest(request);
                Navigator.of(context).pop();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Đã từ chối công việc thành công'),
                    backgroundColor: Colors.red,
                    duration: Duration(seconds: 2),
                  ),
                );
              },
            ),
          ],
        );
      },
    );
  }

  Future<void> _showAcceptConfirmationDialog(Requests request) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          title: const Text(
            'Xác nhận nhận việc',
            style: TextStyle(
              fontWeight: FontWeight.bold,
            ),
          ),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                const Text(
                  'Bạn có chắc chắn muốn nhận công việc này?',
                ),
                const SizedBox(height: 12),
                Text(
                  'Dịch vụ: ${request.service.title}',
                  style: const TextStyle(
                    fontWeight: FontWeight.w500,
                  ),
                ),
                Text(
                  'Khách hàng: ${request.customerInfo.fullName}',
                  style: const TextStyle(
                    fontWeight: FontWeight.w500,
                  ),
                ),
                Text(
                  'Thời gian: ${DateFormat('dd/MM/yyyy').format(DateTime.parse(request.startTime ?? ''))}',
                  style: const TextStyle(
                    fontWeight: FontWeight.w500,
                  ),
                ),
                Text(
                  'Địa chỉ: ${request.location.ward}, ${request.location.district}',
                  style: const TextStyle(
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: Text(
                'Hủy',
                style: TextStyle(
                  color: Colors.grey[700],
                ),
              ),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text(
                'Nhận việc',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                ),
              ),
              onPressed: () {
                assignedRequest(request);
                Navigator.of(context).pop();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Đã nhận công việc thành công'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 2),
                  ),
                );
              },
            ),
          ],
        );
      },
    );
  }

  IconData _getServiceIcon(String serviceTitle) {
    // Map service titles to appropriate icons
    switch (serviceTitle.toLowerCase()) {
      case 'dọn dẹp nhà cửa':
      case 'dọn dẹp nhà':
      case 'vệ sinh nhà':
        return Icons.cleaning_services;
      case 'nấu ăn':
      case 'nấu ăn gia đình':
        return Icons.restaurant;
      case 'giặt ủi':
      case 'giặt đồ':
        return Icons.local_laundry_service;
      case 'chăm sóc người già':
      case 'chăm sóc người cao tuổi':
        return Icons.elderly;
      case 'chăm sóc trẻ em':
      case 'trông trẻ':
        return Icons.child_care;
      case 'chăm sóc thú cưng':
        return Icons.pets;
      default:
        return Icons.home_repair_service;
    }
  }
}

class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  final TabBar _tabBar;

  _SliverAppBarDelegate(this._tabBar);

  @override
  double get minExtent => _tabBar.preferredSize.height;

  @override
  double get maxExtent => _tabBar.preferredSize.height;

  @override
  Widget build(
      BuildContext context, double shrinkOffset, bool overlapsContent) {
    return Container(
      color: Colors.white,
      child: _tabBar,
    );
  }

  @override
  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) {
    return false;
  }
}
